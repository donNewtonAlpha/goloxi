/*
 * Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
 * Copyright (c) 2011, 2012 Open Networking Foundation
 * Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler.
 * Copyright 2018, Red Hat, Inc.
 */
// Automatically generated by LOXI from template module.go
// Do not modify

package of15

import (
	"fmt"

	"github.com/skydive-project/goloxi"
)

type Oxs struct {
	TypeLen uint32
}

type IOxs interface {
	goloxi.Serializable
	GetTypeLen() uint32
}

func (self *Oxs) GetTypeLen() uint32 {
	return self.TypeLen
}

func (self *Oxs) Serialize(encoder *goloxi.Encoder) error {
	encoder.PutUint32(uint32(self.TypeLen))

	return nil
}

func decodeOxs(decoder *goloxi.Decoder) (IOxs, error) {
	oxs := &Oxs{}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("Oxs packet too short: %d < 4", decoder.Length())
	}
	oxs.TypeLen = uint32(decoder.ReadUint32())

	switch oxs.TypeLen {
	case 2147616776:
		return decodeOxsByteCount(oxs, decoder)
	case 2147614728:
		return decodeOxsDuration(oxs, decoder)
	case 2147615748:
		return decodeOxsFlowCount(oxs, decoder)
	case 2147616264:
		return decodeOxsPacketCount(oxs, decoder)
	case 2147615240:
		return decodeOxsIdleTime(oxs, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'Oxs'", oxs.TypeLen)
	}
}

func NewOxs(_type_len uint32) *Oxs {
	return &Oxs{
		TypeLen: _type_len,
	}
}

type OxsByteCount struct {
	*Oxs
	Value uint64
}

func (self *OxsByteCount) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Oxs.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint64(uint64(self.Value))

	return nil
}

func decodeOxsByteCount(parent *Oxs, decoder *goloxi.Decoder) (*OxsByteCount, error) {
	oxsbytecount := &OxsByteCount{Oxs: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("OxsByteCount packet too short: %d < 8", decoder.Length())
	}
	oxsbytecount.Value = uint64(decoder.ReadUint64())
	return oxsbytecount, nil
}

func NewOxsByteCount() *OxsByteCount {
	return &OxsByteCount{
		Oxs: NewOxs(2147616776),
	}
}

type OxsDuration struct {
	*Oxs
	Value uint64
}

func (self *OxsDuration) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Oxs.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint64(uint64(self.Value))

	return nil
}

func decodeOxsDuration(parent *Oxs, decoder *goloxi.Decoder) (*OxsDuration, error) {
	oxsduration := &OxsDuration{Oxs: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("OxsDuration packet too short: %d < 8", decoder.Length())
	}
	oxsduration.Value = uint64(decoder.ReadUint64())
	return oxsduration, nil
}

func NewOxsDuration() *OxsDuration {
	return &OxsDuration{
		Oxs: NewOxs(2147614728),
	}
}

type OxsFlowCount struct {
	*Oxs
	Value uint32
}

func (self *OxsFlowCount) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Oxs.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Value))

	return nil
}

func decodeOxsFlowCount(parent *Oxs, decoder *goloxi.Decoder) (*OxsFlowCount, error) {
	oxsflowcount := &OxsFlowCount{Oxs: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("OxsFlowCount packet too short: %d < 4", decoder.Length())
	}
	oxsflowcount.Value = uint32(decoder.ReadUint32())
	return oxsflowcount, nil
}

func NewOxsFlowCount() *OxsFlowCount {
	return &OxsFlowCount{
		Oxs: NewOxs(2147615748),
	}
}

type OxsIdleTime struct {
	*Oxs
	Value uint64
}

func (self *OxsIdleTime) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Oxs.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint64(uint64(self.Value))

	return nil
}

func decodeOxsIdleTime(parent *Oxs, decoder *goloxi.Decoder) (*OxsIdleTime, error) {
	oxsidletime := &OxsIdleTime{Oxs: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("OxsIdleTime packet too short: %d < 8", decoder.Length())
	}
	oxsidletime.Value = uint64(decoder.ReadUint64())
	return oxsidletime, nil
}

func NewOxsIdleTime() *OxsIdleTime {
	return &OxsIdleTime{
		Oxs: NewOxs(2147615240),
	}
}

type OxsPacketCount struct {
	*Oxs
	Value uint64
}

func (self *OxsPacketCount) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Oxs.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint64(uint64(self.Value))

	return nil
}

func decodeOxsPacketCount(parent *Oxs, decoder *goloxi.Decoder) (*OxsPacketCount, error) {
	oxspacketcount := &OxsPacketCount{Oxs: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("OxsPacketCount packet too short: %d < 8", decoder.Length())
	}
	oxspacketcount.Value = uint64(decoder.ReadUint64())
	return oxspacketcount, nil
}

func NewOxsPacketCount() *OxsPacketCount {
	return &OxsPacketCount{
		Oxs: NewOxs(2147616264),
	}
}
