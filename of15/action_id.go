/*
 * Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
 * Copyright (c) 2011, 2012 Open Networking Foundation
 * Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler.
 * Copyright 2018, Red Hat, Inc.
 */
// Automatically generated by LOXI from template module.go
// Do not modify

package of15

import (
	"encoding/binary"
	"fmt"

	"github.com/skydive-project/goloxi"
)

type ActionId struct {
	Type uint16
	Len  uint16
}

type IActionId interface {
	goloxi.Serializable
	GetType() uint16
	GetLen() uint16
}

func (self *ActionId) GetType() uint16 {
	return self.Type
}

func (self *ActionId) GetLen() uint16 {
	return self.Len
}

func (self *ActionId) Serialize(encoder *goloxi.Encoder) error {
	encoder.PutUint16(uint16(self.Type))
	encoder.PutUint16(uint16(self.Len))

	return nil
}

func decodeActionId(decoder *goloxi.Decoder) (IActionId, error) {
	actionid := &ActionId{}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionId packet too short: %d < 4", decoder.Length())
	}
	actionid.Type = uint16(decoder.ReadUint16())
	actionid.Len = uint16(decoder.ReadUint16())
	decoder = decoder.SliceDecoder(int(actionid.Len), 2+2)

	switch actionid.Type {
	case 0:
		return decodeActionIdOutput(actionid, decoder)
	case 11:
		return decodeActionIdCopyTtlOut(actionid, decoder)
	case 12:
		return decodeActionIdCopyTtlIn(actionid, decoder)
	case 15:
		return decodeActionIdSetMplsTtl(actionid, decoder)
	case 16:
		return decodeActionIdDecMplsTtl(actionid, decoder)
	case 17:
		return decodeActionIdPushVlan(actionid, decoder)
	case 18:
		return decodeActionIdPopVlan(actionid, decoder)
	case 19:
		return decodeActionIdPushMpls(actionid, decoder)
	case 20:
		return decodeActionIdPopMpls(actionid, decoder)
	case 21:
		return decodeActionIdSetQueue(actionid, decoder)
	case 22:
		return decodeActionIdGroup(actionid, decoder)
	case 23:
		return decodeActionIdSetNwTtl(actionid, decoder)
	case 24:
		return decodeActionIdDecNwTtl(actionid, decoder)
	case 25:
		return decodeActionIdSetField(actionid, decoder)
	case 26:
		return decodeActionIdPushPbb(actionid, decoder)
	case 27:
		return decodeActionIdPopPbb(actionid, decoder)
	case 29:
		return decodeActionIdMeter(actionid, decoder)
	case 65535:
		return decodeActionIdExperimenter(actionid, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionId'", actionid.Type)
	}
}

func NewActionId(_type uint16) *ActionId {
	return &ActionId{
		Type: _type,
	}
}

type ActionIdExperimenter struct {
	*ActionId
	Experimenter uint32
}

type IActionIdExperimenter interface {
	IActionId
	GetExperimenter() uint32
}

func (self *ActionIdExperimenter) GetExperimenter() uint32 {
	return self.Experimenter
}

func (self *ActionIdExperimenter) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Experimenter))

	return nil
}

func decodeActionIdExperimenter(parent *ActionId, decoder *goloxi.Decoder) (IActionIdExperimenter, error) {
	actionidexperimenter := &ActionIdExperimenter{ActionId: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionIdExperimenter packet too short: %d < 4", decoder.Length())
	}
	actionidexperimenter.Experimenter = uint32(decoder.ReadUint32())

	switch actionidexperimenter.Experimenter {
	case 8992:
		return decodeActionIdNicira(actionidexperimenter, decoder)
	case 6035143:
		return decodeActionIdBsn(actionidexperimenter, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionIdExperimenter'", actionidexperimenter.Experimenter)
	}
}

func NewActionIdExperimenter(_experimenter uint32) *ActionIdExperimenter {
	return &ActionIdExperimenter{
		Experimenter: _experimenter,
		ActionId:     NewActionId(65535),
	}
}

type ActionIdBsn struct {
	*ActionIdExperimenter
	Subtype uint32
}

type IActionIdBsn interface {
	IActionIdExperimenter
	GetSubtype() uint32
}

func (self *ActionIdBsn) GetSubtype() uint32 {
	return self.Subtype
}

func (self *ActionIdBsn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdExperimenter.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Subtype))

	return nil
}

func decodeActionIdBsn(parent *ActionIdExperimenter, decoder *goloxi.Decoder) (IActionIdBsn, error) {
	actionidbsn := &ActionIdBsn{ActionIdExperimenter: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionIdBsn packet too short: %d < 4", decoder.Length())
	}
	actionidbsn.Subtype = uint32(decoder.ReadUint32())

	switch actionidbsn.Subtype {
	case 1:
		return decodeActionIdBsnMirror(actionidbsn, decoder)
	case 2:
		return decodeActionIdBsnSetTunnelDst(actionidbsn, decoder)
	case 4:
		return decodeActionIdBsnChecksum(actionidbsn, decoder)
	case 5:
		return decodeActionIdBsnGentable(actionidbsn, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionIdBsn'", actionidbsn.Subtype)
	}
}

func NewActionIdBsn(_subtype uint32) *ActionIdBsn {
	return &ActionIdBsn{
		Subtype:              _subtype,
		ActionIdExperimenter: NewActionIdExperimenter(6035143),
	}
}

type ActionIdBsnChecksum struct {
	*ActionIdBsn
}

func (self *ActionIdBsnChecksum) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdBsn.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdBsnChecksum(parent *ActionIdBsn, decoder *goloxi.Decoder) (*ActionIdBsnChecksum, error) {
	actionidbsnchecksum := &ActionIdBsnChecksum{ActionIdBsn: parent}
	return actionidbsnchecksum, nil
}

func NewActionIdBsnChecksum() *ActionIdBsnChecksum {
	return &ActionIdBsnChecksum{
		ActionIdBsn: NewActionIdBsn(4),
	}
}

type ActionIdBsnGentable struct {
	*ActionIdBsn
}

func (self *ActionIdBsnGentable) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdBsn.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdBsnGentable(parent *ActionIdBsn, decoder *goloxi.Decoder) (*ActionIdBsnGentable, error) {
	actionidbsngentable := &ActionIdBsnGentable{ActionIdBsn: parent}
	return actionidbsngentable, nil
}

func NewActionIdBsnGentable() *ActionIdBsnGentable {
	return &ActionIdBsnGentable{
		ActionIdBsn: NewActionIdBsn(5),
	}
}

type ActionIdBsnMirror struct {
	*ActionIdBsn
}

func (self *ActionIdBsnMirror) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdBsn.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdBsnMirror(parent *ActionIdBsn, decoder *goloxi.Decoder) (*ActionIdBsnMirror, error) {
	actionidbsnmirror := &ActionIdBsnMirror{ActionIdBsn: parent}
	return actionidbsnmirror, nil
}

func NewActionIdBsnMirror() *ActionIdBsnMirror {
	return &ActionIdBsnMirror{
		ActionIdBsn: NewActionIdBsn(1),
	}
}

type ActionIdBsnSetTunnelDst struct {
	*ActionIdBsn
}

func (self *ActionIdBsnSetTunnelDst) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdBsn.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdBsnSetTunnelDst(parent *ActionIdBsn, decoder *goloxi.Decoder) (*ActionIdBsnSetTunnelDst, error) {
	actionidbsnsettunneldst := &ActionIdBsnSetTunnelDst{ActionIdBsn: parent}
	return actionidbsnsettunneldst, nil
}

func NewActionIdBsnSetTunnelDst() *ActionIdBsnSetTunnelDst {
	return &ActionIdBsnSetTunnelDst{
		ActionIdBsn: NewActionIdBsn(2),
	}
}

type ActionIdCopyTtlIn struct {
	*ActionId
}

func (self *ActionIdCopyTtlIn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdCopyTtlIn(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdCopyTtlIn, error) {
	actionidcopyttlin := &ActionIdCopyTtlIn{ActionId: parent}
	return actionidcopyttlin, nil
}

func NewActionIdCopyTtlIn() *ActionIdCopyTtlIn {
	return &ActionIdCopyTtlIn{
		ActionId: NewActionId(12),
	}
}

type ActionIdCopyTtlOut struct {
	*ActionId
}

func (self *ActionIdCopyTtlOut) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdCopyTtlOut(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdCopyTtlOut, error) {
	actionidcopyttlout := &ActionIdCopyTtlOut{ActionId: parent}
	return actionidcopyttlout, nil
}

func NewActionIdCopyTtlOut() *ActionIdCopyTtlOut {
	return &ActionIdCopyTtlOut{
		ActionId: NewActionId(11),
	}
}

type ActionIdDecMplsTtl struct {
	*ActionId
}

func (self *ActionIdDecMplsTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdDecMplsTtl(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdDecMplsTtl, error) {
	actioniddecmplsttl := &ActionIdDecMplsTtl{ActionId: parent}
	return actioniddecmplsttl, nil
}

func NewActionIdDecMplsTtl() *ActionIdDecMplsTtl {
	return &ActionIdDecMplsTtl{
		ActionId: NewActionId(16),
	}
}

type ActionIdDecNwTtl struct {
	*ActionId
}

func (self *ActionIdDecNwTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdDecNwTtl(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdDecNwTtl, error) {
	actioniddecnwttl := &ActionIdDecNwTtl{ActionId: parent}
	return actioniddecnwttl, nil
}

func NewActionIdDecNwTtl() *ActionIdDecNwTtl {
	return &ActionIdDecNwTtl{
		ActionId: NewActionId(24),
	}
}

type ActionIdGroup struct {
	*ActionId
}

func (self *ActionIdGroup) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdGroup(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdGroup, error) {
	actionidgroup := &ActionIdGroup{ActionId: parent}
	return actionidgroup, nil
}

func NewActionIdGroup() *ActionIdGroup {
	return &ActionIdGroup{
		ActionId: NewActionId(22),
	}
}

type ActionIdMeter struct {
	*ActionId
}

func (self *ActionIdMeter) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdMeter(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdMeter, error) {
	actionidmeter := &ActionIdMeter{ActionId: parent}
	return actionidmeter, nil
}

func NewActionIdMeter() *ActionIdMeter {
	return &ActionIdMeter{
		ActionId: NewActionId(29),
	}
}

type ActionIdNicira struct {
	*ActionIdExperimenter
	Subtype uint16
}

type IActionIdNicira interface {
	IActionIdExperimenter
	GetSubtype() uint16
}

func (self *ActionIdNicira) GetSubtype() uint16 {
	return self.Subtype
}

func (self *ActionIdNicira) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdExperimenter.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Subtype))

	return nil
}

func decodeActionIdNicira(parent *ActionIdExperimenter, decoder *goloxi.Decoder) (IActionIdNicira, error) {
	actionidnicira := &ActionIdNicira{ActionIdExperimenter: parent}
	if decoder.Length() < 2 {
		return nil, fmt.Errorf("ActionIdNicira packet too short: %d < 2", decoder.Length())
	}
	actionidnicira.Subtype = uint16(decoder.ReadUint16())

	switch actionidnicira.Subtype {
	case 1:
		return decodeActionIdNxResubmit(actionidnicira, decoder)
	case 2:
		return decodeActionIdNxSetTunnel(actionidnicira, decoder)
	case 5:
		return decodeActionIdNxPopQueue(actionidnicira, decoder)
	case 6:
		return decodeActionIdNxRegMove(actionidnicira, decoder)
	case 7:
		return decodeActionIdNxRegLoad(actionidnicira, decoder)
	case 8:
		return decodeActionIdNxNote(actionidnicira, decoder)
	case 9:
		return decodeActionIdNxSetTunnel64(actionidnicira, decoder)
	case 10:
		return decodeActionIdNxMultipath(actionidnicira, decoder)
	case 12:
		return decodeActionIdNxBundle(actionidnicira, decoder)
	case 13:
		return decodeActionIdNxBundleLoad(actionidnicira, decoder)
	case 14:
		return decodeActionIdResubmit(actionidnicira, decoder)
	case 15:
		return decodeActionIdNxOutputReg(actionidnicira, decoder)
	case 16:
		return decodeActionIdNxLearn(actionidnicira, decoder)
	case 17:
		return decodeActionIdNxExit(actionidnicira, decoder)
	case 18:
		return decodeActionIdNiciraDecTtl(actionidnicira, decoder)
	case 19:
		return decodeActionIdNxFinTimeout(actionidnicira, decoder)
	case 20:
		return decodeActionIdNxController(actionidnicira, decoder)
	case 21:
		return decodeActionIdNxDecTtlCntIds(actionidnicira, decoder)
	case 22:
		return decodeActionIdNxWriteMetadata(actionidnicira, decoder)
	case 27:
		return decodeActionIdNxStackPush(actionidnicira, decoder)
	case 28:
		return decodeActionIdNxStackPop(actionidnicira, decoder)
	case 29:
		return decodeActionIdNxSample(actionidnicira, decoder)
	case 32:
		return decodeActionIdNxOutputReg2(actionidnicira, decoder)
	case 33:
		return decodeActionIdNxRegLoad2(actionidnicira, decoder)
	case 34:
		return decodeActionIdNxConjunction(actionidnicira, decoder)
	case 35:
		return decodeActionIdNxCt(actionidnicira, decoder)
	case 36:
		return decodeActionIdNxNat(actionidnicira, decoder)
	case 37:
		return decodeActionIdNxController2(actionidnicira, decoder)
	case 38:
		return decodeActionIdNxSample2(actionidnicira, decoder)
	case 39:
		return decodeActionIdNxOutputTrunc(actionidnicira, decoder)
	case 41:
		return decodeActionIdNxSample3(actionidnicira, decoder)
	case 42:
		return decodeActionIdNxClone(actionidnicira, decoder)
	case 43:
		return decodeActionIdNxCtClear(actionidnicira, decoder)
	case 44:
		return decodeActionIdNxResubmitTableCt(actionidnicira, decoder)
	case 45:
		return decodeActionIdNxLearn2(actionidnicira, decoder)
	case 46:
		return decodeActionIdNxEncap(actionidnicira, decoder)
	case 47:
		return decodeActionIdNxDecap(actionidnicira, decoder)
	case 255:
		return decodeActionIdNxDebugRecirc(actionidnicira, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionIdNicira'", actionidnicira.Subtype)
	}
}

func NewActionIdNicira(_subtype uint16) *ActionIdNicira {
	return &ActionIdNicira{
		Subtype:              _subtype,
		ActionIdExperimenter: NewActionIdExperimenter(8992),
	}
}

type ActionIdNiciraDecTtl struct {
	*ActionIdNicira
}

func (self *ActionIdNiciraDecTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNiciraDecTtl(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNiciraDecTtl, error) {
	actionidniciradecttl := &ActionIdNiciraDecTtl{ActionIdNicira: parent}
	return actionidniciradecttl, nil
}

func NewActionIdNiciraDecTtl() *ActionIdNiciraDecTtl {
	return &ActionIdNiciraDecTtl{
		ActionIdNicira: NewActionIdNicira(18),
	}
}

type ActionIdNxBundle struct {
	*ActionIdNicira
}

func (self *ActionIdNxBundle) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxBundle(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxBundle, error) {
	actionidnxbundle := &ActionIdNxBundle{ActionIdNicira: parent}
	return actionidnxbundle, nil
}

func NewActionIdNxBundle() *ActionIdNxBundle {
	return &ActionIdNxBundle{
		ActionIdNicira: NewActionIdNicira(12),
	}
}

type ActionIdNxBundleLoad struct {
	*ActionIdNicira
}

func (self *ActionIdNxBundleLoad) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxBundleLoad(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxBundleLoad, error) {
	actionidnxbundleload := &ActionIdNxBundleLoad{ActionIdNicira: parent}
	return actionidnxbundleload, nil
}

func NewActionIdNxBundleLoad() *ActionIdNxBundleLoad {
	return &ActionIdNxBundleLoad{
		ActionIdNicira: NewActionIdNicira(13),
	}
}

type ActionIdNxClone struct {
	*ActionIdNicira
}

func (self *ActionIdNxClone) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxClone(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxClone, error) {
	actionidnxclone := &ActionIdNxClone{ActionIdNicira: parent}
	return actionidnxclone, nil
}

func NewActionIdNxClone() *ActionIdNxClone {
	return &ActionIdNxClone{
		ActionIdNicira: NewActionIdNicira(42),
	}
}

type ActionIdNxConjunction struct {
	*ActionIdNicira
}

func (self *ActionIdNxConjunction) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxConjunction(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxConjunction, error) {
	actionidnxconjunction := &ActionIdNxConjunction{ActionIdNicira: parent}
	return actionidnxconjunction, nil
}

func NewActionIdNxConjunction() *ActionIdNxConjunction {
	return &ActionIdNxConjunction{
		ActionIdNicira: NewActionIdNicira(34),
	}
}

type ActionIdNxController struct {
	*ActionIdNicira
}

func (self *ActionIdNxController) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxController(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxController, error) {
	actionidnxcontroller := &ActionIdNxController{ActionIdNicira: parent}
	return actionidnxcontroller, nil
}

func NewActionIdNxController() *ActionIdNxController {
	return &ActionIdNxController{
		ActionIdNicira: NewActionIdNicira(20),
	}
}

type ActionIdNxController2 struct {
	*ActionIdNicira
}

func (self *ActionIdNxController2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxController2(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxController2, error) {
	actionidnxcontroller2 := &ActionIdNxController2{ActionIdNicira: parent}
	return actionidnxcontroller2, nil
}

func NewActionIdNxController2() *ActionIdNxController2 {
	return &ActionIdNxController2{
		ActionIdNicira: NewActionIdNicira(37),
	}
}

type ActionIdNxCt struct {
	*ActionIdNicira
}

func (self *ActionIdNxCt) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxCt(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxCt, error) {
	actionidnxct := &ActionIdNxCt{ActionIdNicira: parent}
	return actionidnxct, nil
}

func NewActionIdNxCt() *ActionIdNxCt {
	return &ActionIdNxCt{
		ActionIdNicira: NewActionIdNicira(35),
	}
}

type ActionIdNxCtClear struct {
	*ActionIdNicira
}

func (self *ActionIdNxCtClear) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxCtClear(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxCtClear, error) {
	actionidnxctclear := &ActionIdNxCtClear{ActionIdNicira: parent}
	return actionidnxctclear, nil
}

func NewActionIdNxCtClear() *ActionIdNxCtClear {
	return &ActionIdNxCtClear{
		ActionIdNicira: NewActionIdNicira(43),
	}
}

type ActionIdNxDebugRecirc struct {
	*ActionIdNicira
}

func (self *ActionIdNxDebugRecirc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxDebugRecirc(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxDebugRecirc, error) {
	actionidnxdebugrecirc := &ActionIdNxDebugRecirc{ActionIdNicira: parent}
	return actionidnxdebugrecirc, nil
}

func NewActionIdNxDebugRecirc() *ActionIdNxDebugRecirc {
	return &ActionIdNxDebugRecirc{
		ActionIdNicira: NewActionIdNicira(255),
	}
}

type ActionIdNxDecTtlCntIds struct {
	*ActionIdNicira
}

func (self *ActionIdNxDecTtlCntIds) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxDecTtlCntIds(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxDecTtlCntIds, error) {
	actionidnxdecttlcntids := &ActionIdNxDecTtlCntIds{ActionIdNicira: parent}
	return actionidnxdecttlcntids, nil
}

func NewActionIdNxDecTtlCntIds() *ActionIdNxDecTtlCntIds {
	return &ActionIdNxDecTtlCntIds{
		ActionIdNicira: NewActionIdNicira(21),
	}
}

type ActionIdNxDecap struct {
	*ActionIdNicira
}

func (self *ActionIdNxDecap) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxDecap(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxDecap, error) {
	actionidnxdecap := &ActionIdNxDecap{ActionIdNicira: parent}
	return actionidnxdecap, nil
}

func NewActionIdNxDecap() *ActionIdNxDecap {
	return &ActionIdNxDecap{
		ActionIdNicira: NewActionIdNicira(47),
	}
}

type ActionIdNxEncap struct {
	*ActionIdNicira
}

func (self *ActionIdNxEncap) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxEncap(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxEncap, error) {
	actionidnxencap := &ActionIdNxEncap{ActionIdNicira: parent}
	return actionidnxencap, nil
}

func NewActionIdNxEncap() *ActionIdNxEncap {
	return &ActionIdNxEncap{
		ActionIdNicira: NewActionIdNicira(46),
	}
}

type ActionIdNxExit struct {
	*ActionIdNicira
}

func (self *ActionIdNxExit) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxExit(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxExit, error) {
	actionidnxexit := &ActionIdNxExit{ActionIdNicira: parent}
	return actionidnxexit, nil
}

func NewActionIdNxExit() *ActionIdNxExit {
	return &ActionIdNxExit{
		ActionIdNicira: NewActionIdNicira(17),
	}
}

type ActionIdNxFinTimeout struct {
	*ActionIdNicira
}

func (self *ActionIdNxFinTimeout) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxFinTimeout(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxFinTimeout, error) {
	actionidnxfintimeout := &ActionIdNxFinTimeout{ActionIdNicira: parent}
	return actionidnxfintimeout, nil
}

func NewActionIdNxFinTimeout() *ActionIdNxFinTimeout {
	return &ActionIdNxFinTimeout{
		ActionIdNicira: NewActionIdNicira(19),
	}
}

type ActionIdNxLearn struct {
	*ActionIdNicira
}

func (self *ActionIdNxLearn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxLearn(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxLearn, error) {
	actionidnxlearn := &ActionIdNxLearn{ActionIdNicira: parent}
	return actionidnxlearn, nil
}

func NewActionIdNxLearn() *ActionIdNxLearn {
	return &ActionIdNxLearn{
		ActionIdNicira: NewActionIdNicira(16),
	}
}

type ActionIdNxLearn2 struct {
	*ActionIdNicira
}

func (self *ActionIdNxLearn2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxLearn2(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxLearn2, error) {
	actionidnxlearn2 := &ActionIdNxLearn2{ActionIdNicira: parent}
	return actionidnxlearn2, nil
}

func NewActionIdNxLearn2() *ActionIdNxLearn2 {
	return &ActionIdNxLearn2{
		ActionIdNicira: NewActionIdNicira(45),
	}
}

type ActionIdNxMultipath struct {
	*ActionIdNicira
}

func (self *ActionIdNxMultipath) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxMultipath(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxMultipath, error) {
	actionidnxmultipath := &ActionIdNxMultipath{ActionIdNicira: parent}
	return actionidnxmultipath, nil
}

func NewActionIdNxMultipath() *ActionIdNxMultipath {
	return &ActionIdNxMultipath{
		ActionIdNicira: NewActionIdNicira(10),
	}
}

type ActionIdNxNat struct {
	*ActionIdNicira
}

func (self *ActionIdNxNat) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxNat(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxNat, error) {
	actionidnxnat := &ActionIdNxNat{ActionIdNicira: parent}
	return actionidnxnat, nil
}

func NewActionIdNxNat() *ActionIdNxNat {
	return &ActionIdNxNat{
		ActionIdNicira: NewActionIdNicira(36),
	}
}

type ActionIdNxNote struct {
	*ActionIdNicira
}

func (self *ActionIdNxNote) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxNote(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxNote, error) {
	actionidnxnote := &ActionIdNxNote{ActionIdNicira: parent}
	return actionidnxnote, nil
}

func NewActionIdNxNote() *ActionIdNxNote {
	return &ActionIdNxNote{
		ActionIdNicira: NewActionIdNicira(8),
	}
}

type ActionIdNxOutputReg struct {
	*ActionIdNicira
}

func (self *ActionIdNxOutputReg) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxOutputReg(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxOutputReg, error) {
	actionidnxoutputreg := &ActionIdNxOutputReg{ActionIdNicira: parent}
	return actionidnxoutputreg, nil
}

func NewActionIdNxOutputReg() *ActionIdNxOutputReg {
	return &ActionIdNxOutputReg{
		ActionIdNicira: NewActionIdNicira(15),
	}
}

type ActionIdNxOutputReg2 struct {
	*ActionIdNicira
}

func (self *ActionIdNxOutputReg2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxOutputReg2(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxOutputReg2, error) {
	actionidnxoutputreg2 := &ActionIdNxOutputReg2{ActionIdNicira: parent}
	return actionidnxoutputreg2, nil
}

func NewActionIdNxOutputReg2() *ActionIdNxOutputReg2 {
	return &ActionIdNxOutputReg2{
		ActionIdNicira: NewActionIdNicira(32),
	}
}

type ActionIdNxOutputTrunc struct {
	*ActionIdNicira
}

func (self *ActionIdNxOutputTrunc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxOutputTrunc(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxOutputTrunc, error) {
	actionidnxoutputtrunc := &ActionIdNxOutputTrunc{ActionIdNicira: parent}
	return actionidnxoutputtrunc, nil
}

func NewActionIdNxOutputTrunc() *ActionIdNxOutputTrunc {
	return &ActionIdNxOutputTrunc{
		ActionIdNicira: NewActionIdNicira(39),
	}
}

type ActionIdNxPopQueue struct {
	*ActionIdNicira
}

func (self *ActionIdNxPopQueue) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxPopQueue(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxPopQueue, error) {
	actionidnxpopqueue := &ActionIdNxPopQueue{ActionIdNicira: parent}
	return actionidnxpopqueue, nil
}

func NewActionIdNxPopQueue() *ActionIdNxPopQueue {
	return &ActionIdNxPopQueue{
		ActionIdNicira: NewActionIdNicira(5),
	}
}

type ActionIdNxRegLoad struct {
	*ActionIdNicira
}

func (self *ActionIdNxRegLoad) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxRegLoad(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxRegLoad, error) {
	actionidnxregload := &ActionIdNxRegLoad{ActionIdNicira: parent}
	return actionidnxregload, nil
}

func NewActionIdNxRegLoad() *ActionIdNxRegLoad {
	return &ActionIdNxRegLoad{
		ActionIdNicira: NewActionIdNicira(7),
	}
}

type ActionIdNxRegLoad2 struct {
	*ActionIdNicira
}

func (self *ActionIdNxRegLoad2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxRegLoad2(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxRegLoad2, error) {
	actionidnxregload2 := &ActionIdNxRegLoad2{ActionIdNicira: parent}
	return actionidnxregload2, nil
}

func NewActionIdNxRegLoad2() *ActionIdNxRegLoad2 {
	return &ActionIdNxRegLoad2{
		ActionIdNicira: NewActionIdNicira(33),
	}
}

type ActionIdNxRegMove struct {
	*ActionIdNicira
}

func (self *ActionIdNxRegMove) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxRegMove(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxRegMove, error) {
	actionidnxregmove := &ActionIdNxRegMove{ActionIdNicira: parent}
	return actionidnxregmove, nil
}

func NewActionIdNxRegMove() *ActionIdNxRegMove {
	return &ActionIdNxRegMove{
		ActionIdNicira: NewActionIdNicira(6),
	}
}

type ActionIdNxResubmit struct {
	*ActionIdNicira
}

func (self *ActionIdNxResubmit) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxResubmit(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxResubmit, error) {
	actionidnxresubmit := &ActionIdNxResubmit{ActionIdNicira: parent}
	return actionidnxresubmit, nil
}

func NewActionIdNxResubmit() *ActionIdNxResubmit {
	return &ActionIdNxResubmit{
		ActionIdNicira: NewActionIdNicira(1),
	}
}

type ActionIdNxResubmitTable struct {
	*ActionIdNicira
}

func (self *ActionIdNxResubmitTable) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxResubmitTable(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxResubmitTable, error) {
	actionidnxresubmittable := &ActionIdNxResubmitTable{ActionIdNicira: parent}
	return actionidnxresubmittable, nil
}

func NewActionIdNxResubmitTable() *ActionIdNxResubmitTable {
	return &ActionIdNxResubmitTable{
		ActionIdNicira: NewActionIdNicira(14),
	}
}

type ActionIdNxResubmitTableCt struct {
	*ActionIdNicira
}

func (self *ActionIdNxResubmitTableCt) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxResubmitTableCt(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxResubmitTableCt, error) {
	actionidnxresubmittablect := &ActionIdNxResubmitTableCt{ActionIdNicira: parent}
	return actionidnxresubmittablect, nil
}

func NewActionIdNxResubmitTableCt() *ActionIdNxResubmitTableCt {
	return &ActionIdNxResubmitTableCt{
		ActionIdNicira: NewActionIdNicira(44),
	}
}

type ActionIdNxSample struct {
	*ActionIdNicira
}

func (self *ActionIdNxSample) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxSample(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxSample, error) {
	actionidnxsample := &ActionIdNxSample{ActionIdNicira: parent}
	return actionidnxsample, nil
}

func NewActionIdNxSample() *ActionIdNxSample {
	return &ActionIdNxSample{
		ActionIdNicira: NewActionIdNicira(29),
	}
}

type ActionIdNxSample2 struct {
	*ActionIdNicira
}

func (self *ActionIdNxSample2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxSample2(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxSample2, error) {
	actionidnxsample2 := &ActionIdNxSample2{ActionIdNicira: parent}
	return actionidnxsample2, nil
}

func NewActionIdNxSample2() *ActionIdNxSample2 {
	return &ActionIdNxSample2{
		ActionIdNicira: NewActionIdNicira(38),
	}
}

type ActionIdNxSample3 struct {
	*ActionIdNicira
}

func (self *ActionIdNxSample3) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxSample3(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxSample3, error) {
	actionidnxsample3 := &ActionIdNxSample3{ActionIdNicira: parent}
	return actionidnxsample3, nil
}

func NewActionIdNxSample3() *ActionIdNxSample3 {
	return &ActionIdNxSample3{
		ActionIdNicira: NewActionIdNicira(41),
	}
}

type ActionIdNxSetTunnel struct {
	*ActionIdNicira
}

func (self *ActionIdNxSetTunnel) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxSetTunnel(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxSetTunnel, error) {
	actionidnxsettunnel := &ActionIdNxSetTunnel{ActionIdNicira: parent}
	return actionidnxsettunnel, nil
}

func NewActionIdNxSetTunnel() *ActionIdNxSetTunnel {
	return &ActionIdNxSetTunnel{
		ActionIdNicira: NewActionIdNicira(2),
	}
}

type ActionIdNxSetTunnel64 struct {
	*ActionIdNicira
}

func (self *ActionIdNxSetTunnel64) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxSetTunnel64(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxSetTunnel64, error) {
	actionidnxsettunnel64 := &ActionIdNxSetTunnel64{ActionIdNicira: parent}
	return actionidnxsettunnel64, nil
}

func NewActionIdNxSetTunnel64() *ActionIdNxSetTunnel64 {
	return &ActionIdNxSetTunnel64{
		ActionIdNicira: NewActionIdNicira(9),
	}
}

type ActionIdNxStackPop struct {
	*ActionIdNicira
}

func (self *ActionIdNxStackPop) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxStackPop(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxStackPop, error) {
	actionidnxstackpop := &ActionIdNxStackPop{ActionIdNicira: parent}
	return actionidnxstackpop, nil
}

func NewActionIdNxStackPop() *ActionIdNxStackPop {
	return &ActionIdNxStackPop{
		ActionIdNicira: NewActionIdNicira(28),
	}
}

type ActionIdNxStackPush struct {
	*ActionIdNicira
}

func (self *ActionIdNxStackPush) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxStackPush(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxStackPush, error) {
	actionidnxstackpush := &ActionIdNxStackPush{ActionIdNicira: parent}
	return actionidnxstackpush, nil
}

func NewActionIdNxStackPush() *ActionIdNxStackPush {
	return &ActionIdNxStackPush{
		ActionIdNicira: NewActionIdNicira(27),
	}
}

type ActionIdNxWriteMetadata struct {
	*ActionIdNicira
}

func (self *ActionIdNxWriteMetadata) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdNxWriteMetadata(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdNxWriteMetadata, error) {
	actionidnxwritemetadata := &ActionIdNxWriteMetadata{ActionIdNicira: parent}
	return actionidnxwritemetadata, nil
}

func NewActionIdNxWriteMetadata() *ActionIdNxWriteMetadata {
	return &ActionIdNxWriteMetadata{
		ActionIdNicira: NewActionIdNicira(22),
	}
}

type ActionIdOutput struct {
	*ActionId
}

func (self *ActionIdOutput) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdOutput(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdOutput, error) {
	actionidoutput := &ActionIdOutput{ActionId: parent}
	return actionidoutput, nil
}

func NewActionIdOutput() *ActionIdOutput {
	return &ActionIdOutput{
		ActionId: NewActionId(0),
	}
}

type ActionIdPopMpls struct {
	*ActionId
}

func (self *ActionIdPopMpls) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdPopMpls(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdPopMpls, error) {
	actionidpopmpls := &ActionIdPopMpls{ActionId: parent}
	return actionidpopmpls, nil
}

func NewActionIdPopMpls() *ActionIdPopMpls {
	return &ActionIdPopMpls{
		ActionId: NewActionId(20),
	}
}

type ActionIdPopPbb struct {
	*ActionId
}

func (self *ActionIdPopPbb) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdPopPbb(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdPopPbb, error) {
	actionidpoppbb := &ActionIdPopPbb{ActionId: parent}
	return actionidpoppbb, nil
}

func NewActionIdPopPbb() *ActionIdPopPbb {
	return &ActionIdPopPbb{
		ActionId: NewActionId(27),
	}
}

type ActionIdPopVlan struct {
	*ActionId
}

func (self *ActionIdPopVlan) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdPopVlan(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdPopVlan, error) {
	actionidpopvlan := &ActionIdPopVlan{ActionId: parent}
	return actionidpopvlan, nil
}

func NewActionIdPopVlan() *ActionIdPopVlan {
	return &ActionIdPopVlan{
		ActionId: NewActionId(18),
	}
}

type ActionIdPushMpls struct {
	*ActionId
}

func (self *ActionIdPushMpls) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdPushMpls(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdPushMpls, error) {
	actionidpushmpls := &ActionIdPushMpls{ActionId: parent}
	return actionidpushmpls, nil
}

func NewActionIdPushMpls() *ActionIdPushMpls {
	return &ActionIdPushMpls{
		ActionId: NewActionId(19),
	}
}

type ActionIdPushPbb struct {
	*ActionId
}

func (self *ActionIdPushPbb) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdPushPbb(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdPushPbb, error) {
	actionidpushpbb := &ActionIdPushPbb{ActionId: parent}
	return actionidpushpbb, nil
}

func NewActionIdPushPbb() *ActionIdPushPbb {
	return &ActionIdPushPbb{
		ActionId: NewActionId(26),
	}
}

type ActionIdPushVlan struct {
	*ActionId
}

func (self *ActionIdPushVlan) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdPushVlan(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdPushVlan, error) {
	actionidpushvlan := &ActionIdPushVlan{ActionId: parent}
	return actionidpushvlan, nil
}

func NewActionIdPushVlan() *ActionIdPushVlan {
	return &ActionIdPushVlan{
		ActionId: NewActionId(17),
	}
}

type ActionIdResubmit struct {
	*ActionIdNicira
}

func (self *ActionIdResubmit) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionIdNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdResubmit(parent *ActionIdNicira, decoder *goloxi.Decoder) (*ActionIdResubmit, error) {
	actionidresubmit := &ActionIdResubmit{ActionIdNicira: parent}
	return actionidresubmit, nil
}

func NewActionIdResubmit() *ActionIdResubmit {
	return &ActionIdResubmit{
		ActionIdNicira: NewActionIdNicira(14),
	}
}

type ActionIdSetField struct {
	*ActionId
}

func (self *ActionIdSetField) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdSetField(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdSetField, error) {
	actionidsetfield := &ActionIdSetField{ActionId: parent}
	return actionidsetfield, nil
}

func NewActionIdSetField() *ActionIdSetField {
	return &ActionIdSetField{
		ActionId: NewActionId(25),
	}
}

type ActionIdSetMplsTtl struct {
	*ActionId
}

func (self *ActionIdSetMplsTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdSetMplsTtl(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdSetMplsTtl, error) {
	actionidsetmplsttl := &ActionIdSetMplsTtl{ActionId: parent}
	return actionidsetmplsttl, nil
}

func NewActionIdSetMplsTtl() *ActionIdSetMplsTtl {
	return &ActionIdSetMplsTtl{
		ActionId: NewActionId(15),
	}
}

type ActionIdSetNwTtl struct {
	*ActionId
}

func (self *ActionIdSetNwTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdSetNwTtl(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdSetNwTtl, error) {
	actionidsetnwttl := &ActionIdSetNwTtl{ActionId: parent}
	return actionidsetnwttl, nil
}

func NewActionIdSetNwTtl() *ActionIdSetNwTtl {
	return &ActionIdSetNwTtl{
		ActionId: NewActionId(23),
	}
}

type ActionIdSetQueue struct {
	*ActionId
}

func (self *ActionIdSetQueue) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionId.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionIdSetQueue(parent *ActionId, decoder *goloxi.Decoder) (*ActionIdSetQueue, error) {
	actionidsetqueue := &ActionIdSetQueue{ActionId: parent}
	return actionidsetqueue, nil
}

func NewActionIdSetQueue() *ActionIdSetQueue {
	return &ActionIdSetQueue{
		ActionId: NewActionId(21),
	}
}
