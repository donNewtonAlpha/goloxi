/*
 * Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
 * Copyright (c) 2011, 2012 Open Networking Foundation
 * Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler.
 * Copyright 2018, Red Hat, Inc.
 */
// Automatically generated by LOXI from template module.go
// Do not modify

package of11

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"net"

	"github.com/skydive-project/goloxi"
)

type Action struct {
	Type uint16
	Len  uint16
}

type IAction interface {
	goloxi.Serializable
	GetType() uint16
	GetLen() uint16
	GetName() string
	GetFields() map[string]interface{}
}

func (self *Action) GetType() uint16 {
	return self.Type
}

func (self *Action) GetLen() uint16 {
	return self.Len
}

func (self *Action) Serialize(encoder *goloxi.Encoder) error {
	encoder.PutUint16(uint16(self.Type))
	encoder.PutUint16(uint16(self.Len))

	return nil
}

func DecodeAction(decoder *goloxi.Decoder) (IAction, error) {
	_action := &Action{}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("Action packet too short: %d < 4", decoder.Length())
	}
	_action.Type = uint16(decoder.ReadUint16())
	_action.Len = uint16(decoder.ReadUint16())
	decoder = decoder.SliceDecoder(int(_action.Len), 2+2)

	switch _action.Type {
	case 0:
		return DecodeActionOutput(_action, decoder)
	case 1:
		return DecodeActionSetVlanVid(_action, decoder)
	case 2:
		return DecodeActionSetVlanPcp(_action, decoder)
	case 3:
		return DecodeActionSetDlSrc(_action, decoder)
	case 4:
		return DecodeActionSetDlDst(_action, decoder)
	case 5:
		return DecodeActionSetNwSrc(_action, decoder)
	case 6:
		return DecodeActionSetNwDst(_action, decoder)
	case 7:
		return DecodeActionSetNwTos(_action, decoder)
	case 8:
		return DecodeActionSetNwEcn(_action, decoder)
	case 9:
		return DecodeActionSetTpSrc(_action, decoder)
	case 10:
		return DecodeActionSetTpDst(_action, decoder)
	case 11:
		return DecodeActionCopyTtlOut(_action, decoder)
	case 12:
		return DecodeActionCopyTtlIn(_action, decoder)
	case 13:
		return DecodeActionSetMplsLabel(_action, decoder)
	case 14:
		return DecodeActionSetMplsTc(_action, decoder)
	case 15:
		return DecodeActionSetMplsTtl(_action, decoder)
	case 16:
		return DecodeActionDecMplsTtl(_action, decoder)
	case 17:
		return DecodeActionPushVlan(_action, decoder)
	case 18:
		return DecodeActionPopVlan(_action, decoder)
	case 19:
		return DecodeActionPushMpls(_action, decoder)
	case 20:
		return DecodeActionPopMpls(_action, decoder)
	case 21:
		return DecodeActionSetQueue(_action, decoder)
	case 22:
		return DecodeActionGroup(_action, decoder)
	case 23:
		return DecodeActionSetNwTtl(_action, decoder)
	case 24:
		return DecodeActionDecNwTtl(_action, decoder)
	case 65535:
		return DecodeActionExperimenter(_action, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'Action'", _action.Type)
	}
}

func NewAction(_type uint16) *Action {
	obj := &Action{}
	obj.Type = _type
	return obj
}

type ActionExperimenter struct {
	*Action
	Experimenter uint32
}

type IActionExperimenter interface {
	IAction
	GetExperimenter() uint32
}

func (self *ActionExperimenter) GetExperimenter() uint32 {
	return self.Experimenter
}

func (self *ActionExperimenter) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Experimenter))

	return nil
}

func DecodeActionExperimenter(parent *Action, decoder *goloxi.Decoder) (IActionExperimenter, error) {
	_actionexperimenter := &ActionExperimenter{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionExperimenter packet too short: %d < 4", decoder.Length())
	}
	_actionexperimenter.Experimenter = uint32(decoder.ReadUint32())

	switch _actionexperimenter.Experimenter {
	case 8992:
		return DecodeActionNicira(_actionexperimenter, decoder)
	case 6035143:
		return DecodeActionBsn(_actionexperimenter, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionExperimenter'", _actionexperimenter.Experimenter)
	}
}

func NewActionExperimenter(_experimenter uint32) *ActionExperimenter {
	obj := &ActionExperimenter{
		Action: NewAction(65535),
	}
	obj.Experimenter = _experimenter
	return obj
}
func (self *ActionExperimenter) GetName() string {
	return "experimenter"
}

func (self *ActionExperimenter) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Experimenter": self.Experimenter,
	}
}

type ActionBsn struct {
	*ActionExperimenter
	Subtype uint32
}

type IActionBsn interface {
	IActionExperimenter
	GetSubtype() uint32
}

func (self *ActionBsn) GetSubtype() uint32 {
	return self.Subtype
}

func (self *ActionBsn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionExperimenter.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Subtype))

	return nil
}

func DecodeActionBsn(parent *ActionExperimenter, decoder *goloxi.Decoder) (IActionBsn, error) {
	_actionbsn := &ActionBsn{ActionExperimenter: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionBsn packet too short: %d < 4", decoder.Length())
	}
	_actionbsn.Subtype = uint32(decoder.ReadUint32())

	switch _actionbsn.Subtype {
	case 1:
		return DecodeActionBsnMirror(_actionbsn, decoder)
	case 2:
		return DecodeActionBsnSetTunnelDst(_actionbsn, decoder)
	case 4:
		return DecodeActionBsnChecksum(_actionbsn, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionBsn'", _actionbsn.Subtype)
	}
}

func NewActionBsn(_subtype uint32) *ActionBsn {
	obj := &ActionBsn{
		ActionExperimenter: NewActionExperimenter(6035143),
	}
	obj.Subtype = _subtype
	return obj
}
func (self *ActionBsn) GetName() string {
	return "bsn"
}

func (self *ActionBsn) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Subtype": self.Subtype,
	}
}

type ActionBsnChecksum struct {
	*ActionBsn
	Checksum Checksum128
}

func (self *ActionBsnChecksum) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionBsn.Serialize(encoder); err != nil {
		return err
	}

	self.Checksum.Serialize(encoder)

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionBsnChecksum(parent *ActionBsn, decoder *goloxi.Decoder) (*ActionBsnChecksum, error) {
	_actionbsnchecksum := &ActionBsnChecksum{ActionBsn: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionBsnChecksum packet too short: %d < 16", decoder.Length())
	}
	_actionbsnchecksum.Checksum.Decode(decoder)
	return _actionbsnchecksum, nil
}

func NewActionBsnChecksum() *ActionBsnChecksum {
	obj := &ActionBsnChecksum{
		ActionBsn: NewActionBsn(4),
	}
	return obj
}
func (self *ActionBsnChecksum) GetName() string {
	return "bsn_checksum"
}

func (self *ActionBsnChecksum) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Checksum": self.Checksum,
	}
}

type ActionBsnMirror struct {
	*ActionBsn
	DestPort  uint32
	VlanTag   uint32
	CopyStage uint8
}

func (self *ActionBsnMirror) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionBsn.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.DestPort))
	encoder.PutUint32(uint32(self.VlanTag))
	encoder.PutUint8(uint8(self.CopyStage))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionBsnMirror(parent *ActionBsn, decoder *goloxi.Decoder) (*ActionBsnMirror, error) {
	_actionbsnmirror := &ActionBsnMirror{ActionBsn: parent}
	if decoder.Length() < 12 {
		return nil, fmt.Errorf("ActionBsnMirror packet too short: %d < 12", decoder.Length())
	}
	_actionbsnmirror.DestPort = uint32(decoder.ReadUint32())
	_actionbsnmirror.VlanTag = uint32(decoder.ReadUint32())
	_actionbsnmirror.CopyStage = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionbsnmirror, nil
}

func NewActionBsnMirror() *ActionBsnMirror {
	obj := &ActionBsnMirror{
		ActionBsn: NewActionBsn(1),
	}
	return obj
}
func (self *ActionBsnMirror) GetName() string {
	return "bsn_mirror"
}

func (self *ActionBsnMirror) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"DestPort":  self.DestPort,
		"VlanTag":   self.VlanTag,
		"CopyStage": self.CopyStage,
	}
}

type ActionBsnSetTunnelDst struct {
	*ActionBsn
	Dst uint32
}

func (self *ActionBsnSetTunnelDst) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionBsn.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Dst))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionBsnSetTunnelDst(parent *ActionBsn, decoder *goloxi.Decoder) (*ActionBsnSetTunnelDst, error) {
	_actionbsnsettunneldst := &ActionBsnSetTunnelDst{ActionBsn: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionBsnSetTunnelDst packet too short: %d < 4", decoder.Length())
	}
	_actionbsnsettunneldst.Dst = uint32(decoder.ReadUint32())
	return _actionbsnsettunneldst, nil
}

func NewActionBsnSetTunnelDst() *ActionBsnSetTunnelDst {
	obj := &ActionBsnSetTunnelDst{
		ActionBsn: NewActionBsn(2),
	}
	return obj
}
func (self *ActionBsnSetTunnelDst) GetName() string {
	return "bsn_set_tunnel_dst"
}

func (self *ActionBsnSetTunnelDst) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Dst": self.Dst,
	}
}

type ActionCopyTtlIn struct {
	*Action
}

func (self *ActionCopyTtlIn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionCopyTtlIn(parent *Action, decoder *goloxi.Decoder) (*ActionCopyTtlIn, error) {
	_actioncopyttlin := &ActionCopyTtlIn{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionCopyTtlIn packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return _actioncopyttlin, nil
}

func NewActionCopyTtlIn() *ActionCopyTtlIn {
	obj := &ActionCopyTtlIn{
		Action: NewAction(12),
	}
	return obj
}
func (self *ActionCopyTtlIn) GetName() string {
	return "copy_ttl_in"
}

func (self *ActionCopyTtlIn) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionCopyTtlOut struct {
	*Action
}

func (self *ActionCopyTtlOut) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionCopyTtlOut(parent *Action, decoder *goloxi.Decoder) (*ActionCopyTtlOut, error) {
	_actioncopyttlout := &ActionCopyTtlOut{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionCopyTtlOut packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return _actioncopyttlout, nil
}

func NewActionCopyTtlOut() *ActionCopyTtlOut {
	obj := &ActionCopyTtlOut{
		Action: NewAction(11),
	}
	return obj
}
func (self *ActionCopyTtlOut) GetName() string {
	return "copy_ttl_out"
}

func (self *ActionCopyTtlOut) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionDecMplsTtl struct {
	*Action
}

func (self *ActionDecMplsTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionDecMplsTtl(parent *Action, decoder *goloxi.Decoder) (*ActionDecMplsTtl, error) {
	_actiondecmplsttl := &ActionDecMplsTtl{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionDecMplsTtl packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return _actiondecmplsttl, nil
}

func NewActionDecMplsTtl() *ActionDecMplsTtl {
	obj := &ActionDecMplsTtl{
		Action: NewAction(16),
	}
	return obj
}
func (self *ActionDecMplsTtl) GetName() string {
	return "dec_mpls_ttl"
}

func (self *ActionDecMplsTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionDecNwTtl struct {
	*Action
}

func (self *ActionDecNwTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionDecNwTtl(parent *Action, decoder *goloxi.Decoder) (*ActionDecNwTtl, error) {
	_actiondecnwttl := &ActionDecNwTtl{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionDecNwTtl packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return _actiondecnwttl, nil
}

func NewActionDecNwTtl() *ActionDecNwTtl {
	obj := &ActionDecNwTtl{
		Action: NewAction(24),
	}
	return obj
}
func (self *ActionDecNwTtl) GetName() string {
	return "dec_nw_ttl"
}

func (self *ActionDecNwTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionGroup struct {
	*Action
	GroupId uint32
}

func (self *ActionGroup) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.GroupId))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionGroup(parent *Action, decoder *goloxi.Decoder) (*ActionGroup, error) {
	_actiongroup := &ActionGroup{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionGroup packet too short: %d < 4", decoder.Length())
	}
	_actiongroup.GroupId = uint32(decoder.ReadUint32())
	return _actiongroup, nil
}

func NewActionGroup() *ActionGroup {
	obj := &ActionGroup{
		Action: NewAction(22),
	}
	return obj
}
func (self *ActionGroup) GetName() string {
	return "group"
}

func (self *ActionGroup) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"GroupId": self.GroupId,
	}
}

type ActionNicira struct {
	*ActionExperimenter
	Subtype uint16
}

type IActionNicira interface {
	IActionExperimenter
	GetSubtype() uint16
}

func (self *ActionNicira) GetSubtype() uint16 {
	return self.Subtype
}

func (self *ActionNicira) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionExperimenter.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Subtype))

	return nil
}

func DecodeActionNicira(parent *ActionExperimenter, decoder *goloxi.Decoder) (IActionNicira, error) {
	_actionnicira := &ActionNicira{ActionExperimenter: parent}
	if decoder.Length() < 2 {
		return nil, fmt.Errorf("ActionNicira packet too short: %d < 2", decoder.Length())
	}
	_actionnicira.Subtype = uint16(decoder.ReadUint16())

	switch _actionnicira.Subtype {
	case 1:
		return DecodeActionNxResubmit(_actionnicira, decoder)
	case 2:
		return DecodeActionNxSetTunnel(_actionnicira, decoder)
	case 5:
		return DecodeActionNxPopQueue(_actionnicira, decoder)
	case 6:
		return DecodeActionNxRegMove(_actionnicira, decoder)
	case 7:
		return DecodeActionNxRegLoad(_actionnicira, decoder)
	case 8:
		return DecodeActionNxNote(_actionnicira, decoder)
	case 9:
		return DecodeActionNxSetTunnel64(_actionnicira, decoder)
	case 10:
		return DecodeActionNxMultipath(_actionnicira, decoder)
	case 12:
		return DecodeActionNxBundle(_actionnicira, decoder)
	case 13:
		return DecodeActionNxBundleLoad(_actionnicira, decoder)
	case 14:
		return DecodeActionResubmit(_actionnicira, decoder)
	case 15:
		return DecodeActionNxOutputReg(_actionnicira, decoder)
	case 16:
		return DecodeActionNxLearn(_actionnicira, decoder)
	case 17:
		return DecodeActionNxExit(_actionnicira, decoder)
	case 18:
		return DecodeActionNiciraDecTtl(_actionnicira, decoder)
	case 19:
		return DecodeActionNxFinTimeout(_actionnicira, decoder)
	case 20:
		return DecodeActionNxController(_actionnicira, decoder)
	case 21:
		return DecodeActionNxDecTtlCntIds(_actionnicira, decoder)
	case 22:
		return DecodeActionNxWriteMetadata(_actionnicira, decoder)
	case 27:
		return DecodeActionNxStackPush(_actionnicira, decoder)
	case 28:
		return DecodeActionNxStackPop(_actionnicira, decoder)
	case 29:
		return DecodeActionNxSample(_actionnicira, decoder)
	case 32:
		return DecodeActionNxOutputReg2(_actionnicira, decoder)
	case 33:
		return DecodeActionNxRegLoad2(_actionnicira, decoder)
	case 34:
		return DecodeActionNxConjunction(_actionnicira, decoder)
	case 35:
		return DecodeActionNxCt(_actionnicira, decoder)
	case 36:
		return DecodeActionNxNat(_actionnicira, decoder)
	case 37:
		return DecodeActionNxController2(_actionnicira, decoder)
	case 38:
		return DecodeActionNxSample2(_actionnicira, decoder)
	case 39:
		return DecodeActionNxOutputTrunc(_actionnicira, decoder)
	case 41:
		return DecodeActionNxSample3(_actionnicira, decoder)
	case 42:
		return DecodeActionNxClone(_actionnicira, decoder)
	case 43:
		return DecodeActionNxCtClear(_actionnicira, decoder)
	case 44:
		return DecodeActionNxResubmitTableCt(_actionnicira, decoder)
	case 45:
		return DecodeActionNxLearn2(_actionnicira, decoder)
	case 46:
		return DecodeActionNxEncap(_actionnicira, decoder)
	case 47:
		return DecodeActionNxDecap(_actionnicira, decoder)
	case 255:
		return DecodeActionNxDebugRecirc(_actionnicira, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionNicira'", _actionnicira.Subtype)
	}
}

func NewActionNicira(_subtype uint16) *ActionNicira {
	obj := &ActionNicira{
		ActionExperimenter: NewActionExperimenter(8992),
	}
	obj.Subtype = _subtype
	return obj
}
func (self *ActionNicira) GetName() string {
	return "nicira"
}

func (self *ActionNicira) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Subtype": self.Subtype,
	}
}

type ActionNiciraDecTtl struct {
	*ActionNicira
}

func (self *ActionNiciraDecTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNiciraDecTtl(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNiciraDecTtl, error) {
	_actionniciradecttl := &ActionNiciraDecTtl{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNiciraDecTtl packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(2)
	decoder.Skip(4)
	return _actionniciradecttl, nil
}

func NewActionNiciraDecTtl() *ActionNiciraDecTtl {
	obj := &ActionNiciraDecTtl{
		ActionNicira: NewActionNicira(18),
	}
	return obj
}
func (self *ActionNiciraDecTtl) GetName() string {
	return "nicira_dec_ttl"
}

func (self *ActionNiciraDecTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxBundle struct {
	*ActionNicira
	Algorithm uint16
	Fields    uint16
	Basis     uint16
	SlaveType uint32
	NSlaves   uint16
	OfsNbits  uint16
	Dst       uint32
}

func (self *ActionNxBundle) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Algorithm))
	encoder.PutUint16(uint16(self.Fields))
	encoder.PutUint16(uint16(self.Basis))
	encoder.PutUint32(uint32(self.SlaveType))
	encoder.PutUint16(uint16(self.NSlaves))
	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Dst))
	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxBundle(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxBundle, error) {
	_actionnxbundle := &ActionNxBundle{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxBundle packet too short: %d < 22", decoder.Length())
	}
	_actionnxbundle.Algorithm = uint16(decoder.ReadUint16())
	_actionnxbundle.Fields = uint16(decoder.ReadUint16())
	_actionnxbundle.Basis = uint16(decoder.ReadUint16())
	_actionnxbundle.SlaveType = uint32(decoder.ReadUint32())
	_actionnxbundle.NSlaves = uint16(decoder.ReadUint16())
	_actionnxbundle.OfsNbits = uint16(decoder.ReadUint16())
	_actionnxbundle.Dst = uint32(decoder.ReadUint32())
	decoder.Skip(4)
	return _actionnxbundle, nil
}

func NewActionNxBundle() *ActionNxBundle {
	obj := &ActionNxBundle{
		ActionNicira: NewActionNicira(12),
	}
	return obj
}
func (self *ActionNxBundle) GetName() string {
	return "nx_bundle"
}

func (self *ActionNxBundle) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Algorithm": self.Algorithm,
		"Fields":    self.Fields,
		"Basis":     self.Basis,
		"SlaveType": self.SlaveType,
		"NSlaves":   self.NSlaves,
		"OfsNbits":  self.OfsNbits,
		"Dst":       self.Dst,
	}
}

type ActionNxBundleLoad struct {
	*ActionNicira
	Algorithm uint16
	Fields    uint16
	Basis     uint16
	SlaveType uint32
	NSlaves   uint16
	OfsNbits  uint16
	Dst       uint32
}

func (self *ActionNxBundleLoad) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Algorithm))
	encoder.PutUint16(uint16(self.Fields))
	encoder.PutUint16(uint16(self.Basis))
	encoder.PutUint32(uint32(self.SlaveType))
	encoder.PutUint16(uint16(self.NSlaves))
	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Dst))
	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxBundleLoad(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxBundleLoad, error) {
	_actionnxbundleload := &ActionNxBundleLoad{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxBundleLoad packet too short: %d < 22", decoder.Length())
	}
	_actionnxbundleload.Algorithm = uint16(decoder.ReadUint16())
	_actionnxbundleload.Fields = uint16(decoder.ReadUint16())
	_actionnxbundleload.Basis = uint16(decoder.ReadUint16())
	_actionnxbundleload.SlaveType = uint32(decoder.ReadUint32())
	_actionnxbundleload.NSlaves = uint16(decoder.ReadUint16())
	_actionnxbundleload.OfsNbits = uint16(decoder.ReadUint16())
	_actionnxbundleload.Dst = uint32(decoder.ReadUint32())
	decoder.Skip(4)
	return _actionnxbundleload, nil
}

func NewActionNxBundleLoad() *ActionNxBundleLoad {
	obj := &ActionNxBundleLoad{
		ActionNicira: NewActionNicira(13),
	}
	return obj
}
func (self *ActionNxBundleLoad) GetName() string {
	return "nx_bundle_load"
}

func (self *ActionNxBundleLoad) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Algorithm": self.Algorithm,
		"Fields":    self.Fields,
		"Basis":     self.Basis,
		"SlaveType": self.SlaveType,
		"NSlaves":   self.NSlaves,
		"OfsNbits":  self.OfsNbits,
		"Dst":       self.Dst,
	}
}

type ActionNxClone struct {
	*ActionNicira
}

func (self *ActionNxClone) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxClone(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxClone, error) {
	_actionnxclone := &ActionNxClone{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNxClone packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(6)
	return _actionnxclone, nil
}

func NewActionNxClone() *ActionNxClone {
	obj := &ActionNxClone{
		ActionNicira: NewActionNicira(42),
	}
	return obj
}
func (self *ActionNxClone) GetName() string {
	return "nx_clone"
}

func (self *ActionNxClone) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxConjunction struct {
	*ActionNicira
	Clause   uint8
	NClauses uint8
	Id       uint32
}

func (self *ActionNxConjunction) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.Clause))
	encoder.PutUint8(uint8(self.NClauses))
	encoder.PutUint32(uint32(self.Id))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxConjunction(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxConjunction, error) {
	_actionnxconjunction := &ActionNxConjunction{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxConjunction packet too short: %d < 6", decoder.Length())
	}
	_actionnxconjunction.Clause = uint8(decoder.ReadByte())
	_actionnxconjunction.NClauses = uint8(decoder.ReadByte())
	_actionnxconjunction.Id = uint32(decoder.ReadUint32())
	return _actionnxconjunction, nil
}

func NewActionNxConjunction() *ActionNxConjunction {
	obj := &ActionNxConjunction{
		ActionNicira: NewActionNicira(34),
	}
	return obj
}
func (self *ActionNxConjunction) GetName() string {
	return "nx_conjunction"
}

func (self *ActionNxConjunction) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Clause":   self.Clause,
		"NClauses": self.NClauses,
		"Id":       self.Id,
	}
}

type ActionNxController struct {
	*ActionNicira
	MaxLen       uint16
	ControllerId uint16
	Reason       uint8
}

func (self *ActionNxController) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.MaxLen))
	encoder.PutUint16(uint16(self.ControllerId))
	encoder.PutUint8(uint8(self.Reason))
	encoder.Write(bytes.Repeat([]byte{0}, 1))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxController(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxController, error) {
	_actionnxcontroller := &ActionNxController{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxController packet too short: %d < 6", decoder.Length())
	}
	_actionnxcontroller.MaxLen = uint16(decoder.ReadUint16())
	_actionnxcontroller.ControllerId = uint16(decoder.ReadUint16())
	_actionnxcontroller.Reason = uint8(decoder.ReadByte())
	decoder.Skip(1)
	return _actionnxcontroller, nil
}

func NewActionNxController() *ActionNxController {
	obj := &ActionNxController{
		ActionNicira: NewActionNicira(20),
	}
	return obj
}
func (self *ActionNxController) GetName() string {
	return "nx_controller"
}

func (self *ActionNxController) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"MaxLen":       self.MaxLen,
		"ControllerId": self.ControllerId,
		"Reason":       self.Reason,
	}
}

type ActionNxController2 struct {
	*ActionNicira
}

func (self *ActionNxController2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxController2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxController2, error) {
	_actionnxcontroller2 := &ActionNxController2{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNxController2 packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(6)
	return _actionnxcontroller2, nil
}

func NewActionNxController2() *ActionNxController2 {
	obj := &ActionNxController2{
		ActionNicira: NewActionNicira(37),
	}
	return obj
}
func (self *ActionNxController2) GetName() string {
	return "nx_controller2"
}

func (self *ActionNxController2) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxCt struct {
	*ActionNicira
	Flags       uint16
	ZoneSrc     uint32
	Value       uint16
	RecircTable uint8
	Alg         uint16
}

func (self *ActionNxCt) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Flags))
	encoder.PutUint32(uint32(self.ZoneSrc))
	encoder.PutUint16(uint16(self.Value))
	encoder.PutUint8(uint8(self.RecircTable))
	encoder.Write(bytes.Repeat([]byte{0}, 3))
	encoder.PutUint16(uint16(self.Alg))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxCt(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxCt, error) {
	_actionnxct := &ActionNxCt{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxCt packet too short: %d < 14", decoder.Length())
	}
	_actionnxct.Flags = uint16(decoder.ReadUint16())
	_actionnxct.ZoneSrc = uint32(decoder.ReadUint32())
	_actionnxct.Value = uint16(decoder.ReadUint16())
	_actionnxct.RecircTable = uint8(decoder.ReadByte())
	decoder.Skip(3)
	_actionnxct.Alg = uint16(decoder.ReadUint16())
	return _actionnxct, nil
}

func NewActionNxCt() *ActionNxCt {
	obj := &ActionNxCt{
		ActionNicira: NewActionNicira(35),
	}
	return obj
}
func (self *ActionNxCt) GetName() string {
	return "nx_ct"
}

func (self *ActionNxCt) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Flags":       self.Flags,
		"ZoneSrc":     self.ZoneSrc,
		"Value":       self.Value,
		"RecircTable": self.RecircTable,
		"Alg":         self.Alg,
	}
}

type ActionNxCtClear struct {
	*ActionNicira
}

func (self *ActionNxCtClear) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxCtClear(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxCtClear, error) {
	_actionnxctclear := &ActionNxCtClear{ActionNicira: parent}
	return _actionnxctclear, nil
}

func NewActionNxCtClear() *ActionNxCtClear {
	obj := &ActionNxCtClear{
		ActionNicira: NewActionNicira(43),
	}
	return obj
}
func (self *ActionNxCtClear) GetName() string {
	return "nx_ct_clear"
}

func (self *ActionNxCtClear) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxDebugRecirc struct {
	*ActionNicira
}

func (self *ActionNxDebugRecirc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxDebugRecirc(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxDebugRecirc, error) {
	_actionnxdebugrecirc := &ActionNxDebugRecirc{ActionNicira: parent}
	return _actionnxdebugrecirc, nil
}

func NewActionNxDebugRecirc() *ActionNxDebugRecirc {
	obj := &ActionNxDebugRecirc{
		ActionNicira: NewActionNicira(255),
	}
	return obj
}
func (self *ActionNxDebugRecirc) GetName() string {
	return "nx_debug_recirc"
}

func (self *ActionNxDebugRecirc) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxDecTtlCntIds struct {
	*ActionNicira
	NControllers uint16
}

func (self *ActionNxDecTtlCntIds) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.NControllers))
	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxDecTtlCntIds(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxDecTtlCntIds, error) {
	_actionnxdecttlcntids := &ActionNxDecTtlCntIds{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxDecTtlCntIds packet too short: %d < 6", decoder.Length())
	}
	_actionnxdecttlcntids.NControllers = uint16(decoder.ReadUint16())
	decoder.Skip(4)
	return _actionnxdecttlcntids, nil
}

func NewActionNxDecTtlCntIds() *ActionNxDecTtlCntIds {
	obj := &ActionNxDecTtlCntIds{
		ActionNicira: NewActionNicira(21),
	}
	return obj
}
func (self *ActionNxDecTtlCntIds) GetName() string {
	return "nx_dec_ttl_cnt_ids"
}

func (self *ActionNxDecTtlCntIds) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NControllers": self.NControllers,
	}
}

type ActionNxDecap struct {
	*ActionNicira
	NewPktType uint32
}

func (self *ActionNxDecap) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.PutUint32(uint32(self.NewPktType))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxDecap(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxDecap, error) {
	_actionnxdecap := &ActionNxDecap{ActionNicira: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionNxDecap packet too short: %d < 4", decoder.Length())
	}
	decoder.Skip(2)
	_actionnxdecap.NewPktType = uint32(decoder.ReadUint32())
	return _actionnxdecap, nil
}

func NewActionNxDecap() *ActionNxDecap {
	obj := &ActionNxDecap{
		ActionNicira: NewActionNicira(47),
	}
	return obj
}
func (self *ActionNxDecap) GetName() string {
	return "nx_decap"
}

func (self *ActionNxDecap) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NewPktType": self.NewPktType,
	}
}

type ActionNxEncap struct {
	*ActionNicira
	HdrSize    uint16
	NewPktType uint32
	Props      []IEdPropHeader
}

func (self *ActionNxEncap) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.HdrSize))
	encoder.PutUint32(uint32(self.NewPktType))
	for _, obj := range self.Props {
		if err := obj.Serialize(encoder); err != nil {
			return err
		}
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxEncap(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxEncap, error) {
	_actionnxencap := &ActionNxEncap{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxEncap packet too short: %d < 6", decoder.Length())
	}
	_actionnxencap.HdrSize = uint16(decoder.ReadUint16())
	_actionnxencap.NewPktType = uint32(decoder.ReadUint32())

	for decoder.Length() >= 4 {
		item := &EdPropHeader{}
		if err := item.Decode(decoder); err != nil {
			return nil, err
		}
		_actionnxencap.Props = append(_actionnxencap.Props, item)
	}
	return _actionnxencap, nil
}

func NewActionNxEncap() *ActionNxEncap {
	obj := &ActionNxEncap{
		ActionNicira: NewActionNicira(46),
	}
	return obj
}
func (self *ActionNxEncap) GetName() string {
	return "nx_encap"
}

func (self *ActionNxEncap) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"HdrSize":    self.HdrSize,
		"NewPktType": self.NewPktType,
		"Props":      self.Props,
	}
}

type ActionNxExit struct {
	*ActionNicira
}

func (self *ActionNxExit) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxExit(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxExit, error) {
	_actionnxexit := &ActionNxExit{ActionNicira: parent}
	return _actionnxexit, nil
}

func NewActionNxExit() *ActionNxExit {
	obj := &ActionNxExit{
		ActionNicira: NewActionNicira(17),
	}
	return obj
}
func (self *ActionNxExit) GetName() string {
	return "nx_exit"
}

func (self *ActionNxExit) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxFinTimeout struct {
	*ActionNicira
	FinIdleTimeout uint16
	FinHardTimeout uint16
}

func (self *ActionNxFinTimeout) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.FinIdleTimeout))
	encoder.PutUint16(uint16(self.FinHardTimeout))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxFinTimeout(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxFinTimeout, error) {
	_actionnxfintimeout := &ActionNxFinTimeout{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxFinTimeout packet too short: %d < 6", decoder.Length())
	}
	_actionnxfintimeout.FinIdleTimeout = uint16(decoder.ReadUint16())
	_actionnxfintimeout.FinHardTimeout = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return _actionnxfintimeout, nil
}

func NewActionNxFinTimeout() *ActionNxFinTimeout {
	obj := &ActionNxFinTimeout{
		ActionNicira: NewActionNicira(19),
	}
	return obj
}
func (self *ActionNxFinTimeout) GetName() string {
	return "nx_fin_timeout"
}

func (self *ActionNxFinTimeout) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"FinIdleTimeout": self.FinIdleTimeout,
		"FinHardTimeout": self.FinHardTimeout,
	}
}

type ActionNxLearn struct {
	*ActionNicira
	IdleTimeout    uint16
	HardTimeout    uint16
	Priority       uint16
	Cookie         uint64
	Flags          uint16
	TableId        uint8
	FinIdleTimeout uint16
	FinHardTimeout uint16
}

func (self *ActionNxLearn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.IdleTimeout))
	encoder.PutUint16(uint16(self.HardTimeout))
	encoder.PutUint16(uint16(self.Priority))
	encoder.PutUint64(uint64(self.Cookie))
	encoder.PutUint16(uint16(self.Flags))
	encoder.PutUint8(uint8(self.TableId))
	encoder.Write(bytes.Repeat([]byte{0}, 1))
	encoder.PutUint16(uint16(self.FinIdleTimeout))
	encoder.PutUint16(uint16(self.FinHardTimeout))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxLearn(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxLearn, error) {
	_actionnxlearn := &ActionNxLearn{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxLearn packet too short: %d < 22", decoder.Length())
	}
	_actionnxlearn.IdleTimeout = uint16(decoder.ReadUint16())
	_actionnxlearn.HardTimeout = uint16(decoder.ReadUint16())
	_actionnxlearn.Priority = uint16(decoder.ReadUint16())
	_actionnxlearn.Cookie = uint64(decoder.ReadUint64())
	_actionnxlearn.Flags = uint16(decoder.ReadUint16())
	_actionnxlearn.TableId = uint8(decoder.ReadByte())
	decoder.Skip(1)
	_actionnxlearn.FinIdleTimeout = uint16(decoder.ReadUint16())
	_actionnxlearn.FinHardTimeout = uint16(decoder.ReadUint16())
	return _actionnxlearn, nil
}

func NewActionNxLearn() *ActionNxLearn {
	obj := &ActionNxLearn{
		ActionNicira: NewActionNicira(16),
	}
	return obj
}
func (self *ActionNxLearn) GetName() string {
	return "nx_learn"
}

func (self *ActionNxLearn) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"IdleTimeout":    self.IdleTimeout,
		"HardTimeout":    self.HardTimeout,
		"Priority":       self.Priority,
		"Cookie":         self.Cookie,
		"Flags":          self.Flags,
		"TableId":        self.TableId,
		"FinIdleTimeout": self.FinIdleTimeout,
		"FinHardTimeout": self.FinHardTimeout,
	}
}

type ActionNxLearn2 struct {
	*ActionNicira
}

func (self *ActionNxLearn2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxLearn2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxLearn2, error) {
	_actionnxlearn2 := &ActionNxLearn2{ActionNicira: parent}
	return _actionnxlearn2, nil
}

func NewActionNxLearn2() *ActionNxLearn2 {
	obj := &ActionNxLearn2{
		ActionNicira: NewActionNicira(45),
	}
	return obj
}
func (self *ActionNxLearn2) GetName() string {
	return "nx_learn2"
}

func (self *ActionNxLearn2) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxMultipath struct {
	*ActionNicira
	Fields    uint16
	Basis     uint16
	Algorithm uint16
	MaxLink   uint16
	Arg       uint32
	OfsNbits  uint16
	Dst       uint32
}

func (self *ActionNxMultipath) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Fields))
	encoder.PutUint16(uint16(self.Basis))
	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.PutUint16(uint16(self.Algorithm))
	encoder.PutUint16(uint16(self.MaxLink))
	encoder.PutUint32(uint32(self.Arg))
	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Dst))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxMultipath(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxMultipath, error) {
	_actionnxmultipath := &ActionNxMultipath{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxMultipath packet too short: %d < 22", decoder.Length())
	}
	_actionnxmultipath.Fields = uint16(decoder.ReadUint16())
	_actionnxmultipath.Basis = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	_actionnxmultipath.Algorithm = uint16(decoder.ReadUint16())
	_actionnxmultipath.MaxLink = uint16(decoder.ReadUint16())
	_actionnxmultipath.Arg = uint32(decoder.ReadUint32())
	decoder.Skip(2)
	_actionnxmultipath.OfsNbits = uint16(decoder.ReadUint16())
	_actionnxmultipath.Dst = uint32(decoder.ReadUint32())
	return _actionnxmultipath, nil
}

func NewActionNxMultipath() *ActionNxMultipath {
	obj := &ActionNxMultipath{
		ActionNicira: NewActionNicira(10),
	}
	return obj
}
func (self *ActionNxMultipath) GetName() string {
	return "nx_multipath"
}

func (self *ActionNxMultipath) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Fields":    self.Fields,
		"Basis":     self.Basis,
		"Algorithm": self.Algorithm,
		"MaxLink":   self.MaxLink,
		"Arg":       self.Arg,
		"OfsNbits":  self.OfsNbits,
		"Dst":       self.Dst,
	}
}

type ActionNxNat struct {
	*ActionNicira
	Flags        uint16
	RangePresent uint16
}

func (self *ActionNxNat) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.PutUint16(uint16(self.Flags))
	encoder.PutUint16(uint16(self.RangePresent))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxNat(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxNat, error) {
	_actionnxnat := &ActionNxNat{ActionNicira: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionNxNat packet too short: %d < 4", decoder.Length())
	}
	decoder.Skip(2)
	_actionnxnat.Flags = uint16(decoder.ReadUint16())
	_actionnxnat.RangePresent = uint16(decoder.ReadUint16())
	return _actionnxnat, nil
}

func NewActionNxNat() *ActionNxNat {
	obj := &ActionNxNat{
		ActionNicira: NewActionNicira(36),
	}
	return obj
}
func (self *ActionNxNat) GetName() string {
	return "nx_nat"
}

func (self *ActionNxNat) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Flags":        self.Flags,
		"RangePresent": self.RangePresent,
	}
}

type ActionNxNote struct {
	*ActionNicira
	Note []byte
}

func (self *ActionNxNote) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(self.Note)

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxNote(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxNote, error) {
	_actionnxnote := &ActionNxNote{ActionNicira: parent}
	_actionnxnote.Note = decoder.Read(decoder.Length())
	return _actionnxnote, nil
}

func NewActionNxNote() *ActionNxNote {
	obj := &ActionNxNote{
		ActionNicira: NewActionNicira(8),
	}
	return obj
}
func (self *ActionNxNote) GetName() string {
	return "nx_note"
}

func (self *ActionNxNote) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Note": self.Note,
	}
}

type ActionNxOutputReg struct {
	*ActionNicira
	OfsNbits uint16
	Src      uint32
	MaxLen   uint16
}

func (self *ActionNxOutputReg) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Src))
	encoder.PutUint16(uint16(self.MaxLen))
	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxOutputReg(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxOutputReg, error) {
	_actionnxoutputreg := &ActionNxOutputReg{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxOutputReg packet too short: %d < 14", decoder.Length())
	}
	_actionnxoutputreg.OfsNbits = uint16(decoder.ReadUint16())
	_actionnxoutputreg.Src = uint32(decoder.ReadUint32())
	_actionnxoutputreg.MaxLen = uint16(decoder.ReadUint16())
	decoder.Skip(6)
	return _actionnxoutputreg, nil
}

func NewActionNxOutputReg() *ActionNxOutputReg {
	obj := &ActionNxOutputReg{
		ActionNicira: NewActionNicira(15),
	}
	return obj
}
func (self *ActionNxOutputReg) GetName() string {
	return "nx_output_reg"
}

func (self *ActionNxOutputReg) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"OfsNbits": self.OfsNbits,
		"Src":      self.Src,
		"MaxLen":   self.MaxLen,
	}
}

type ActionNxOutputReg2 struct {
	*ActionNicira
	OfsNbits uint16
	MaxLen   uint16
}

func (self *ActionNxOutputReg2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint16(uint16(self.MaxLen))
	encoder.Write(bytes.Repeat([]byte{0}, 10))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxOutputReg2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxOutputReg2, error) {
	_actionnxoutputreg2 := &ActionNxOutputReg2{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxOutputReg2 packet too short: %d < 14", decoder.Length())
	}
	_actionnxoutputreg2.OfsNbits = uint16(decoder.ReadUint16())
	_actionnxoutputreg2.MaxLen = uint16(decoder.ReadUint16())
	decoder.Skip(10)
	return _actionnxoutputreg2, nil
}

func NewActionNxOutputReg2() *ActionNxOutputReg2 {
	obj := &ActionNxOutputReg2{
		ActionNicira: NewActionNicira(32),
	}
	return obj
}
func (self *ActionNxOutputReg2) GetName() string {
	return "nx_output_reg2"
}

func (self *ActionNxOutputReg2) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"OfsNbits": self.OfsNbits,
		"MaxLen":   self.MaxLen,
	}
}

type ActionNxOutputTrunc struct {
	*ActionNicira
	Port   uint16
	MaxLen uint32
}

func (self *ActionNxOutputTrunc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Port))
	encoder.PutUint32(uint32(self.MaxLen))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxOutputTrunc(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxOutputTrunc, error) {
	_actionnxoutputtrunc := &ActionNxOutputTrunc{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxOutputTrunc packet too short: %d < 6", decoder.Length())
	}
	_actionnxoutputtrunc.Port = uint16(decoder.ReadUint16())
	_actionnxoutputtrunc.MaxLen = uint32(decoder.ReadUint32())
	return _actionnxoutputtrunc, nil
}

func NewActionNxOutputTrunc() *ActionNxOutputTrunc {
	obj := &ActionNxOutputTrunc{
		ActionNicira: NewActionNicira(39),
	}
	return obj
}
func (self *ActionNxOutputTrunc) GetName() string {
	return "nx_output_trunc"
}

func (self *ActionNxOutputTrunc) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Port":   self.Port,
		"MaxLen": self.MaxLen,
	}
}

type ActionNxPopQueue struct {
	*ActionNicira
}

func (self *ActionNxPopQueue) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxPopQueue(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxPopQueue, error) {
	_actionnxpopqueue := &ActionNxPopQueue{ActionNicira: parent}
	return _actionnxpopqueue, nil
}

func NewActionNxPopQueue() *ActionNxPopQueue {
	obj := &ActionNxPopQueue{
		ActionNicira: NewActionNicira(5),
	}
	return obj
}
func (self *ActionNxPopQueue) GetName() string {
	return "nx_pop_queue"
}

func (self *ActionNxPopQueue) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxRegLoad struct {
	*ActionNicira
	OfsNbits uint16
	Dst      uint32
	Value    uint64
}

func (self *ActionNxRegLoad) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Dst))
	encoder.PutUint64(uint64(self.Value))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxRegLoad(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxRegLoad, error) {
	_actionnxregload := &ActionNxRegLoad{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxRegLoad packet too short: %d < 14", decoder.Length())
	}
	_actionnxregload.OfsNbits = uint16(decoder.ReadUint16())
	_actionnxregload.Dst = uint32(decoder.ReadUint32())
	_actionnxregload.Value = uint64(decoder.ReadUint64())
	return _actionnxregload, nil
}

func NewActionNxRegLoad() *ActionNxRegLoad {
	obj := &ActionNxRegLoad{
		ActionNicira: NewActionNicira(7),
	}
	return obj
}
func (self *ActionNxRegLoad) GetName() string {
	return "nx_reg_load"
}

func (self *ActionNxRegLoad) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"OfsNbits": self.OfsNbits,
		"Dst":      self.Dst,
		"Value":    self.Value,
	}
}

type ActionNxRegLoad2 struct {
	*ActionNicira
}

func (self *ActionNxRegLoad2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxRegLoad2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxRegLoad2, error) {
	_actionnxregload2 := &ActionNxRegLoad2{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNxRegLoad2 packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(6)
	return _actionnxregload2, nil
}

func NewActionNxRegLoad2() *ActionNxRegLoad2 {
	obj := &ActionNxRegLoad2{
		ActionNicira: NewActionNicira(33),
	}
	return obj
}
func (self *ActionNxRegLoad2) GetName() string {
	return "nx_reg_load2"
}

func (self *ActionNxRegLoad2) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxRegMove struct {
	*ActionNicira
	NBits  uint16
	SrcOfs uint16
	DstOfs uint16
}

func (self *ActionNxRegMove) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.NBits))
	encoder.PutUint16(uint16(self.SrcOfs))
	encoder.PutUint16(uint16(self.DstOfs))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxRegMove(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxRegMove, error) {
	_actionnxregmove := &ActionNxRegMove{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxRegMove packet too short: %d < 6", decoder.Length())
	}
	_actionnxregmove.NBits = uint16(decoder.ReadUint16())
	_actionnxregmove.SrcOfs = uint16(decoder.ReadUint16())
	_actionnxregmove.DstOfs = uint16(decoder.ReadUint16())
	return _actionnxregmove, nil
}

func NewActionNxRegMove() *ActionNxRegMove {
	obj := &ActionNxRegMove{
		ActionNicira: NewActionNicira(6),
	}
	return obj
}
func (self *ActionNxRegMove) GetName() string {
	return "nx_reg_move"
}

func (self *ActionNxRegMove) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NBits":  self.NBits,
		"SrcOfs": self.SrcOfs,
		"DstOfs": self.DstOfs,
	}
}

type ActionNxResubmit struct {
	*ActionNicira
	Value uint16
}

func (self *ActionNxResubmit) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Value))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxResubmit(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxResubmit, error) {
	_actionnxresubmit := &ActionNxResubmit{ActionNicira: parent}
	if decoder.Length() < 2 {
		return nil, fmt.Errorf("ActionNxResubmit packet too short: %d < 2", decoder.Length())
	}
	_actionnxresubmit.Value = uint16(decoder.ReadUint16())
	return _actionnxresubmit, nil
}

func NewActionNxResubmit() *ActionNxResubmit {
	obj := &ActionNxResubmit{
		ActionNicira: NewActionNicira(1),
	}
	return obj
}
func (self *ActionNxResubmit) GetName() string {
	return "nx_resubmit"
}

func (self *ActionNxResubmit) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Value": self.Value,
	}
}

type ActionNxResubmitTable struct {
	*ActionNicira
	InPort uint16
	Table  uint8
}

func (self *ActionNxResubmitTable) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.InPort))
	encoder.PutUint8(uint8(self.Table))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxResubmitTable(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxResubmitTable, error) {
	_actionnxresubmittable := &ActionNxResubmitTable{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxResubmitTable packet too short: %d < 6", decoder.Length())
	}
	_actionnxresubmittable.InPort = uint16(decoder.ReadUint16())
	_actionnxresubmittable.Table = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionnxresubmittable, nil
}

func NewActionNxResubmitTable() *ActionNxResubmitTable {
	obj := &ActionNxResubmitTable{
		ActionNicira: NewActionNicira(14),
	}
	return obj
}
func (self *ActionNxResubmitTable) GetName() string {
	return "nx_resubmit_table"
}

func (self *ActionNxResubmitTable) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"InPort": self.InPort,
		"Table":  self.Table,
	}
}

type ActionNxResubmitTableCt struct {
	*ActionNicira
	InPort uint16
	Table  uint8
}

func (self *ActionNxResubmitTableCt) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.InPort))
	encoder.PutUint8(uint8(self.Table))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxResubmitTableCt(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxResubmitTableCt, error) {
	_actionnxresubmittablect := &ActionNxResubmitTableCt{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxResubmitTableCt packet too short: %d < 6", decoder.Length())
	}
	_actionnxresubmittablect.InPort = uint16(decoder.ReadUint16())
	_actionnxresubmittablect.Table = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionnxresubmittablect, nil
}

func NewActionNxResubmitTableCt() *ActionNxResubmitTableCt {
	obj := &ActionNxResubmitTableCt{
		ActionNicira: NewActionNicira(44),
	}
	return obj
}
func (self *ActionNxResubmitTableCt) GetName() string {
	return "nx_resubmit_table_ct"
}

func (self *ActionNxResubmitTableCt) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"InPort": self.InPort,
		"Table":  self.Table,
	}
}

type ActionNxSample struct {
	*ActionNicira
	Probability    uint16
	CollectorSetId uint32
	ObsDomainId    uint32
	ObsPointId     uint32
}

func (self *ActionNxSample) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Probability))
	encoder.PutUint32(uint32(self.CollectorSetId))
	encoder.PutUint32(uint32(self.ObsDomainId))
	encoder.PutUint32(uint32(self.ObsPointId))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxSample(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSample, error) {
	_actionnxsample := &ActionNxSample{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxSample packet too short: %d < 14", decoder.Length())
	}
	_actionnxsample.Probability = uint16(decoder.ReadUint16())
	_actionnxsample.CollectorSetId = uint32(decoder.ReadUint32())
	_actionnxsample.ObsDomainId = uint32(decoder.ReadUint32())
	_actionnxsample.ObsPointId = uint32(decoder.ReadUint32())
	return _actionnxsample, nil
}

func NewActionNxSample() *ActionNxSample {
	obj := &ActionNxSample{
		ActionNicira: NewActionNicira(29),
	}
	return obj
}
func (self *ActionNxSample) GetName() string {
	return "nx_sample"
}

func (self *ActionNxSample) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Probability":    self.Probability,
		"CollectorSetId": self.CollectorSetId,
		"ObsDomainId":    self.ObsDomainId,
		"ObsPointId":     self.ObsPointId,
	}
}

type ActionNxSample2 struct {
	*ActionNicira
	Probability    uint16
	CollectorSetId uint32
	ObsDomainId    uint32
	ObsPointId     uint32
	SamplingPort   uint16
	Direction      uint8
}

func (self *ActionNxSample2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Probability))
	encoder.PutUint32(uint32(self.CollectorSetId))
	encoder.PutUint32(uint32(self.ObsDomainId))
	encoder.PutUint32(uint32(self.ObsPointId))
	encoder.PutUint16(uint16(self.SamplingPort))
	encoder.PutUint8(uint8(self.Direction))
	encoder.Write(bytes.Repeat([]byte{0}, 5))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxSample2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSample2, error) {
	_actionnxsample2 := &ActionNxSample2{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxSample2 packet too short: %d < 22", decoder.Length())
	}
	_actionnxsample2.Probability = uint16(decoder.ReadUint16())
	_actionnxsample2.CollectorSetId = uint32(decoder.ReadUint32())
	_actionnxsample2.ObsDomainId = uint32(decoder.ReadUint32())
	_actionnxsample2.ObsPointId = uint32(decoder.ReadUint32())
	_actionnxsample2.SamplingPort = uint16(decoder.ReadUint16())
	_actionnxsample2.Direction = uint8(decoder.ReadByte())
	decoder.Skip(5)
	return _actionnxsample2, nil
}

func NewActionNxSample2() *ActionNxSample2 {
	obj := &ActionNxSample2{
		ActionNicira: NewActionNicira(38),
	}
	return obj
}
func (self *ActionNxSample2) GetName() string {
	return "nx_sample2"
}

func (self *ActionNxSample2) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Probability":    self.Probability,
		"CollectorSetId": self.CollectorSetId,
		"ObsDomainId":    self.ObsDomainId,
		"ObsPointId":     self.ObsPointId,
		"SamplingPort":   self.SamplingPort,
		"Direction":      self.Direction,
	}
}

type ActionNxSample3 struct {
	*ActionNicira
	Probability    uint16
	CollectorSetId uint32
	ObsDomainId    uint32
	ObsPointId     uint32
	SamplingPort   uint16
	Direction      uint8
}

func (self *ActionNxSample3) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Probability))
	encoder.PutUint32(uint32(self.CollectorSetId))
	encoder.PutUint32(uint32(self.ObsDomainId))
	encoder.PutUint32(uint32(self.ObsPointId))
	encoder.PutUint16(uint16(self.SamplingPort))
	encoder.PutUint8(uint8(self.Direction))
	encoder.Write(bytes.Repeat([]byte{0}, 5))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxSample3(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSample3, error) {
	_actionnxsample3 := &ActionNxSample3{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxSample3 packet too short: %d < 22", decoder.Length())
	}
	_actionnxsample3.Probability = uint16(decoder.ReadUint16())
	_actionnxsample3.CollectorSetId = uint32(decoder.ReadUint32())
	_actionnxsample3.ObsDomainId = uint32(decoder.ReadUint32())
	_actionnxsample3.ObsPointId = uint32(decoder.ReadUint32())
	_actionnxsample3.SamplingPort = uint16(decoder.ReadUint16())
	_actionnxsample3.Direction = uint8(decoder.ReadByte())
	decoder.Skip(5)
	return _actionnxsample3, nil
}

func NewActionNxSample3() *ActionNxSample3 {
	obj := &ActionNxSample3{
		ActionNicira: NewActionNicira(41),
	}
	return obj
}
func (self *ActionNxSample3) GetName() string {
	return "nx_sample3"
}

func (self *ActionNxSample3) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Probability":    self.Probability,
		"CollectorSetId": self.CollectorSetId,
		"ObsDomainId":    self.ObsDomainId,
		"ObsPointId":     self.ObsPointId,
		"SamplingPort":   self.SamplingPort,
		"Direction":      self.Direction,
	}
}

type ActionNxSetTunnel struct {
	*ActionNicira
	Value uint32
}

func (self *ActionNxSetTunnel) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Value))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxSetTunnel(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSetTunnel, error) {
	_actionnxsettunnel := &ActionNxSetTunnel{ActionNicira: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionNxSetTunnel packet too short: %d < 4", decoder.Length())
	}
	_actionnxsettunnel.Value = uint32(decoder.ReadUint32())
	return _actionnxsettunnel, nil
}

func NewActionNxSetTunnel() *ActionNxSetTunnel {
	obj := &ActionNxSetTunnel{
		ActionNicira: NewActionNicira(2),
	}
	return obj
}
func (self *ActionNxSetTunnel) GetName() string {
	return "nx_set_tunnel"
}

func (self *ActionNxSetTunnel) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Value": self.Value,
	}
}

type ActionNxSetTunnel64 struct {
	*ActionNicira
	Value uint64
}

func (self *ActionNxSetTunnel64) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint64(uint64(self.Value))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxSetTunnel64(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSetTunnel64, error) {
	_actionnxsettunnel64 := &ActionNxSetTunnel64{ActionNicira: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionNxSetTunnel64 packet too short: %d < 8", decoder.Length())
	}
	_actionnxsettunnel64.Value = uint64(decoder.ReadUint64())
	return _actionnxsettunnel64, nil
}

func NewActionNxSetTunnel64() *ActionNxSetTunnel64 {
	obj := &ActionNxSetTunnel64{
		ActionNicira: NewActionNicira(9),
	}
	return obj
}
func (self *ActionNxSetTunnel64) GetName() string {
	return "nx_set_tunnel64"
}

func (self *ActionNxSetTunnel64) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Value": self.Value,
	}
}

type ActionNxStackPop struct {
	*ActionNicira
	Offset uint16
}

func (self *ActionNxStackPop) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Offset))
	encoder.Write(bytes.Repeat([]byte{0}, 12))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxStackPop(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxStackPop, error) {
	_actionnxstackpop := &ActionNxStackPop{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxStackPop packet too short: %d < 14", decoder.Length())
	}
	_actionnxstackpop.Offset = uint16(decoder.ReadUint16())
	decoder.Skip(12)
	return _actionnxstackpop, nil
}

func NewActionNxStackPop() *ActionNxStackPop {
	obj := &ActionNxStackPop{
		ActionNicira: NewActionNicira(28),
	}
	return obj
}
func (self *ActionNxStackPop) GetName() string {
	return "nx_stack_pop"
}

func (self *ActionNxStackPop) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Offset": self.Offset,
	}
}

type ActionNxStackPush struct {
	*ActionNicira
	Offset uint16
}

func (self *ActionNxStackPush) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Offset))
	encoder.Write(bytes.Repeat([]byte{0}, 12))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxStackPush(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxStackPush, error) {
	_actionnxstackpush := &ActionNxStackPush{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxStackPush packet too short: %d < 14", decoder.Length())
	}
	_actionnxstackpush.Offset = uint16(decoder.ReadUint16())
	decoder.Skip(12)
	return _actionnxstackpush, nil
}

func NewActionNxStackPush() *ActionNxStackPush {
	obj := &ActionNxStackPush{
		ActionNicira: NewActionNicira(27),
	}
	return obj
}
func (self *ActionNxStackPush) GetName() string {
	return "nx_stack_push"
}

func (self *ActionNxStackPush) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Offset": self.Offset,
	}
}

type ActionNxWriteMetadata struct {
	*ActionNicira
	Metadata uint64
	Mask     uint64
}

func (self *ActionNxWriteMetadata) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 6))
	encoder.PutUint64(uint64(self.Metadata))
	encoder.PutUint64(uint64(self.Mask))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionNxWriteMetadata(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxWriteMetadata, error) {
	_actionnxwritemetadata := &ActionNxWriteMetadata{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNxWriteMetadata packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(6)
	_actionnxwritemetadata.Metadata = uint64(decoder.ReadUint64())
	_actionnxwritemetadata.Mask = uint64(decoder.ReadUint64())
	return _actionnxwritemetadata, nil
}

func NewActionNxWriteMetadata() *ActionNxWriteMetadata {
	obj := &ActionNxWriteMetadata{
		ActionNicira: NewActionNicira(22),
	}
	return obj
}
func (self *ActionNxWriteMetadata) GetName() string {
	return "nx_write_metadata"
}

func (self *ActionNxWriteMetadata) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Metadata": self.Metadata,
		"Mask":     self.Mask,
	}
}

type ActionOutput struct {
	*Action
	Port   PortNo
	MaxLen uint16
}

func (self *ActionOutput) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	self.Port.Serialize(encoder)
	encoder.PutUint16(uint16(self.MaxLen))
	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionOutput(parent *Action, decoder *goloxi.Decoder) (*ActionOutput, error) {
	_actionoutput := &ActionOutput{Action: parent}
	if decoder.Length() < 12 {
		return nil, fmt.Errorf("ActionOutput packet too short: %d < 12", decoder.Length())
	}
	_actionoutput.Port.Decode(decoder)
	_actionoutput.MaxLen = uint16(decoder.ReadUint16())
	decoder.Skip(6)
	return _actionoutput, nil
}

func NewActionOutput() *ActionOutput {
	obj := &ActionOutput{
		Action: NewAction(0),
	}
	return obj
}
func (self *ActionOutput) GetName() string {
	return "output"
}

func (self *ActionOutput) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Port":   self.Port,
		"MaxLen": self.MaxLen,
	}
}

type ActionPopMpls struct {
	*Action
	Ethertype uint16
}

func (self *ActionPopMpls) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Ethertype))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionPopMpls(parent *Action, decoder *goloxi.Decoder) (*ActionPopMpls, error) {
	_actionpopmpls := &ActionPopMpls{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionPopMpls packet too short: %d < 4", decoder.Length())
	}
	_actionpopmpls.Ethertype = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return _actionpopmpls, nil
}

func NewActionPopMpls() *ActionPopMpls {
	obj := &ActionPopMpls{
		Action: NewAction(20),
	}
	return obj
}
func (self *ActionPopMpls) GetName() string {
	return "pop_mpls"
}

func (self *ActionPopMpls) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Ethertype": self.Ethertype,
	}
}

type ActionPopVlan struct {
	*Action
}

func (self *ActionPopVlan) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionPopVlan(parent *Action, decoder *goloxi.Decoder) (*ActionPopVlan, error) {
	_actionpopvlan := &ActionPopVlan{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionPopVlan packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return _actionpopvlan, nil
}

func NewActionPopVlan() *ActionPopVlan {
	obj := &ActionPopVlan{
		Action: NewAction(18),
	}
	return obj
}
func (self *ActionPopVlan) GetName() string {
	return "pop_vlan"
}

func (self *ActionPopVlan) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionPushMpls struct {
	*Action
	Ethertype uint16
}

func (self *ActionPushMpls) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Ethertype))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionPushMpls(parent *Action, decoder *goloxi.Decoder) (*ActionPushMpls, error) {
	_actionpushmpls := &ActionPushMpls{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionPushMpls packet too short: %d < 4", decoder.Length())
	}
	_actionpushmpls.Ethertype = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return _actionpushmpls, nil
}

func NewActionPushMpls() *ActionPushMpls {
	obj := &ActionPushMpls{
		Action: NewAction(19),
	}
	return obj
}
func (self *ActionPushMpls) GetName() string {
	return "push_mpls"
}

func (self *ActionPushMpls) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Ethertype": self.Ethertype,
	}
}

type ActionPushVlan struct {
	*Action
	Ethertype uint16
}

func (self *ActionPushVlan) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Ethertype))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionPushVlan(parent *Action, decoder *goloxi.Decoder) (*ActionPushVlan, error) {
	_actionpushvlan := &ActionPushVlan{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionPushVlan packet too short: %d < 4", decoder.Length())
	}
	_actionpushvlan.Ethertype = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return _actionpushvlan, nil
}

func NewActionPushVlan() *ActionPushVlan {
	obj := &ActionPushVlan{
		Action: NewAction(17),
	}
	return obj
}
func (self *ActionPushVlan) GetName() string {
	return "push_vlan"
}

func (self *ActionPushVlan) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Ethertype": self.Ethertype,
	}
}

type ActionResubmit struct {
	*ActionNicira
	InPort uint16
	Table  uint8
}

func (self *ActionResubmit) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.InPort))
	encoder.PutUint8(uint8(self.Table))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionResubmit(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionResubmit, error) {
	_actionresubmit := &ActionResubmit{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionResubmit packet too short: %d < 6", decoder.Length())
	}
	_actionresubmit.InPort = uint16(decoder.ReadUint16())
	_actionresubmit.Table = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionresubmit, nil
}

func NewActionResubmit() *ActionResubmit {
	obj := &ActionResubmit{
		ActionNicira: NewActionNicira(14),
	}
	return obj
}
func (self *ActionResubmit) GetName() string {
	return "resubmit"
}

func (self *ActionResubmit) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"InPort": self.InPort,
		"Table":  self.Table,
	}
}

type ActionSetDlDst struct {
	*Action
	DlAddr net.HardwareAddr
}

func (self *ActionSetDlDst) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(self.DlAddr)
	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetDlDst(parent *Action, decoder *goloxi.Decoder) (*ActionSetDlDst, error) {
	_actionsetdldst := &ActionSetDlDst{Action: parent}
	if decoder.Length() < 12 {
		return nil, fmt.Errorf("ActionSetDlDst packet too short: %d < 12", decoder.Length())
	}
	_actionsetdldst.DlAddr = net.HardwareAddr(decoder.Read(6))
	decoder.Skip(6)
	return _actionsetdldst, nil
}

func NewActionSetDlDst() *ActionSetDlDst {
	obj := &ActionSetDlDst{
		Action: NewAction(4),
	}
	return obj
}
func (self *ActionSetDlDst) GetName() string {
	return "set_dl_dst"
}

func (self *ActionSetDlDst) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"DlAddr": self.DlAddr,
	}
}

type ActionSetDlSrc struct {
	*Action
	DlAddr net.HardwareAddr
}

func (self *ActionSetDlSrc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(self.DlAddr)
	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetDlSrc(parent *Action, decoder *goloxi.Decoder) (*ActionSetDlSrc, error) {
	_actionsetdlsrc := &ActionSetDlSrc{Action: parent}
	if decoder.Length() < 12 {
		return nil, fmt.Errorf("ActionSetDlSrc packet too short: %d < 12", decoder.Length())
	}
	_actionsetdlsrc.DlAddr = net.HardwareAddr(decoder.Read(6))
	decoder.Skip(6)
	return _actionsetdlsrc, nil
}

func NewActionSetDlSrc() *ActionSetDlSrc {
	obj := &ActionSetDlSrc{
		Action: NewAction(3),
	}
	return obj
}
func (self *ActionSetDlSrc) GetName() string {
	return "set_dl_src"
}

func (self *ActionSetDlSrc) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"DlAddr": self.DlAddr,
	}
}

type ActionSetMplsLabel struct {
	*Action
	MplsLabel uint32
}

func (self *ActionSetMplsLabel) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.MplsLabel))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetMplsLabel(parent *Action, decoder *goloxi.Decoder) (*ActionSetMplsLabel, error) {
	_actionsetmplslabel := &ActionSetMplsLabel{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetMplsLabel packet too short: %d < 4", decoder.Length())
	}
	_actionsetmplslabel.MplsLabel = uint32(decoder.ReadUint32())
	return _actionsetmplslabel, nil
}

func NewActionSetMplsLabel() *ActionSetMplsLabel {
	obj := &ActionSetMplsLabel{
		Action: NewAction(13),
	}
	return obj
}
func (self *ActionSetMplsLabel) GetName() string {
	return "set_mpls_label"
}

func (self *ActionSetMplsLabel) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"MplsLabel": self.MplsLabel,
	}
}

type ActionSetMplsTc struct {
	*Action
	MplsTc uint8
}

func (self *ActionSetMplsTc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.MplsTc))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetMplsTc(parent *Action, decoder *goloxi.Decoder) (*ActionSetMplsTc, error) {
	_actionsetmplstc := &ActionSetMplsTc{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetMplsTc packet too short: %d < 4", decoder.Length())
	}
	_actionsetmplstc.MplsTc = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionsetmplstc, nil
}

func NewActionSetMplsTc() *ActionSetMplsTc {
	obj := &ActionSetMplsTc{
		Action: NewAction(14),
	}
	return obj
}
func (self *ActionSetMplsTc) GetName() string {
	return "set_mpls_tc"
}

func (self *ActionSetMplsTc) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"MplsTc": self.MplsTc,
	}
}

type ActionSetMplsTtl struct {
	*Action
	MplsTtl uint8
}

func (self *ActionSetMplsTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.MplsTtl))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetMplsTtl(parent *Action, decoder *goloxi.Decoder) (*ActionSetMplsTtl, error) {
	_actionsetmplsttl := &ActionSetMplsTtl{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetMplsTtl packet too short: %d < 4", decoder.Length())
	}
	_actionsetmplsttl.MplsTtl = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionsetmplsttl, nil
}

func NewActionSetMplsTtl() *ActionSetMplsTtl {
	obj := &ActionSetMplsTtl{
		Action: NewAction(15),
	}
	return obj
}
func (self *ActionSetMplsTtl) GetName() string {
	return "set_mpls_ttl"
}

func (self *ActionSetMplsTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"MplsTtl": self.MplsTtl,
	}
}

type ActionSetNwDst struct {
	*Action
	NwAddr uint32
}

func (self *ActionSetNwDst) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.NwAddr))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetNwDst(parent *Action, decoder *goloxi.Decoder) (*ActionSetNwDst, error) {
	_actionsetnwdst := &ActionSetNwDst{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetNwDst packet too short: %d < 4", decoder.Length())
	}
	_actionsetnwdst.NwAddr = uint32(decoder.ReadUint32())
	return _actionsetnwdst, nil
}

func NewActionSetNwDst() *ActionSetNwDst {
	obj := &ActionSetNwDst{
		Action: NewAction(6),
	}
	return obj
}
func (self *ActionSetNwDst) GetName() string {
	return "set_nw_dst"
}

func (self *ActionSetNwDst) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NwAddr": self.NwAddr,
	}
}

type ActionSetNwEcn struct {
	*Action
	NwEcn uint8
}

func (self *ActionSetNwEcn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.NwEcn))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetNwEcn(parent *Action, decoder *goloxi.Decoder) (*ActionSetNwEcn, error) {
	_actionsetnwecn := &ActionSetNwEcn{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetNwEcn packet too short: %d < 4", decoder.Length())
	}
	_actionsetnwecn.NwEcn = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionsetnwecn, nil
}

func NewActionSetNwEcn() *ActionSetNwEcn {
	obj := &ActionSetNwEcn{
		Action: NewAction(8),
	}
	return obj
}
func (self *ActionSetNwEcn) GetName() string {
	return "set_nw_ecn"
}

func (self *ActionSetNwEcn) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NwEcn": self.NwEcn,
	}
}

type ActionSetNwSrc struct {
	*Action
	NwAddr uint32
}

func (self *ActionSetNwSrc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.NwAddr))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetNwSrc(parent *Action, decoder *goloxi.Decoder) (*ActionSetNwSrc, error) {
	_actionsetnwsrc := &ActionSetNwSrc{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetNwSrc packet too short: %d < 4", decoder.Length())
	}
	_actionsetnwsrc.NwAddr = uint32(decoder.ReadUint32())
	return _actionsetnwsrc, nil
}

func NewActionSetNwSrc() *ActionSetNwSrc {
	obj := &ActionSetNwSrc{
		Action: NewAction(5),
	}
	return obj
}
func (self *ActionSetNwSrc) GetName() string {
	return "set_nw_src"
}

func (self *ActionSetNwSrc) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NwAddr": self.NwAddr,
	}
}

type ActionSetNwTos struct {
	*Action
	NwTos uint8
}

func (self *ActionSetNwTos) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.NwTos))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetNwTos(parent *Action, decoder *goloxi.Decoder) (*ActionSetNwTos, error) {
	_actionsetnwtos := &ActionSetNwTos{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetNwTos packet too short: %d < 4", decoder.Length())
	}
	_actionsetnwtos.NwTos = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionsetnwtos, nil
}

func NewActionSetNwTos() *ActionSetNwTos {
	obj := &ActionSetNwTos{
		Action: NewAction(7),
	}
	return obj
}
func (self *ActionSetNwTos) GetName() string {
	return "set_nw_tos"
}

func (self *ActionSetNwTos) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NwTos": self.NwTos,
	}
}

type ActionSetNwTtl struct {
	*Action
	NwTtl uint8
}

func (self *ActionSetNwTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.NwTtl))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetNwTtl(parent *Action, decoder *goloxi.Decoder) (*ActionSetNwTtl, error) {
	_actionsetnwttl := &ActionSetNwTtl{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetNwTtl packet too short: %d < 4", decoder.Length())
	}
	_actionsetnwttl.NwTtl = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionsetnwttl, nil
}

func NewActionSetNwTtl() *ActionSetNwTtl {
	obj := &ActionSetNwTtl{
		Action: NewAction(23),
	}
	return obj
}
func (self *ActionSetNwTtl) GetName() string {
	return "set_nw_ttl"
}

func (self *ActionSetNwTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NwTtl": self.NwTtl,
	}
}

type ActionSetQueue struct {
	*Action
	QueueId uint32
}

func (self *ActionSetQueue) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.QueueId))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetQueue(parent *Action, decoder *goloxi.Decoder) (*ActionSetQueue, error) {
	_actionsetqueue := &ActionSetQueue{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetQueue packet too short: %d < 4", decoder.Length())
	}
	_actionsetqueue.QueueId = uint32(decoder.ReadUint32())
	return _actionsetqueue, nil
}

func NewActionSetQueue() *ActionSetQueue {
	obj := &ActionSetQueue{
		Action: NewAction(21),
	}
	return obj
}
func (self *ActionSetQueue) GetName() string {
	return "set_queue"
}

func (self *ActionSetQueue) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"QueueId": self.QueueId,
	}
}

type ActionSetTpDst struct {
	*Action
	TpPort uint16
}

func (self *ActionSetTpDst) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.TpPort))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetTpDst(parent *Action, decoder *goloxi.Decoder) (*ActionSetTpDst, error) {
	_actionsettpdst := &ActionSetTpDst{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetTpDst packet too short: %d < 4", decoder.Length())
	}
	_actionsettpdst.TpPort = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return _actionsettpdst, nil
}

func NewActionSetTpDst() *ActionSetTpDst {
	obj := &ActionSetTpDst{
		Action: NewAction(10),
	}
	return obj
}
func (self *ActionSetTpDst) GetName() string {
	return "set_tp_dst"
}

func (self *ActionSetTpDst) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"TpPort": self.TpPort,
	}
}

type ActionSetTpSrc struct {
	*Action
	TpPort uint16
}

func (self *ActionSetTpSrc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.TpPort))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetTpSrc(parent *Action, decoder *goloxi.Decoder) (*ActionSetTpSrc, error) {
	_actionsettpsrc := &ActionSetTpSrc{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetTpSrc packet too short: %d < 4", decoder.Length())
	}
	_actionsettpsrc.TpPort = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return _actionsettpsrc, nil
}

func NewActionSetTpSrc() *ActionSetTpSrc {
	obj := &ActionSetTpSrc{
		Action: NewAction(9),
	}
	return obj
}
func (self *ActionSetTpSrc) GetName() string {
	return "set_tp_src"
}

func (self *ActionSetTpSrc) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"TpPort": self.TpPort,
	}
}

type ActionSetVlanPcp struct {
	*Action
	VlanPcp uint8
}

func (self *ActionSetVlanPcp) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.VlanPcp))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetVlanPcp(parent *Action, decoder *goloxi.Decoder) (*ActionSetVlanPcp, error) {
	_actionsetvlanpcp := &ActionSetVlanPcp{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetVlanPcp packet too short: %d < 4", decoder.Length())
	}
	_actionsetvlanpcp.VlanPcp = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return _actionsetvlanpcp, nil
}

func NewActionSetVlanPcp() *ActionSetVlanPcp {
	obj := &ActionSetVlanPcp{
		Action: NewAction(2),
	}
	return obj
}
func (self *ActionSetVlanPcp) GetName() string {
	return "set_vlan_pcp"
}

func (self *ActionSetVlanPcp) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"VlanPcp": self.VlanPcp,
	}
}

type ActionSetVlanVid struct {
	*Action
	VlanVid uint16
}

func (self *ActionSetVlanVid) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.VlanVid))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func DecodeActionSetVlanVid(parent *Action, decoder *goloxi.Decoder) (*ActionSetVlanVid, error) {
	_actionsetvlanvid := &ActionSetVlanVid{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetVlanVid packet too short: %d < 4", decoder.Length())
	}
	_actionsetvlanvid.VlanVid = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return _actionsetvlanvid, nil
}

func NewActionSetVlanVid() *ActionSetVlanVid {
	obj := &ActionSetVlanVid{
		Action: NewAction(1),
	}
	return obj
}
func (self *ActionSetVlanVid) GetName() string {
	return "set_vlan_vid"
}

func (self *ActionSetVlanVid) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"VlanVid": self.VlanVid,
	}
}
