/*
 * Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
 * Copyright (c) 2011, 2012 Open Networking Foundation
 * Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler.
 * Copyright 2018, Red Hat, Inc.
 */
// Automatically generated by LOXI from template const.go
// Do not modify

package of11

import (
	"fmt"
	"strings"
)

const (
	// Identifiers from group macro_definitions
	MaxTableNameLen     = 32         // OFP_MAX_TABLE_NAME_LEN
	MaxPortNameLen      = 16         // OFP_MAX_PORT_NAME_LEN
	TCPPort             = 6653       // OFP_TCP_PORT
	SSLPort             = 6653       // OFP_SSL_PORT
	EthAlen             = 6          // OFP_ETH_ALEN
	DefaultMissSendLen  = 128        // OFP_DEFAULT_MISS_SEND_LEN
	OFPFWICMPType       = 64         // OFPFW_ICMP_TYPE
	OFPFWICMPCode       = 128        // OFPFW_ICMP_CODE
	DlTypeEth2Cutoff    = 1536       // OFP_DL_TYPE_ETH2_CUTOFF
	DlTypeNotEthType    = 1535       // OFP_DL_TYPE_NOT_ETH_TYPE
	VLANNone            = 0          // OFP_VLAN_NONE
	OFPMTStandardLength = 88         // OFPMT_STANDARD_LENGTH
	FlowPermanent       = 0          // OFP_FLOW_PERMANENT
	DefaultPriority     = 32768      // OFP_DEFAULT_PRIORITY
	DescStrLen          = 256        // DESC_STR_LEN
	SerialNumLen        = 32         // SERIAL_NUM_LEN
	OFPQAll             = 4294967295 // OFPQ_ALL
	OFPQMinRateUncfg    = 65535      // OFPQ_MIN_RATE_UNCFG
)

const (
	// Identifiers from group nx_flow_monitor_flags
	NxfmfInitial = 1  // NXFMF_INITIAL
	NxfmfAdd     = 2  // NXFMF_ADD
	NxfmfDelete  = 4  // NXFMF_DELETE
	NxfmfModify  = 8  // NXFMF_MODIFY
	NxfmfActions = 16 // NXFMF_ACTIONS
	NxfmfOwn     = 32 // NXFMF_OWN
)

type NxFlowMonitorFlags uint16

func (self NxFlowMonitorFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&NxfmfInitial == NxfmfInitial {
		flags = append(flags, "\"NxfmfInitial\": true")
	}
	if self&NxfmfAdd == NxfmfAdd {
		flags = append(flags, "\"NxfmfAdd\": true")
	}
	if self&NxfmfDelete == NxfmfDelete {
		flags = append(flags, "\"NxfmfDelete\": true")
	}
	if self&NxfmfModify == NxfmfModify {
		flags = append(flags, "\"NxfmfModify\": true")
	}
	if self&NxfmfActions == NxfmfActions {
		flags = append(flags, "\"NxfmfActions\": true")
	}
	if self&NxfmfOwn == NxfmfOwn {
		flags = append(flags, "\"NxfmfOwn\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group of_bsn_pdu_slot_num
	BsnPduSlotNumAny = 255 // BSN_PDU_SLOT_NUM_ANY
)

type BsnPduSlotNum uint8

func (self BsnPduSlotNum) MarshalJSON() ([]byte, error) {
	switch self {
	case BsnPduSlotNumAny:
		return []byte("\"BsnPduSlotNumAny\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnPduSlotNum", self)
	}
}

const (
	// Identifiers from group ofp_action_type
	OFPATOutput       = 0     // OFPAT_OUTPUT
	OFPATSetVLANVid   = 1     // OFPAT_SET_VLAN_VID
	OFPATSetVLANPCP   = 2     // OFPAT_SET_VLAN_PCP
	OFPATSetDlSrc     = 3     // OFPAT_SET_DL_SRC
	OFPATSetDlDst     = 4     // OFPAT_SET_DL_DST
	OFPATSetNwSrc     = 5     // OFPAT_SET_NW_SRC
	OFPATSetNwDst     = 6     // OFPAT_SET_NW_DST
	OFPATSetNwTos     = 7     // OFPAT_SET_NW_TOS
	OFPATSetNwEcn     = 8     // OFPAT_SET_NW_ECN
	OFPATSetTpSrc     = 9     // OFPAT_SET_TP_SRC
	OFPATSetTpDst     = 10    // OFPAT_SET_TP_DST
	OFPATCopyTtlOut   = 11    // OFPAT_COPY_TTL_OUT
	OFPATCopyTtlIn    = 12    // OFPAT_COPY_TTL_IN
	OFPATSetMplsLabel = 13    // OFPAT_SET_MPLS_LABEL
	OFPATSetMplsTc    = 14    // OFPAT_SET_MPLS_TC
	OFPATSetMplsTtl   = 15    // OFPAT_SET_MPLS_TTL
	OFPATDecMplsTtl   = 16    // OFPAT_DEC_MPLS_TTL
	OFPATPushVLAN     = 17    // OFPAT_PUSH_VLAN
	OFPATPopVLAN      = 18    // OFPAT_POP_VLAN
	OFPATPushMpls     = 19    // OFPAT_PUSH_MPLS
	OFPATPopMpls      = 20    // OFPAT_POP_MPLS
	OFPATSetQueue     = 21    // OFPAT_SET_QUEUE
	OFPATGroup        = 22    // OFPAT_GROUP
	OFPATSetNwTtl     = 23    // OFPAT_SET_NW_TTL
	OFPATDecNwTtl     = 24    // OFPAT_DEC_NW_TTL
	OFPATExperimenter = 65535 // OFPAT_EXPERIMENTER
)

type ActionType uint16

func (self ActionType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPATOutput:
		return []byte("\"OFPATOutput\""), nil
	case OFPATSetVLANVid:
		return []byte("\"OFPATSetVLANVid\""), nil
	case OFPATSetVLANPCP:
		return []byte("\"OFPATSetVLANPCP\""), nil
	case OFPATSetDlSrc:
		return []byte("\"OFPATSetDlSrc\""), nil
	case OFPATSetDlDst:
		return []byte("\"OFPATSetDlDst\""), nil
	case OFPATSetNwSrc:
		return []byte("\"OFPATSetNwSrc\""), nil
	case OFPATSetNwDst:
		return []byte("\"OFPATSetNwDst\""), nil
	case OFPATSetNwTos:
		return []byte("\"OFPATSetNwTos\""), nil
	case OFPATSetNwEcn:
		return []byte("\"OFPATSetNwEcn\""), nil
	case OFPATSetTpSrc:
		return []byte("\"OFPATSetTpSrc\""), nil
	case OFPATSetTpDst:
		return []byte("\"OFPATSetTpDst\""), nil
	case OFPATCopyTtlOut:
		return []byte("\"OFPATCopyTtlOut\""), nil
	case OFPATCopyTtlIn:
		return []byte("\"OFPATCopyTtlIn\""), nil
	case OFPATSetMplsLabel:
		return []byte("\"OFPATSetMplsLabel\""), nil
	case OFPATSetMplsTc:
		return []byte("\"OFPATSetMplsTc\""), nil
	case OFPATSetMplsTtl:
		return []byte("\"OFPATSetMplsTtl\""), nil
	case OFPATDecMplsTtl:
		return []byte("\"OFPATDecMplsTtl\""), nil
	case OFPATPushVLAN:
		return []byte("\"OFPATPushVLAN\""), nil
	case OFPATPopVLAN:
		return []byte("\"OFPATPopVLAN\""), nil
	case OFPATPushMpls:
		return []byte("\"OFPATPushMpls\""), nil
	case OFPATPopMpls:
		return []byte("\"OFPATPopMpls\""), nil
	case OFPATSetQueue:
		return []byte("\"OFPATSetQueue\""), nil
	case OFPATGroup:
		return []byte("\"OFPATGroup\""), nil
	case OFPATSetNwTtl:
		return []byte("\"OFPATSetNwTtl\""), nil
	case OFPATDecNwTtl:
		return []byte("\"OFPATDecNwTtl\""), nil
	case OFPATExperimenter:
		return []byte("\"OFPATExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for ActionType", self)
	}
}

const (
	// Identifiers from group ofp_bad_action_code
	OFPBACBadType             = 0  // OFPBAC_BAD_TYPE
	OFPBACBadLen              = 1  // OFPBAC_BAD_LEN
	OFPBACBadExperimenter     = 2  // OFPBAC_BAD_EXPERIMENTER
	OFPBACBadExperimenterType = 3  // OFPBAC_BAD_EXPERIMENTER_TYPE
	OFPBACBadOutPort          = 4  // OFPBAC_BAD_OUT_PORT
	OFPBACBadArgument         = 5  // OFPBAC_BAD_ARGUMENT
	OFPBACEperm               = 6  // OFPBAC_EPERM
	OFPBACTooMany             = 7  // OFPBAC_TOO_MANY
	OFPBACBadQueue            = 8  // OFPBAC_BAD_QUEUE
	OFPBACBadOutGroup         = 9  // OFPBAC_BAD_OUT_GROUP
	OFPBACMatchInconsistent   = 10 // OFPBAC_MATCH_INCONSISTENT
	OFPBACUnsupportedOrder    = 11 // OFPBAC_UNSUPPORTED_ORDER
	OFPBACBadTag              = 12 // OFPBAC_BAD_TAG
)

type BadActionCode uint16

func (self BadActionCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPBACBadType:
		return []byte("\"OFPBACBadType\""), nil
	case OFPBACBadLen:
		return []byte("\"OFPBACBadLen\""), nil
	case OFPBACBadExperimenter:
		return []byte("\"OFPBACBadExperimenter\""), nil
	case OFPBACBadExperimenterType:
		return []byte("\"OFPBACBadExperimenterType\""), nil
	case OFPBACBadOutPort:
		return []byte("\"OFPBACBadOutPort\""), nil
	case OFPBACBadArgument:
		return []byte("\"OFPBACBadArgument\""), nil
	case OFPBACEperm:
		return []byte("\"OFPBACEperm\""), nil
	case OFPBACTooMany:
		return []byte("\"OFPBACTooMany\""), nil
	case OFPBACBadQueue:
		return []byte("\"OFPBACBadQueue\""), nil
	case OFPBACBadOutGroup:
		return []byte("\"OFPBACBadOutGroup\""), nil
	case OFPBACMatchInconsistent:
		return []byte("\"OFPBACMatchInconsistent\""), nil
	case OFPBACUnsupportedOrder:
		return []byte("\"OFPBACUnsupportedOrder\""), nil
	case OFPBACBadTag:
		return []byte("\"OFPBACBadTag\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BadActionCode", self)
	}
}

const (
	// Identifiers from group ofp_bad_instruction_code
	OFPBICUnknownInst       = 0 // OFPBIC_UNKNOWN_INST
	OFPBICUnsupInst         = 1 // OFPBIC_UNSUP_INST
	OFPBICBadTableID        = 2 // OFPBIC_BAD_TABLE_ID
	OFPBICUnsupMetadata     = 3 // OFPBIC_UNSUP_METADATA
	OFPBICUnsupMetadataMask = 4 // OFPBIC_UNSUP_METADATA_MASK
	OFPBICUnsupExpInst      = 5 // OFPBIC_UNSUP_EXP_INST
)

type BadInstructionCode uint16

func (self BadInstructionCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPBICUnknownInst:
		return []byte("\"OFPBICUnknownInst\""), nil
	case OFPBICUnsupInst:
		return []byte("\"OFPBICUnsupInst\""), nil
	case OFPBICBadTableID:
		return []byte("\"OFPBICBadTableID\""), nil
	case OFPBICUnsupMetadata:
		return []byte("\"OFPBICUnsupMetadata\""), nil
	case OFPBICUnsupMetadataMask:
		return []byte("\"OFPBICUnsupMetadataMask\""), nil
	case OFPBICUnsupExpInst:
		return []byte("\"OFPBICUnsupExpInst\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BadInstructionCode", self)
	}
}

const (
	// Identifiers from group ofp_bad_match_code
	OFPBMCBadType       = 0 // OFPBMC_BAD_TYPE
	OFPBMCBadLen        = 1 // OFPBMC_BAD_LEN
	OFPBMCBadTag        = 2 // OFPBMC_BAD_TAG
	OFPBMCBadDlAddrMask = 3 // OFPBMC_BAD_DL_ADDR_MASK
	OFPBMCBadNwAddrMask = 4 // OFPBMC_BAD_NW_ADDR_MASK
	OFPBMCBadWildcards  = 5 // OFPBMC_BAD_WILDCARDS
	OFPBMCBadField      = 6 // OFPBMC_BAD_FIELD
	OFPBMCBadValue      = 7 // OFPBMC_BAD_VALUE
)

type BadMatchCode uint16

func (self BadMatchCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPBMCBadType:
		return []byte("\"OFPBMCBadType\""), nil
	case OFPBMCBadLen:
		return []byte("\"OFPBMCBadLen\""), nil
	case OFPBMCBadTag:
		return []byte("\"OFPBMCBadTag\""), nil
	case OFPBMCBadDlAddrMask:
		return []byte("\"OFPBMCBadDlAddrMask\""), nil
	case OFPBMCBadNwAddrMask:
		return []byte("\"OFPBMCBadNwAddrMask\""), nil
	case OFPBMCBadWildcards:
		return []byte("\"OFPBMCBadWildcards\""), nil
	case OFPBMCBadField:
		return []byte("\"OFPBMCBadField\""), nil
	case OFPBMCBadValue:
		return []byte("\"OFPBMCBadValue\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BadMatchCode", self)
	}
}

const (
	// Identifiers from group ofp_bad_request_code
	OFPBRCBadVersion      = 0 // OFPBRC_BAD_VERSION
	OFPBRCBadType         = 1 // OFPBRC_BAD_TYPE
	OFPBRCBadStat         = 2 // OFPBRC_BAD_STAT
	OFPBRCBadExperimenter = 3 // OFPBRC_BAD_EXPERIMENTER
	OFPBRCBadSubtype      = 4 // OFPBRC_BAD_SUBTYPE
	OFPBRCEperm           = 5 // OFPBRC_EPERM
	OFPBRCBadLen          = 6 // OFPBRC_BAD_LEN
	OFPBRCBufferEmpty     = 7 // OFPBRC_BUFFER_EMPTY
	OFPBRCBufferUnknown   = 8 // OFPBRC_BUFFER_UNKNOWN
	OFPBRCBadTableID      = 9 // OFPBRC_BAD_TABLE_ID
)

type BadRequestCode uint16

func (self BadRequestCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPBRCBadVersion:
		return []byte("\"OFPBRCBadVersion\""), nil
	case OFPBRCBadType:
		return []byte("\"OFPBRCBadType\""), nil
	case OFPBRCBadStat:
		return []byte("\"OFPBRCBadStat\""), nil
	case OFPBRCBadExperimenter:
		return []byte("\"OFPBRCBadExperimenter\""), nil
	case OFPBRCBadSubtype:
		return []byte("\"OFPBRCBadSubtype\""), nil
	case OFPBRCEperm:
		return []byte("\"OFPBRCEperm\""), nil
	case OFPBRCBadLen:
		return []byte("\"OFPBRCBadLen\""), nil
	case OFPBRCBufferEmpty:
		return []byte("\"OFPBRCBufferEmpty\""), nil
	case OFPBRCBufferUnknown:
		return []byte("\"OFPBRCBufferUnknown\""), nil
	case OFPBRCBadTableID:
		return []byte("\"OFPBRCBadTableID\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BadRequestCode", self)
	}
}

const (
	// Identifiers from group ofp_bsn_vport_l2gre_flags
	OFBSNVportL2GreLocalMACIsValid  = 1  // OF_BSN_VPORT_L2GRE_LOCAL_MAC_IS_VALID
	OFBSNVportL2GreDSCPAssign       = 2  // OF_BSN_VPORT_L2GRE_DSCP_ASSIGN
	OFBSNVportL2GreDSCPCopy         = 4  // OF_BSN_VPORT_L2GRE_DSCP_COPY
	OFBSNVportL2GreLoopbackIsValid  = 8  // OF_BSN_VPORT_L2GRE_LOOPBACK_IS_VALID
	OFBSNVportL2GreRateLimitIsValid = 16 // OF_BSN_VPORT_L2GRE_RATE_LIMIT_IS_VALID
)

type BsnVportL2GreFlags uint32

func (self BsnVportL2GreFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFBSNVportL2GreLocalMACIsValid == OFBSNVportL2GreLocalMACIsValid {
		flags = append(flags, "\"OFBSNVportL2GreLocalMACIsValid\": true")
	}
	if self&OFBSNVportL2GreDSCPAssign == OFBSNVportL2GreDSCPAssign {
		flags = append(flags, "\"OFBSNVportL2GreDSCPAssign\": true")
	}
	if self&OFBSNVportL2GreDSCPCopy == OFBSNVportL2GreDSCPCopy {
		flags = append(flags, "\"OFBSNVportL2GreDSCPCopy\": true")
	}
	if self&OFBSNVportL2GreLoopbackIsValid == OFBSNVportL2GreLoopbackIsValid {
		flags = append(flags, "\"OFBSNVportL2GreLoopbackIsValid\": true")
	}
	if self&OFBSNVportL2GreRateLimitIsValid == OFBSNVportL2GreRateLimitIsValid {
		flags = append(flags, "\"OFBSNVportL2GreRateLimitIsValid\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_vport_q_in_q_untagged
	OFBSNVportQInQUntagged = 65535 // OF_BSN_VPORT_Q_IN_Q_UNTAGGED
)

type BsnVportQInQUntagged uint16

func (self BsnVportQInQUntagged) MarshalJSON() ([]byte, error) {
	switch self {
	case OFBSNVportQInQUntagged:
		return []byte("\"OFBSNVportQInQUntagged\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnVportQInQUntagged", self)
	}
}

const (
	// Identifiers from group ofp_bsn_vport_status
	OFBSNVportStatusOk     = 0 // OF_BSN_VPORT_STATUS_OK
	OFBSNVportStatusFailed = 1 // OF_BSN_VPORT_STATUS_FAILED
)

const (
	// Identifiers from group ofp_capabilities
	OFPCFlowStats  = 1   // OFPC_FLOW_STATS
	OFPCTableStats = 2   // OFPC_TABLE_STATS
	OFPCPortStats  = 4   // OFPC_PORT_STATS
	OFPCGroupStats = 8   // OFPC_GROUP_STATS
	OFPCIpReasm    = 32  // OFPC_IP_REASM
	OFPCQueueStats = 64  // OFPC_QUEUE_STATS
	OFPCARPMatchIp = 128 // OFPC_ARP_MATCH_IP
)

type Capabilities uint32

func (self Capabilities) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPCFlowStats == OFPCFlowStats {
		flags = append(flags, "\"OFPCFlowStats\": true")
	}
	if self&OFPCTableStats == OFPCTableStats {
		flags = append(flags, "\"OFPCTableStats\": true")
	}
	if self&OFPCPortStats == OFPCPortStats {
		flags = append(flags, "\"OFPCPortStats\": true")
	}
	if self&OFPCGroupStats == OFPCGroupStats {
		flags = append(flags, "\"OFPCGroupStats\": true")
	}
	if self&OFPCIpReasm == OFPCIpReasm {
		flags = append(flags, "\"OFPCIpReasm\": true")
	}
	if self&OFPCQueueStats == OFPCQueueStats {
		flags = append(flags, "\"OFPCQueueStats\": true")
	}
	if self&OFPCARPMatchIp == OFPCARPMatchIp {
		flags = append(flags, "\"OFPCARPMatchIp\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_config_flags
	OFPCFragNormal             = 0 // OFPC_FRAG_NORMAL
	OFPCFragDrop               = 1 // OFPC_FRAG_DROP
	OFPCFragReasm              = 2 // OFPC_FRAG_REASM
	OFPCFragMask               = 3 // OFPC_FRAG_MASK
	OFPCInvalidTtlToController = 4 // OFPC_INVALID_TTL_TO_CONTROLLER
)

type ConfigFlags uint16

func (self ConfigFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPCFragNormal == OFPCFragNormal {
		flags = append(flags, "\"OFPCFragNormal\": true")
	}
	if self&OFPCFragDrop == OFPCFragDrop {
		flags = append(flags, "\"OFPCFragDrop\": true")
	}
	if self&OFPCFragReasm == OFPCFragReasm {
		flags = append(flags, "\"OFPCFragReasm\": true")
	}
	if self&OFPCFragMask == OFPCFragMask {
		flags = append(flags, "\"OFPCFragMask\": true")
	}
	if self&OFPCInvalidTtlToController == OFPCInvalidTtlToController {
		flags = append(flags, "\"OFPCInvalidTtlToController\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_ed_nsh_prop_type
	OFPPPTPropNshNone   = 0 // OFPPPT_PROP_NSH_NONE
	OFPPPTPropNshMdtype = 1 // OFPPPT_PROP_NSH_MDTYPE
	OFPPPTPropNshTlv    = 2 // OFPPPT_PROP_NSH_TLV
)

type EdNshPropType uint8

func (self EdNshPropType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPPTPropNshNone:
		return []byte("\"OFPPPTPropNshNone\""), nil
	case OFPPPTPropNshMdtype:
		return []byte("\"OFPPPTPropNshMdtype\""), nil
	case OFPPPTPropNshTlv:
		return []byte("\"OFPPPTPropNshTlv\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for EdNshPropType", self)
	}
}

const (
	// Identifiers from group ofp_ed_prop_class
	OFPPPCBasic        = 0     // OFPPPC_BASIC
	OFPPPCMpls         = 1     // OFPPPC_MPLS
	OFPPPCGRE          = 2     // OFPPPC_GRE
	OFPPPCGtp          = 3     // OFPPPC_GTP
	OFPPPCNsh          = 4     // OFPPPC_NSH
	OFPPPCExperimenter = 65535 // OFPPPC_EXPERIMENTER
)

type EdPropClass uint16

func (self EdPropClass) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPPCBasic:
		return []byte("\"OFPPPCBasic\""), nil
	case OFPPPCMpls:
		return []byte("\"OFPPPCMpls\""), nil
	case OFPPPCGRE:
		return []byte("\"OFPPPCGRE\""), nil
	case OFPPPCGtp:
		return []byte("\"OFPPPCGtp\""), nil
	case OFPPPCNsh:
		return []byte("\"OFPPPCNsh\""), nil
	case OFPPPCExperimenter:
		return []byte("\"OFPPPCExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for EdPropClass", self)
	}
}

const (
	// Identifiers from group ofp_error_type
	OFPETHelloFailed        = 0  // OFPET_HELLO_FAILED
	OFPETBadRequest         = 1  // OFPET_BAD_REQUEST
	OFPETBadAction          = 2  // OFPET_BAD_ACTION
	OFPETBadInstruction     = 3  // OFPET_BAD_INSTRUCTION
	OFPETBadMatch           = 4  // OFPET_BAD_MATCH
	OFPETFlowModFailed      = 5  // OFPET_FLOW_MOD_FAILED
	OFPETGroupModFailed     = 6  // OFPET_GROUP_MOD_FAILED
	OFPETPortModFailed      = 7  // OFPET_PORT_MOD_FAILED
	OFPETTableModFailed     = 8  // OFPET_TABLE_MOD_FAILED
	OFPETQueueOpFailed      = 9  // OFPET_QUEUE_OP_FAILED
	OFPETSwitchConfigFailed = 10 // OFPET_SWITCH_CONFIG_FAILED
)

type ErrorType uint16

func (self ErrorType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPETHelloFailed:
		return []byte("\"OFPETHelloFailed\""), nil
	case OFPETBadRequest:
		return []byte("\"OFPETBadRequest\""), nil
	case OFPETBadAction:
		return []byte("\"OFPETBadAction\""), nil
	case OFPETBadInstruction:
		return []byte("\"OFPETBadInstruction\""), nil
	case OFPETBadMatch:
		return []byte("\"OFPETBadMatch\""), nil
	case OFPETFlowModFailed:
		return []byte("\"OFPETFlowModFailed\""), nil
	case OFPETGroupModFailed:
		return []byte("\"OFPETGroupModFailed\""), nil
	case OFPETPortModFailed:
		return []byte("\"OFPETPortModFailed\""), nil
	case OFPETTableModFailed:
		return []byte("\"OFPETTableModFailed\""), nil
	case OFPETQueueOpFailed:
		return []byte("\"OFPETQueueOpFailed\""), nil
	case OFPETSwitchConfigFailed:
		return []byte("\"OFPETSwitchConfigFailed\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for ErrorType", self)
	}
}

const (
	// Identifiers from group ofp_flow_mod_command
	OFPFCAdd          = 0 // OFPFC_ADD
	OFPFCModify       = 1 // OFPFC_MODIFY
	OFPFCModifyStrict = 2 // OFPFC_MODIFY_STRICT
	OFPFCDelete       = 3 // OFPFC_DELETE
	OFPFCDeleteStrict = 4 // OFPFC_DELETE_STRICT
)

type FlowModCommand uint8

func (self FlowModCommand) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPFCAdd:
		return []byte("\"OFPFCAdd\""), nil
	case OFPFCModify:
		return []byte("\"OFPFCModify\""), nil
	case OFPFCModifyStrict:
		return []byte("\"OFPFCModifyStrict\""), nil
	case OFPFCDelete:
		return []byte("\"OFPFCDelete\""), nil
	case OFPFCDeleteStrict:
		return []byte("\"OFPFCDeleteStrict\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for FlowModCommand", self)
	}
}

const (
	// Identifiers from group ofp_flow_mod_failed_code
	OFPFMFCUnknown    = 0 // OFPFMFC_UNKNOWN
	OFPFMFCTableFull  = 1 // OFPFMFC_TABLE_FULL
	OFPFMFCBadTableID = 2 // OFPFMFC_BAD_TABLE_ID
	OFPFMFCOverlap    = 3 // OFPFMFC_OVERLAP
	OFPFMFCEperm      = 4 // OFPFMFC_EPERM
	OFPFMFCBadTimeout = 5 // OFPFMFC_BAD_TIMEOUT
	OFPFMFCBadCommand = 6 // OFPFMFC_BAD_COMMAND
)

type FlowModFailedCode uint16

func (self FlowModFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPFMFCUnknown:
		return []byte("\"OFPFMFCUnknown\""), nil
	case OFPFMFCTableFull:
		return []byte("\"OFPFMFCTableFull\""), nil
	case OFPFMFCBadTableID:
		return []byte("\"OFPFMFCBadTableID\""), nil
	case OFPFMFCOverlap:
		return []byte("\"OFPFMFCOverlap\""), nil
	case OFPFMFCEperm:
		return []byte("\"OFPFMFCEperm\""), nil
	case OFPFMFCBadTimeout:
		return []byte("\"OFPFMFCBadTimeout\""), nil
	case OFPFMFCBadCommand:
		return []byte("\"OFPFMFCBadCommand\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for FlowModFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_flow_mod_flags
	OFPFFSendFlowRem  = 1 // OFPFF_SEND_FLOW_REM
	OFPFFCheckOverlap = 2 // OFPFF_CHECK_OVERLAP
)

type FlowModFlags uint16

func (self FlowModFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPFFSendFlowRem == OFPFFSendFlowRem {
		flags = append(flags, "\"OFPFFSendFlowRem\": true")
	}
	if self&OFPFFCheckOverlap == OFPFFCheckOverlap {
		flags = append(flags, "\"OFPFFCheckOverlap\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_flow_removed_reason
	OFPRRIdleTimeout = 0 // OFPRR_IDLE_TIMEOUT
	OFPRRHardTimeout = 1 // OFPRR_HARD_TIMEOUT
	OFPRRDelete      = 2 // OFPRR_DELETE
	OFPRRGroupDelete = 3 // OFPRR_GROUP_DELETE
)

type FlowRemovedReason uint8

func (self FlowRemovedReason) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPRRIdleTimeout:
		return []byte("\"OFPRRIdleTimeout\""), nil
	case OFPRRHardTimeout:
		return []byte("\"OFPRRHardTimeout\""), nil
	case OFPRRDelete:
		return []byte("\"OFPRRDelete\""), nil
	case OFPRRGroupDelete:
		return []byte("\"OFPRRGroupDelete\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for FlowRemovedReason", self)
	}
}

const (
	// Identifiers from group ofp_flow_wildcards
	OFPFWInPort    = 1    // OFPFW_IN_PORT
	OFPFWDlVLAN    = 2    // OFPFW_DL_VLAN
	OFPFWDlVLANPCP = 4    // OFPFW_DL_VLAN_PCP
	OFPFWDlType    = 8    // OFPFW_DL_TYPE
	OFPFWNwTos     = 16   // OFPFW_NW_TOS
	OFPFWNwProto   = 32   // OFPFW_NW_PROTO
	OFPFWTpSrc     = 64   // OFPFW_TP_SRC
	OFPFWTpDst     = 128  // OFPFW_TP_DST
	OFPFWMplsLabel = 256  // OFPFW_MPLS_LABEL
	OFPFWMplsTc    = 512  // OFPFW_MPLS_TC
	OFPFWAll       = 1023 // OFPFW_ALL
)

type FlowWildcards uint32

func (self FlowWildcards) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPFWInPort == OFPFWInPort {
		flags = append(flags, "\"OFPFWInPort\": true")
	}
	if self&OFPFWDlVLAN == OFPFWDlVLAN {
		flags = append(flags, "\"OFPFWDlVLAN\": true")
	}
	if self&OFPFWDlVLANPCP == OFPFWDlVLANPCP {
		flags = append(flags, "\"OFPFWDlVLANPCP\": true")
	}
	if self&OFPFWDlType == OFPFWDlType {
		flags = append(flags, "\"OFPFWDlType\": true")
	}
	if self&OFPFWNwTos == OFPFWNwTos {
		flags = append(flags, "\"OFPFWNwTos\": true")
	}
	if self&OFPFWNwProto == OFPFWNwProto {
		flags = append(flags, "\"OFPFWNwProto\": true")
	}
	if self&OFPFWTpSrc == OFPFWTpSrc {
		flags = append(flags, "\"OFPFWTpSrc\": true")
	}
	if self&OFPFWTpDst == OFPFWTpDst {
		flags = append(flags, "\"OFPFWTpDst\": true")
	}
	if self&OFPFWMplsLabel == OFPFWMplsLabel {
		flags = append(flags, "\"OFPFWMplsLabel\": true")
	}
	if self&OFPFWMplsTc == OFPFWMplsTc {
		flags = append(flags, "\"OFPFWMplsTc\": true")
	}
	if self&OFPFWAll == OFPFWAll {
		flags = append(flags, "\"OFPFWAll\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_group
	OFPGMax = 4294967040 // OFPG_MAX
	OFPGAll = 4294967292 // OFPG_ALL
	OFPGAny = 4294967295 // OFPG_ANY
)

type Group uint32

func (self Group) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPGMax:
		return []byte("\"OFPGMax\""), nil
	case OFPGAll:
		return []byte("\"OFPGAll\""), nil
	case OFPGAny:
		return []byte("\"OFPGAny\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for Group", self)
	}
}

const (
	// Identifiers from group ofp_group_mod_command
	OFPGCAdd    = 0 // OFPGC_ADD
	OFPGCModify = 1 // OFPGC_MODIFY
	OFPGCDelete = 2 // OFPGC_DELETE
)

type GroupModCommand uint16

func (self GroupModCommand) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPGCAdd:
		return []byte("\"OFPGCAdd\""), nil
	case OFPGCModify:
		return []byte("\"OFPGCModify\""), nil
	case OFPGCDelete:
		return []byte("\"OFPGCDelete\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for GroupModCommand", self)
	}
}

const (
	// Identifiers from group ofp_group_mod_failed_code
	OFPGMFCGroupExists         = 0 // OFPGMFC_GROUP_EXISTS
	OFPGMFCInvalidGroup        = 1 // OFPGMFC_INVALID_GROUP
	OFPGMFCWeightUnsupported   = 2 // OFPGMFC_WEIGHT_UNSUPPORTED
	OFPGMFCOutOfGroups         = 3 // OFPGMFC_OUT_OF_GROUPS
	OFPGMFCOutOfBuckets        = 4 // OFPGMFC_OUT_OF_BUCKETS
	OFPGMFCChainingUnsupported = 5 // OFPGMFC_CHAINING_UNSUPPORTED
	OFPGMFCWatchUnsupported    = 6 // OFPGMFC_WATCH_UNSUPPORTED
	OFPGMFCLoop                = 7 // OFPGMFC_LOOP
	OFPGMFCUnknownGroup        = 8 // OFPGMFC_UNKNOWN_GROUP
)

type GroupModFailedCode uint16

func (self GroupModFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPGMFCGroupExists:
		return []byte("\"OFPGMFCGroupExists\""), nil
	case OFPGMFCInvalidGroup:
		return []byte("\"OFPGMFCInvalidGroup\""), nil
	case OFPGMFCWeightUnsupported:
		return []byte("\"OFPGMFCWeightUnsupported\""), nil
	case OFPGMFCOutOfGroups:
		return []byte("\"OFPGMFCOutOfGroups\""), nil
	case OFPGMFCOutOfBuckets:
		return []byte("\"OFPGMFCOutOfBuckets\""), nil
	case OFPGMFCChainingUnsupported:
		return []byte("\"OFPGMFCChainingUnsupported\""), nil
	case OFPGMFCWatchUnsupported:
		return []byte("\"OFPGMFCWatchUnsupported\""), nil
	case OFPGMFCLoop:
		return []byte("\"OFPGMFCLoop\""), nil
	case OFPGMFCUnknownGroup:
		return []byte("\"OFPGMFCUnknownGroup\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for GroupModFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_group_type
	OFPGTAll      = 0 // OFPGT_ALL
	OFPGTSelect   = 1 // OFPGT_SELECT
	OFPGTIndirect = 2 // OFPGT_INDIRECT
	OFPGTFf       = 3 // OFPGT_FF
)

type GroupType uint8

func (self GroupType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPGTAll:
		return []byte("\"OFPGTAll\""), nil
	case OFPGTSelect:
		return []byte("\"OFPGTSelect\""), nil
	case OFPGTIndirect:
		return []byte("\"OFPGTIndirect\""), nil
	case OFPGTFf:
		return []byte("\"OFPGTFf\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for GroupType", self)
	}
}

const (
	// Identifiers from group ofp_hello_failed_code
	OFPHFCIncompatible = 0 // OFPHFC_INCOMPATIBLE
	OFPHFCEperm        = 1 // OFPHFC_EPERM
)

type HelloFailedCode uint16

func (self HelloFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPHFCIncompatible:
		return []byte("\"OFPHFCIncompatible\""), nil
	case OFPHFCEperm:
		return []byte("\"OFPHFCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for HelloFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_instruction_type
	OFPITGotoTable     = 1     // OFPIT_GOTO_TABLE
	OFPITWriteMetadata = 2     // OFPIT_WRITE_METADATA
	OFPITWriteActions  = 3     // OFPIT_WRITE_ACTIONS
	OFPITApplyActions  = 4     // OFPIT_APPLY_ACTIONS
	OFPITClearActions  = 5     // OFPIT_CLEAR_ACTIONS
	OFPITExperimenter  = 65535 // OFPIT_EXPERIMENTER
)

type InstructionType uint16

func (self InstructionType) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPITGotoTable == OFPITGotoTable {
		flags = append(flags, "\"OFPITGotoTable\": true")
	}
	if self&OFPITWriteMetadata == OFPITWriteMetadata {
		flags = append(flags, "\"OFPITWriteMetadata\": true")
	}
	if self&OFPITWriteActions == OFPITWriteActions {
		flags = append(flags, "\"OFPITWriteActions\": true")
	}
	if self&OFPITApplyActions == OFPITApplyActions {
		flags = append(flags, "\"OFPITApplyActions\": true")
	}
	if self&OFPITClearActions == OFPITClearActions {
		flags = append(flags, "\"OFPITClearActions\": true")
	}
	if self&OFPITExperimenter == OFPITExperimenter {
		flags = append(flags, "\"OFPITExperimenter\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_match_type
	OFPMTStandard = 0 // OFPMT_STANDARD
)

type MatchType uint16

func (self MatchType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPMTStandard:
		return []byte("\"OFPMTStandard\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for MatchType", self)
	}
}

const (
	// Identifiers from group ofp_packet_in_reason
	OFPRNoMatch = 0 // OFPR_NO_MATCH
	OFPRAction  = 1 // OFPR_ACTION
)

type PacketInReason uint8

func (self PacketInReason) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPRNoMatch:
		return []byte("\"OFPRNoMatch\""), nil
	case OFPRAction:
		return []byte("\"OFPRAction\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for PacketInReason", self)
	}
}

const (
	// Identifiers from group ofp_port
	OFPPMax        = 4294967040 // OFPP_MAX
	OFPPInPort     = 4294967288 // OFPP_IN_PORT
	OFPPTable      = 4294967289 // OFPP_TABLE
	OFPPNormal     = 4294967290 // OFPP_NORMAL
	OFPPFlood      = 4294967291 // OFPP_FLOOD
	OFPPAll        = 4294967292 // OFPP_ALL
	OFPPController = 4294967293 // OFPP_CONTROLLER
	OFPPLocal      = 4294967294 // OFPP_LOCAL
	OFPPAny        = 4294967295 // OFPP_ANY
)

type Port uint32

func (self Port) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPMax:
		return []byte("\"OFPPMax\""), nil
	case OFPPInPort:
		return []byte("\"OFPPInPort\""), nil
	case OFPPTable:
		return []byte("\"OFPPTable\""), nil
	case OFPPNormal:
		return []byte("\"OFPPNormal\""), nil
	case OFPPFlood:
		return []byte("\"OFPPFlood\""), nil
	case OFPPAll:
		return []byte("\"OFPPAll\""), nil
	case OFPPController:
		return []byte("\"OFPPController\""), nil
	case OFPPLocal:
		return []byte("\"OFPPLocal\""), nil
	case OFPPAny:
		return []byte("\"OFPPAny\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for Port", self)
	}
}

const (
	// Identifiers from group ofp_port_config
	OFPPCPortDown      = 1          // OFPPC_PORT_DOWN
	OFPPCNoRecv        = 4          // OFPPC_NO_RECV
	OFPPCNoFwd         = 32         // OFPPC_NO_FWD
	OFPPCNoPacketIn    = 64         // OFPPC_NO_PACKET_IN
	OFPPCBSNMirrorDest = 2147483648 // OFPPC_BSN_MIRROR_DEST
)

type PortConfig uint32

func (self PortConfig) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPPCPortDown == OFPPCPortDown {
		flags = append(flags, "\"OFPPCPortDown\": true")
	}
	if self&OFPPCNoRecv == OFPPCNoRecv {
		flags = append(flags, "\"OFPPCNoRecv\": true")
	}
	if self&OFPPCNoFwd == OFPPCNoFwd {
		flags = append(flags, "\"OFPPCNoFwd\": true")
	}
	if self&OFPPCNoPacketIn == OFPPCNoPacketIn {
		flags = append(flags, "\"OFPPCNoPacketIn\": true")
	}
	if self&OFPPCBSNMirrorDest == OFPPCBSNMirrorDest {
		flags = append(flags, "\"OFPPCBSNMirrorDest\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_port_features
	OFPPF10MbHd    = 1     // OFPPF_10MB_HD
	OFPPF10MbFd    = 2     // OFPPF_10MB_FD
	OFPPF100MbHd   = 4     // OFPPF_100MB_HD
	OFPPF100MbFd   = 8     // OFPPF_100MB_FD
	OFPPF1GbHd     = 16    // OFPPF_1GB_HD
	OFPPF1GbFd     = 32    // OFPPF_1GB_FD
	OFPPF10GbFd    = 64    // OFPPF_10GB_FD
	OFPPF40GbFd    = 128   // OFPPF_40GB_FD
	OFPPF100GbFd   = 256   // OFPPF_100GB_FD
	OFPPF1TbFd     = 512   // OFPPF_1TB_FD
	OFPPFOther     = 1024  // OFPPF_OTHER
	OFPPFCopper    = 2048  // OFPPF_COPPER
	OFPPFFiber     = 4096  // OFPPF_FIBER
	OFPPFAutoneg   = 8192  // OFPPF_AUTONEG
	OFPPFPause     = 16384 // OFPPF_PAUSE
	OFPPFPauseAsym = 32768 // OFPPF_PAUSE_ASYM
)

type PortFeatures uint32

func (self PortFeatures) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPPF10MbHd == OFPPF10MbHd {
		flags = append(flags, "\"OFPPF10MbHd\": true")
	}
	if self&OFPPF10MbFd == OFPPF10MbFd {
		flags = append(flags, "\"OFPPF10MbFd\": true")
	}
	if self&OFPPF100MbHd == OFPPF100MbHd {
		flags = append(flags, "\"OFPPF100MbHd\": true")
	}
	if self&OFPPF100MbFd == OFPPF100MbFd {
		flags = append(flags, "\"OFPPF100MbFd\": true")
	}
	if self&OFPPF1GbHd == OFPPF1GbHd {
		flags = append(flags, "\"OFPPF1GbHd\": true")
	}
	if self&OFPPF1GbFd == OFPPF1GbFd {
		flags = append(flags, "\"OFPPF1GbFd\": true")
	}
	if self&OFPPF10GbFd == OFPPF10GbFd {
		flags = append(flags, "\"OFPPF10GbFd\": true")
	}
	if self&OFPPF40GbFd == OFPPF40GbFd {
		flags = append(flags, "\"OFPPF40GbFd\": true")
	}
	if self&OFPPF100GbFd == OFPPF100GbFd {
		flags = append(flags, "\"OFPPF100GbFd\": true")
	}
	if self&OFPPF1TbFd == OFPPF1TbFd {
		flags = append(flags, "\"OFPPF1TbFd\": true")
	}
	if self&OFPPFOther == OFPPFOther {
		flags = append(flags, "\"OFPPFOther\": true")
	}
	if self&OFPPFCopper == OFPPFCopper {
		flags = append(flags, "\"OFPPFCopper\": true")
	}
	if self&OFPPFFiber == OFPPFFiber {
		flags = append(flags, "\"OFPPFFiber\": true")
	}
	if self&OFPPFAutoneg == OFPPFAutoneg {
		flags = append(flags, "\"OFPPFAutoneg\": true")
	}
	if self&OFPPFPause == OFPPFPause {
		flags = append(flags, "\"OFPPFPause\": true")
	}
	if self&OFPPFPauseAsym == OFPPFPauseAsym {
		flags = append(flags, "\"OFPPFPauseAsym\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_port_mod_failed_code
	OFPPMFCBadPort      = 0 // OFPPMFC_BAD_PORT
	OFPPMFCBadHwAddr    = 1 // OFPPMFC_BAD_HW_ADDR
	OFPPMFCBadConfig    = 2 // OFPPMFC_BAD_CONFIG
	OFPPMFCBadAdvertise = 3 // OFPPMFC_BAD_ADVERTISE
)

type PortModFailedCode uint16

func (self PortModFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPMFCBadPort:
		return []byte("\"OFPPMFCBadPort\""), nil
	case OFPPMFCBadHwAddr:
		return []byte("\"OFPPMFCBadHwAddr\""), nil
	case OFPPMFCBadConfig:
		return []byte("\"OFPPMFCBadConfig\""), nil
	case OFPPMFCBadAdvertise:
		return []byte("\"OFPPMFCBadAdvertise\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for PortModFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_port_reason
	OFPPRAdd    = 0 // OFPPR_ADD
	OFPPRDelete = 1 // OFPPR_DELETE
	OFPPRModify = 2 // OFPPR_MODIFY
)

type PortReason uint8

func (self PortReason) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPRAdd:
		return []byte("\"OFPPRAdd\""), nil
	case OFPPRDelete:
		return []byte("\"OFPPRDelete\""), nil
	case OFPPRModify:
		return []byte("\"OFPPRModify\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for PortReason", self)
	}
}

const (
	// Identifiers from group ofp_port_state
	OFPPSLinkDown = 1 // OFPPS_LINK_DOWN
	OFPPSBlocked  = 2 // OFPPS_BLOCKED
	OFPPSLive     = 4 // OFPPS_LIVE
)

type PortState uint32

func (self PortState) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPPSLinkDown == OFPPSLinkDown {
		flags = append(flags, "\"OFPPSLinkDown\": true")
	}
	if self&OFPPSBlocked == OFPPSBlocked {
		flags = append(flags, "\"OFPPSBlocked\": true")
	}
	if self&OFPPSLive == OFPPSLive {
		flags = append(flags, "\"OFPPSLive\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_queue_op_failed_code
	OFPQOFCBadPort  = 0 // OFPQOFC_BAD_PORT
	OFPQOFCBadQueue = 1 // OFPQOFC_BAD_QUEUE
	OFPQOFCEperm    = 2 // OFPQOFC_EPERM
)

type QueueOpFailedCode uint16

func (self QueueOpFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPQOFCBadPort:
		return []byte("\"OFPQOFCBadPort\""), nil
	case OFPQOFCBadQueue:
		return []byte("\"OFPQOFCBadQueue\""), nil
	case OFPQOFCEperm:
		return []byte("\"OFPQOFCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for QueueOpFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_queue_properties
	OFPQTNone    = 0 // OFPQT_NONE
	OFPQTMinRate = 1 // OFPQT_MIN_RATE
)

type QueueProperties uint16

func (self QueueProperties) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPQTNone:
		return []byte("\"OFPQTNone\""), nil
	case OFPQTMinRate:
		return []byte("\"OFPQTMinRate\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for QueueProperties", self)
	}
}

const (
	// Identifiers from group ofp_stats_reply_flags
	OFPSFReplyMore = 1 // OFPSF_REPLY_MORE
)

type StatsReplyFlags uint16

func (self StatsReplyFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPSFReplyMore == OFPSFReplyMore {
		flags = append(flags, "\"OFPSFReplyMore\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
// Identifiers from group ofp_stats_request_flags
)

type StatsRequestFlags uint16

func (self StatsRequestFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_stats_type
	OFPSTDesc         = 0     // OFPST_DESC
	OFPSTFlow         = 1     // OFPST_FLOW
	OFPSTAggregate    = 2     // OFPST_AGGREGATE
	OFPSTTable        = 3     // OFPST_TABLE
	OFPSTPort         = 4     // OFPST_PORT
	OFPSTQueue        = 5     // OFPST_QUEUE
	OFPSTGroup        = 6     // OFPST_GROUP
	OFPSTGroupDesc    = 7     // OFPST_GROUP_DESC
	OFPSTExperimenter = 65535 // OFPST_EXPERIMENTER
)

type StatsType uint16

func (self StatsType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPSTDesc:
		return []byte("\"OFPSTDesc\""), nil
	case OFPSTFlow:
		return []byte("\"OFPSTFlow\""), nil
	case OFPSTAggregate:
		return []byte("\"OFPSTAggregate\""), nil
	case OFPSTTable:
		return []byte("\"OFPSTTable\""), nil
	case OFPSTPort:
		return []byte("\"OFPSTPort\""), nil
	case OFPSTQueue:
		return []byte("\"OFPSTQueue\""), nil
	case OFPSTGroup:
		return []byte("\"OFPSTGroup\""), nil
	case OFPSTGroupDesc:
		return []byte("\"OFPSTGroupDesc\""), nil
	case OFPSTExperimenter:
		return []byte("\"OFPSTExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for StatsType", self)
	}
}

const (
	// Identifiers from group ofp_switch_config_failed_code
	OFPSCFCBadFlags = 0 // OFPSCFC_BAD_FLAGS
	OFPSCFCBadLen   = 1 // OFPSCFC_BAD_LEN
)

type SwitchConfigFailedCode uint16

func (self SwitchConfigFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPSCFCBadFlags:
		return []byte("\"OFPSCFCBadFlags\""), nil
	case OFPSCFCBadLen:
		return []byte("\"OFPSCFCBadLen\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for SwitchConfigFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_table_config
	OFPTCTableMissController = 0 // OFPTC_TABLE_MISS_CONTROLLER
	OFPTCTableMissContinue   = 1 // OFPTC_TABLE_MISS_CONTINUE
	OFPTCTableMissDrop       = 2 // OFPTC_TABLE_MISS_DROP
	OFPTCTableMissMask       = 3 // OFPTC_TABLE_MISS_MASK
)

type TableConfig uint32

func (self TableConfig) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPTCTableMissController == OFPTCTableMissController {
		flags = append(flags, "\"OFPTCTableMissController\": true")
	}
	if self&OFPTCTableMissContinue == OFPTCTableMissContinue {
		flags = append(flags, "\"OFPTCTableMissContinue\": true")
	}
	if self&OFPTCTableMissDrop == OFPTCTableMissDrop {
		flags = append(flags, "\"OFPTCTableMissDrop\": true")
	}
	if self&OFPTCTableMissMask == OFPTCTableMissMask {
		flags = append(flags, "\"OFPTCTableMissMask\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_table_mod_failed_code
	OFPTMFCBadTable  = 0 // OFPTMFC_BAD_TABLE
	OFPTMFCBadConfig = 1 // OFPTMFC_BAD_CONFIG
)

type TableModFailedCode uint16

func (self TableModFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPTMFCBadTable:
		return []byte("\"OFPTMFCBadTable\""), nil
	case OFPTMFCBadConfig:
		return []byte("\"OFPTMFCBadConfig\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for TableModFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_type
	OFPTHello                 = 0  // OFPT_HELLO
	OFPTError                 = 1  // OFPT_ERROR
	OFPTEchoRequest           = 2  // OFPT_ECHO_REQUEST
	OFPTEchoReply             = 3  // OFPT_ECHO_REPLY
	OFPTExperimenter          = 4  // OFPT_EXPERIMENTER
	OFPTFeaturesRequest       = 5  // OFPT_FEATURES_REQUEST
	OFPTFeaturesReply         = 6  // OFPT_FEATURES_REPLY
	OFPTGetConfigRequest      = 7  // OFPT_GET_CONFIG_REQUEST
	OFPTGetConfigReply        = 8  // OFPT_GET_CONFIG_REPLY
	OFPTSetConfig             = 9  // OFPT_SET_CONFIG
	OFPTPacketIn              = 10 // OFPT_PACKET_IN
	OFPTFlowRemoved           = 11 // OFPT_FLOW_REMOVED
	OFPTPortStatus            = 12 // OFPT_PORT_STATUS
	OFPTPacketOut             = 13 // OFPT_PACKET_OUT
	OFPTFlowMod               = 14 // OFPT_FLOW_MOD
	OFPTGroupMod              = 15 // OFPT_GROUP_MOD
	OFPTPortMod               = 16 // OFPT_PORT_MOD
	OFPTTableMod              = 17 // OFPT_TABLE_MOD
	OFPTStatsRequest          = 18 // OFPT_STATS_REQUEST
	OFPTStatsReply            = 19 // OFPT_STATS_REPLY
	OFPTBarrierRequest        = 20 // OFPT_BARRIER_REQUEST
	OFPTBarrierReply          = 21 // OFPT_BARRIER_REPLY
	OFPTQueueGetConfigRequest = 22 // OFPT_QUEUE_GET_CONFIG_REQUEST
	OFPTQueueGetConfigReply   = 23 // OFPT_QUEUE_GET_CONFIG_REPLY
)

type Type uint8

func (self Type) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPTHello:
		return []byte("\"OFPTHello\""), nil
	case OFPTError:
		return []byte("\"OFPTError\""), nil
	case OFPTEchoRequest:
		return []byte("\"OFPTEchoRequest\""), nil
	case OFPTEchoReply:
		return []byte("\"OFPTEchoReply\""), nil
	case OFPTExperimenter:
		return []byte("\"OFPTExperimenter\""), nil
	case OFPTFeaturesRequest:
		return []byte("\"OFPTFeaturesRequest\""), nil
	case OFPTFeaturesReply:
		return []byte("\"OFPTFeaturesReply\""), nil
	case OFPTGetConfigRequest:
		return []byte("\"OFPTGetConfigRequest\""), nil
	case OFPTGetConfigReply:
		return []byte("\"OFPTGetConfigReply\""), nil
	case OFPTSetConfig:
		return []byte("\"OFPTSetConfig\""), nil
	case OFPTPacketIn:
		return []byte("\"OFPTPacketIn\""), nil
	case OFPTFlowRemoved:
		return []byte("\"OFPTFlowRemoved\""), nil
	case OFPTPortStatus:
		return []byte("\"OFPTPortStatus\""), nil
	case OFPTPacketOut:
		return []byte("\"OFPTPacketOut\""), nil
	case OFPTFlowMod:
		return []byte("\"OFPTFlowMod\""), nil
	case OFPTGroupMod:
		return []byte("\"OFPTGroupMod\""), nil
	case OFPTPortMod:
		return []byte("\"OFPTPortMod\""), nil
	case OFPTTableMod:
		return []byte("\"OFPTTableMod\""), nil
	case OFPTStatsRequest:
		return []byte("\"OFPTStatsRequest\""), nil
	case OFPTStatsReply:
		return []byte("\"OFPTStatsReply\""), nil
	case OFPTBarrierRequest:
		return []byte("\"OFPTBarrierRequest\""), nil
	case OFPTBarrierReply:
		return []byte("\"OFPTBarrierReply\""), nil
	case OFPTQueueGetConfigRequest:
		return []byte("\"OFPTQueueGetConfigRequest\""), nil
	case OFPTQueueGetConfigReply:
		return []byte("\"OFPTQueueGetConfigReply\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for Type", self)
	}
}

const (
	// Identifiers from group ofp_vlan_id
	OFPVIDAny  = 65534 // OFPVID_ANY
	OFPVIDNone = 65535 // OFPVID_NONE
)

type VlanId uint16

func (self VlanId) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPVIDAny:
		return []byte("\"OFPVIDAny\""), nil
	case OFPVIDNone:
		return []byte("\"OFPVIDNone\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for VlanId", self)
	}
}
