/*
 * Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
 * Copyright (c) 2011, 2012 Open Networking Foundation
 * Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler.
 * Copyright 2018, Red Hat, Inc.
 */
// Automatically generated by LOXI from template module.go
// Do not modify

package of12

import (
	"bytes"
	"encoding/binary"
	"fmt"

	"github.com/skydive-project/goloxi"
)

type Action struct {
	Type uint16
	Len  uint16
}

type IAction interface {
	goloxi.Serializable
	GetType() uint16
	GetLen() uint16
	GetName() string
	GetFields() map[string]interface{}
}

func (self *Action) GetType() uint16 {
	return self.Type
}

func (self *Action) GetLen() uint16 {
	return self.Len
}

func (self *Action) Serialize(encoder *goloxi.Encoder) error {
	encoder.PutUint16(uint16(self.Type))
	encoder.PutUint16(uint16(self.Len))

	return nil
}

func decodeAction(decoder *goloxi.Decoder) (IAction, error) {
	action := &Action{}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("Action packet too short: %d < 4", decoder.Length())
	}
	action.Type = uint16(decoder.ReadUint16())
	action.Len = uint16(decoder.ReadUint16())
	decoder = decoder.SliceDecoder(int(action.Len), 2+2)

	switch action.Type {
	case 0:
		return decodeActionOutput(action, decoder)
	case 11:
		return decodeActionCopyTtlOut(action, decoder)
	case 12:
		return decodeActionCopyTtlIn(action, decoder)
	case 15:
		return decodeActionSetMplsTtl(action, decoder)
	case 16:
		return decodeActionDecMplsTtl(action, decoder)
	case 17:
		return decodeActionPushVlan(action, decoder)
	case 18:
		return decodeActionPopVlan(action, decoder)
	case 19:
		return decodeActionPushMpls(action, decoder)
	case 20:
		return decodeActionPopMpls(action, decoder)
	case 21:
		return decodeActionSetQueue(action, decoder)
	case 22:
		return decodeActionGroup(action, decoder)
	case 23:
		return decodeActionSetNwTtl(action, decoder)
	case 24:
		return decodeActionDecNwTtl(action, decoder)
	case 25:
		return decodeActionSetField(action, decoder)
	case 65535:
		return decodeActionExperimenter(action, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'Action'", action.Type)
	}
}

func NewAction(_type uint16) *Action {
	return &Action{
		Type: _type,
	}
}

type ActionExperimenter struct {
	*Action
	Experimenter uint32
}

type IActionExperimenter interface {
	IAction
	GetExperimenter() uint32
}

func (self *ActionExperimenter) GetExperimenter() uint32 {
	return self.Experimenter
}

func (self *ActionExperimenter) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Experimenter))

	return nil
}

func decodeActionExperimenter(parent *Action, decoder *goloxi.Decoder) (IActionExperimenter, error) {
	actionexperimenter := &ActionExperimenter{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionExperimenter packet too short: %d < 4", decoder.Length())
	}
	actionexperimenter.Experimenter = uint32(decoder.ReadUint32())

	switch actionexperimenter.Experimenter {
	case 8992:
		return decodeActionNicira(actionexperimenter, decoder)
	case 6035143:
		return decodeActionBsn(actionexperimenter, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionExperimenter'", actionexperimenter.Experimenter)
	}
}

func NewActionExperimenter(_experimenter uint32) *ActionExperimenter {
	return &ActionExperimenter{
		Experimenter: _experimenter,
		Action:       NewAction(65535),
	}
}
func (self *ActionExperimenter) GetName() string {
	return "experimenter"
}

func (self *ActionExperimenter) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Experimenter": self.Experimenter,
	}
}

type ActionBsn struct {
	*ActionExperimenter
	Subtype uint32
}

type IActionBsn interface {
	IActionExperimenter
	GetSubtype() uint32
}

func (self *ActionBsn) GetSubtype() uint32 {
	return self.Subtype
}

func (self *ActionBsn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionExperimenter.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Subtype))

	return nil
}

func decodeActionBsn(parent *ActionExperimenter, decoder *goloxi.Decoder) (IActionBsn, error) {
	actionbsn := &ActionBsn{ActionExperimenter: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionBsn packet too short: %d < 4", decoder.Length())
	}
	actionbsn.Subtype = uint32(decoder.ReadUint32())

	switch actionbsn.Subtype {
	case 1:
		return decodeActionBsnMirror(actionbsn, decoder)
	case 2:
		return decodeActionBsnSetTunnelDst(actionbsn, decoder)
	case 4:
		return decodeActionBsnChecksum(actionbsn, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionBsn'", actionbsn.Subtype)
	}
}

func NewActionBsn(_subtype uint32) *ActionBsn {
	return &ActionBsn{
		Subtype:            _subtype,
		ActionExperimenter: NewActionExperimenter(6035143),
	}
}
func (self *ActionBsn) GetName() string {
	return "bsn"
}

func (self *ActionBsn) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Subtype": self.Subtype,
	}
}

type ActionBsnChecksum struct {
	*ActionBsn
	Checksum Checksum128
}

func (self *ActionBsnChecksum) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionBsn.Serialize(encoder); err != nil {
		return err
	}

	self.Checksum.Serialize(encoder)

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionBsnChecksum(parent *ActionBsn, decoder *goloxi.Decoder) (*ActionBsnChecksum, error) {
	actionbsnchecksum := &ActionBsnChecksum{ActionBsn: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionBsnChecksum packet too short: %d < 16", decoder.Length())
	}
	actionbsnchecksum.Checksum.Decode(decoder)
	return actionbsnchecksum, nil
}

func NewActionBsnChecksum() *ActionBsnChecksum {
	return &ActionBsnChecksum{
		ActionBsn: NewActionBsn(4),
	}
}
func (self *ActionBsnChecksum) GetName() string {
	return "bsn_checksum"
}

func (self *ActionBsnChecksum) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Checksum": self.Checksum,
	}
}

type ActionBsnMirror struct {
	*ActionBsn
	DestPort  uint32
	VlanTag   uint32
	CopyStage uint8
}

func (self *ActionBsnMirror) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionBsn.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.DestPort))
	encoder.PutUint32(uint32(self.VlanTag))
	encoder.PutUint8(uint8(self.CopyStage))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionBsnMirror(parent *ActionBsn, decoder *goloxi.Decoder) (*ActionBsnMirror, error) {
	actionbsnmirror := &ActionBsnMirror{ActionBsn: parent}
	if decoder.Length() < 12 {
		return nil, fmt.Errorf("ActionBsnMirror packet too short: %d < 12", decoder.Length())
	}
	actionbsnmirror.DestPort = uint32(decoder.ReadUint32())
	actionbsnmirror.VlanTag = uint32(decoder.ReadUint32())
	actionbsnmirror.CopyStage = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return actionbsnmirror, nil
}

func NewActionBsnMirror() *ActionBsnMirror {
	return &ActionBsnMirror{
		ActionBsn: NewActionBsn(1),
	}
}
func (self *ActionBsnMirror) GetName() string {
	return "bsn_mirror"
}

func (self *ActionBsnMirror) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"DestPort":  self.DestPort,
		"VlanTag":   self.VlanTag,
		"CopyStage": self.CopyStage,
	}
}

type ActionBsnSetTunnelDst struct {
	*ActionBsn
	Dst uint32
}

func (self *ActionBsnSetTunnelDst) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionBsn.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Dst))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionBsnSetTunnelDst(parent *ActionBsn, decoder *goloxi.Decoder) (*ActionBsnSetTunnelDst, error) {
	actionbsnsettunneldst := &ActionBsnSetTunnelDst{ActionBsn: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionBsnSetTunnelDst packet too short: %d < 4", decoder.Length())
	}
	actionbsnsettunneldst.Dst = uint32(decoder.ReadUint32())
	return actionbsnsettunneldst, nil
}

func NewActionBsnSetTunnelDst() *ActionBsnSetTunnelDst {
	return &ActionBsnSetTunnelDst{
		ActionBsn: NewActionBsn(2),
	}
}
func (self *ActionBsnSetTunnelDst) GetName() string {
	return "bsn_set_tunnel_dst"
}

func (self *ActionBsnSetTunnelDst) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Dst": self.Dst,
	}
}

type ActionCopyTtlIn struct {
	*Action
}

func (self *ActionCopyTtlIn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionCopyTtlIn(parent *Action, decoder *goloxi.Decoder) (*ActionCopyTtlIn, error) {
	actioncopyttlin := &ActionCopyTtlIn{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionCopyTtlIn packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return actioncopyttlin, nil
}

func NewActionCopyTtlIn() *ActionCopyTtlIn {
	return &ActionCopyTtlIn{
		Action: NewAction(12),
	}
}
func (self *ActionCopyTtlIn) GetName() string {
	return "copy_ttl_in"
}

func (self *ActionCopyTtlIn) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionCopyTtlOut struct {
	*Action
}

func (self *ActionCopyTtlOut) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionCopyTtlOut(parent *Action, decoder *goloxi.Decoder) (*ActionCopyTtlOut, error) {
	actioncopyttlout := &ActionCopyTtlOut{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionCopyTtlOut packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return actioncopyttlout, nil
}

func NewActionCopyTtlOut() *ActionCopyTtlOut {
	return &ActionCopyTtlOut{
		Action: NewAction(11),
	}
}
func (self *ActionCopyTtlOut) GetName() string {
	return "copy_ttl_out"
}

func (self *ActionCopyTtlOut) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionDecMplsTtl struct {
	*Action
}

func (self *ActionDecMplsTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionDecMplsTtl(parent *Action, decoder *goloxi.Decoder) (*ActionDecMplsTtl, error) {
	actiondecmplsttl := &ActionDecMplsTtl{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionDecMplsTtl packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return actiondecmplsttl, nil
}

func NewActionDecMplsTtl() *ActionDecMplsTtl {
	return &ActionDecMplsTtl{
		Action: NewAction(16),
	}
}
func (self *ActionDecMplsTtl) GetName() string {
	return "dec_mpls_ttl"
}

func (self *ActionDecMplsTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionDecNwTtl struct {
	*Action
}

func (self *ActionDecNwTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionDecNwTtl(parent *Action, decoder *goloxi.Decoder) (*ActionDecNwTtl, error) {
	actiondecnwttl := &ActionDecNwTtl{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionDecNwTtl packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return actiondecnwttl, nil
}

func NewActionDecNwTtl() *ActionDecNwTtl {
	return &ActionDecNwTtl{
		Action: NewAction(24),
	}
}
func (self *ActionDecNwTtl) GetName() string {
	return "dec_nw_ttl"
}

func (self *ActionDecNwTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionGroup struct {
	*Action
	GroupId uint32
}

func (self *ActionGroup) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.GroupId))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionGroup(parent *Action, decoder *goloxi.Decoder) (*ActionGroup, error) {
	actiongroup := &ActionGroup{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionGroup packet too short: %d < 4", decoder.Length())
	}
	actiongroup.GroupId = uint32(decoder.ReadUint32())
	return actiongroup, nil
}

func NewActionGroup() *ActionGroup {
	return &ActionGroup{
		Action: NewAction(22),
	}
}
func (self *ActionGroup) GetName() string {
	return "group"
}

func (self *ActionGroup) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"GroupId": self.GroupId,
	}
}

type ActionNicira struct {
	*ActionExperimenter
	Subtype uint16
}

type IActionNicira interface {
	IActionExperimenter
	GetSubtype() uint16
}

func (self *ActionNicira) GetSubtype() uint16 {
	return self.Subtype
}

func (self *ActionNicira) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionExperimenter.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Subtype))

	return nil
}

func decodeActionNicira(parent *ActionExperimenter, decoder *goloxi.Decoder) (IActionNicira, error) {
	actionnicira := &ActionNicira{ActionExperimenter: parent}
	if decoder.Length() < 2 {
		return nil, fmt.Errorf("ActionNicira packet too short: %d < 2", decoder.Length())
	}
	actionnicira.Subtype = uint16(decoder.ReadUint16())

	switch actionnicira.Subtype {
	case 1:
		return decodeActionNxResubmit(actionnicira, decoder)
	case 2:
		return decodeActionNxSetTunnel(actionnicira, decoder)
	case 5:
		return decodeActionNxPopQueue(actionnicira, decoder)
	case 6:
		return decodeActionNxRegMove(actionnicira, decoder)
	case 7:
		return decodeActionNxRegLoad(actionnicira, decoder)
	case 8:
		return decodeActionNxNote(actionnicira, decoder)
	case 9:
		return decodeActionNxSetTunnel64(actionnicira, decoder)
	case 10:
		return decodeActionNxMultipath(actionnicira, decoder)
	case 12:
		return decodeActionNxBundle(actionnicira, decoder)
	case 13:
		return decodeActionNxBundleLoad(actionnicira, decoder)
	case 14:
		return decodeActionResubmit(actionnicira, decoder)
	case 15:
		return decodeActionNxOutputReg(actionnicira, decoder)
	case 16:
		return decodeActionNxLearn(actionnicira, decoder)
	case 17:
		return decodeActionNxExit(actionnicira, decoder)
	case 18:
		return decodeActionNiciraDecTtl(actionnicira, decoder)
	case 19:
		return decodeActionNxFinTimeout(actionnicira, decoder)
	case 20:
		return decodeActionNxController(actionnicira, decoder)
	case 21:
		return decodeActionNxDecTtlCntIds(actionnicira, decoder)
	case 22:
		return decodeActionNxWriteMetadata(actionnicira, decoder)
	case 27:
		return decodeActionNxStackPush(actionnicira, decoder)
	case 28:
		return decodeActionNxStackPop(actionnicira, decoder)
	case 29:
		return decodeActionNxSample(actionnicira, decoder)
	case 32:
		return decodeActionNxOutputReg2(actionnicira, decoder)
	case 33:
		return decodeActionNxRegLoad2(actionnicira, decoder)
	case 34:
		return decodeActionNxConjunction(actionnicira, decoder)
	case 35:
		return decodeActionNxCt(actionnicira, decoder)
	case 36:
		return decodeActionNxNat(actionnicira, decoder)
	case 37:
		return decodeActionNxController2(actionnicira, decoder)
	case 38:
		return decodeActionNxSample2(actionnicira, decoder)
	case 39:
		return decodeActionNxOutputTrunc(actionnicira, decoder)
	case 41:
		return decodeActionNxSample3(actionnicira, decoder)
	case 42:
		return decodeActionNxClone(actionnicira, decoder)
	case 43:
		return decodeActionNxCtClear(actionnicira, decoder)
	case 44:
		return decodeActionNxResubmitTableCt(actionnicira, decoder)
	case 45:
		return decodeActionNxLearn2(actionnicira, decoder)
	case 46:
		return decodeActionNxEncap(actionnicira, decoder)
	case 47:
		return decodeActionNxDecap(actionnicira, decoder)
	case 255:
		return decodeActionNxDebugRecirc(actionnicira, decoder)
	default:
		return nil, fmt.Errorf("Invalid type '%d' for 'ActionNicira'", actionnicira.Subtype)
	}
}

func NewActionNicira(_subtype uint16) *ActionNicira {
	return &ActionNicira{
		Subtype:            _subtype,
		ActionExperimenter: NewActionExperimenter(8992),
	}
}
func (self *ActionNicira) GetName() string {
	return "nicira"
}

func (self *ActionNicira) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Subtype": self.Subtype,
	}
}

type ActionNiciraDecTtl struct {
	*ActionNicira
}

func (self *ActionNiciraDecTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNiciraDecTtl(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNiciraDecTtl, error) {
	actionniciradecttl := &ActionNiciraDecTtl{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNiciraDecTtl packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(2)
	decoder.Skip(4)
	return actionniciradecttl, nil
}

func NewActionNiciraDecTtl() *ActionNiciraDecTtl {
	return &ActionNiciraDecTtl{
		ActionNicira: NewActionNicira(18),
	}
}
func (self *ActionNiciraDecTtl) GetName() string {
	return "nicira_dec_ttl"
}

func (self *ActionNiciraDecTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxBundle struct {
	*ActionNicira
	Algorithm uint16
	Fields    uint16
	Basis     uint16
	SlaveType uint32
	NSlaves   uint16
	OfsNbits  uint16
	Dst       uint32
}

func (self *ActionNxBundle) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Algorithm))
	encoder.PutUint16(uint16(self.Fields))
	encoder.PutUint16(uint16(self.Basis))
	encoder.PutUint32(uint32(self.SlaveType))
	encoder.PutUint16(uint16(self.NSlaves))
	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Dst))
	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxBundle(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxBundle, error) {
	actionnxbundle := &ActionNxBundle{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxBundle packet too short: %d < 22", decoder.Length())
	}
	actionnxbundle.Algorithm = uint16(decoder.ReadUint16())
	actionnxbundle.Fields = uint16(decoder.ReadUint16())
	actionnxbundle.Basis = uint16(decoder.ReadUint16())
	actionnxbundle.SlaveType = uint32(decoder.ReadUint32())
	actionnxbundle.NSlaves = uint16(decoder.ReadUint16())
	actionnxbundle.OfsNbits = uint16(decoder.ReadUint16())
	actionnxbundle.Dst = uint32(decoder.ReadUint32())
	decoder.Skip(4)
	return actionnxbundle, nil
}

func NewActionNxBundle() *ActionNxBundle {
	return &ActionNxBundle{
		ActionNicira: NewActionNicira(12),
	}
}
func (self *ActionNxBundle) GetName() string {
	return "nx_bundle"
}

func (self *ActionNxBundle) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Algorithm": self.Algorithm,
		"Fields":    self.Fields,
		"Basis":     self.Basis,
		"SlaveType": self.SlaveType,
		"NSlaves":   self.NSlaves,
		"OfsNbits":  self.OfsNbits,
		"Dst":       self.Dst,
	}
}

type ActionNxBundleLoad struct {
	*ActionNicira
	Algorithm uint16
	Fields    uint16
	Basis     uint16
	SlaveType uint32
	NSlaves   uint16
	OfsNbits  uint16
	Dst       uint32
}

func (self *ActionNxBundleLoad) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Algorithm))
	encoder.PutUint16(uint16(self.Fields))
	encoder.PutUint16(uint16(self.Basis))
	encoder.PutUint32(uint32(self.SlaveType))
	encoder.PutUint16(uint16(self.NSlaves))
	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Dst))
	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxBundleLoad(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxBundleLoad, error) {
	actionnxbundleload := &ActionNxBundleLoad{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxBundleLoad packet too short: %d < 22", decoder.Length())
	}
	actionnxbundleload.Algorithm = uint16(decoder.ReadUint16())
	actionnxbundleload.Fields = uint16(decoder.ReadUint16())
	actionnxbundleload.Basis = uint16(decoder.ReadUint16())
	actionnxbundleload.SlaveType = uint32(decoder.ReadUint32())
	actionnxbundleload.NSlaves = uint16(decoder.ReadUint16())
	actionnxbundleload.OfsNbits = uint16(decoder.ReadUint16())
	actionnxbundleload.Dst = uint32(decoder.ReadUint32())
	decoder.Skip(4)
	return actionnxbundleload, nil
}

func NewActionNxBundleLoad() *ActionNxBundleLoad {
	return &ActionNxBundleLoad{
		ActionNicira: NewActionNicira(13),
	}
}
func (self *ActionNxBundleLoad) GetName() string {
	return "nx_bundle_load"
}

func (self *ActionNxBundleLoad) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Algorithm": self.Algorithm,
		"Fields":    self.Fields,
		"Basis":     self.Basis,
		"SlaveType": self.SlaveType,
		"NSlaves":   self.NSlaves,
		"OfsNbits":  self.OfsNbits,
		"Dst":       self.Dst,
	}
}

type ActionNxClone struct {
	*ActionNicira
}

func (self *ActionNxClone) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxClone(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxClone, error) {
	actionnxclone := &ActionNxClone{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNxClone packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(6)
	return actionnxclone, nil
}

func NewActionNxClone() *ActionNxClone {
	return &ActionNxClone{
		ActionNicira: NewActionNicira(42),
	}
}
func (self *ActionNxClone) GetName() string {
	return "nx_clone"
}

func (self *ActionNxClone) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxConjunction struct {
	*ActionNicira
	Clause   uint8
	NClauses uint8
	Id       uint32
}

func (self *ActionNxConjunction) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.Clause))
	encoder.PutUint8(uint8(self.NClauses))
	encoder.PutUint32(uint32(self.Id))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxConjunction(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxConjunction, error) {
	actionnxconjunction := &ActionNxConjunction{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxConjunction packet too short: %d < 6", decoder.Length())
	}
	actionnxconjunction.Clause = uint8(decoder.ReadByte())
	actionnxconjunction.NClauses = uint8(decoder.ReadByte())
	actionnxconjunction.Id = uint32(decoder.ReadUint32())
	return actionnxconjunction, nil
}

func NewActionNxConjunction() *ActionNxConjunction {
	return &ActionNxConjunction{
		ActionNicira: NewActionNicira(34),
	}
}
func (self *ActionNxConjunction) GetName() string {
	return "nx_conjunction"
}

func (self *ActionNxConjunction) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Clause":   self.Clause,
		"NClauses": self.NClauses,
		"Id":       self.Id,
	}
}

type ActionNxController struct {
	*ActionNicira
	MaxLen       uint16
	ControllerId uint16
	Reason       uint8
}

func (self *ActionNxController) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.MaxLen))
	encoder.PutUint16(uint16(self.ControllerId))
	encoder.PutUint8(uint8(self.Reason))
	encoder.Write(bytes.Repeat([]byte{0}, 1))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxController(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxController, error) {
	actionnxcontroller := &ActionNxController{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxController packet too short: %d < 6", decoder.Length())
	}
	actionnxcontroller.MaxLen = uint16(decoder.ReadUint16())
	actionnxcontroller.ControllerId = uint16(decoder.ReadUint16())
	actionnxcontroller.Reason = uint8(decoder.ReadByte())
	decoder.Skip(1)
	return actionnxcontroller, nil
}

func NewActionNxController() *ActionNxController {
	return &ActionNxController{
		ActionNicira: NewActionNicira(20),
	}
}
func (self *ActionNxController) GetName() string {
	return "nx_controller"
}

func (self *ActionNxController) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"MaxLen":       self.MaxLen,
		"ControllerId": self.ControllerId,
		"Reason":       self.Reason,
	}
}

type ActionNxController2 struct {
	*ActionNicira
}

func (self *ActionNxController2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxController2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxController2, error) {
	actionnxcontroller2 := &ActionNxController2{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNxController2 packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(6)
	return actionnxcontroller2, nil
}

func NewActionNxController2() *ActionNxController2 {
	return &ActionNxController2{
		ActionNicira: NewActionNicira(37),
	}
}
func (self *ActionNxController2) GetName() string {
	return "nx_controller2"
}

func (self *ActionNxController2) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxCt struct {
	*ActionNicira
	Flags       uint16
	ZoneSrc     uint32
	Value       uint16
	RecircTable uint8
	Alg         uint16
}

func (self *ActionNxCt) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Flags))
	encoder.PutUint32(uint32(self.ZoneSrc))
	encoder.PutUint16(uint16(self.Value))
	encoder.PutUint8(uint8(self.RecircTable))
	encoder.Write(bytes.Repeat([]byte{0}, 3))
	encoder.PutUint16(uint16(self.Alg))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxCt(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxCt, error) {
	actionnxct := &ActionNxCt{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxCt packet too short: %d < 14", decoder.Length())
	}
	actionnxct.Flags = uint16(decoder.ReadUint16())
	actionnxct.ZoneSrc = uint32(decoder.ReadUint32())
	actionnxct.Value = uint16(decoder.ReadUint16())
	actionnxct.RecircTable = uint8(decoder.ReadByte())
	decoder.Skip(3)
	actionnxct.Alg = uint16(decoder.ReadUint16())
	return actionnxct, nil
}

func NewActionNxCt() *ActionNxCt {
	return &ActionNxCt{
		ActionNicira: NewActionNicira(35),
	}
}
func (self *ActionNxCt) GetName() string {
	return "nx_ct"
}

func (self *ActionNxCt) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Flags":       self.Flags,
		"ZoneSrc":     self.ZoneSrc,
		"Value":       self.Value,
		"RecircTable": self.RecircTable,
		"Alg":         self.Alg,
	}
}

type ActionNxCtClear struct {
	*ActionNicira
}

func (self *ActionNxCtClear) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxCtClear(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxCtClear, error) {
	actionnxctclear := &ActionNxCtClear{ActionNicira: parent}
	return actionnxctclear, nil
}

func NewActionNxCtClear() *ActionNxCtClear {
	return &ActionNxCtClear{
		ActionNicira: NewActionNicira(43),
	}
}
func (self *ActionNxCtClear) GetName() string {
	return "nx_ct_clear"
}

func (self *ActionNxCtClear) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxDebugRecirc struct {
	*ActionNicira
}

func (self *ActionNxDebugRecirc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxDebugRecirc(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxDebugRecirc, error) {
	actionnxdebugrecirc := &ActionNxDebugRecirc{ActionNicira: parent}
	return actionnxdebugrecirc, nil
}

func NewActionNxDebugRecirc() *ActionNxDebugRecirc {
	return &ActionNxDebugRecirc{
		ActionNicira: NewActionNicira(255),
	}
}
func (self *ActionNxDebugRecirc) GetName() string {
	return "nx_debug_recirc"
}

func (self *ActionNxDebugRecirc) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxDecTtlCntIds struct {
	*ActionNicira
	NControllers uint16
}

func (self *ActionNxDecTtlCntIds) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.NControllers))
	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxDecTtlCntIds(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxDecTtlCntIds, error) {
	actionnxdecttlcntids := &ActionNxDecTtlCntIds{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxDecTtlCntIds packet too short: %d < 6", decoder.Length())
	}
	actionnxdecttlcntids.NControllers = uint16(decoder.ReadUint16())
	decoder.Skip(4)
	return actionnxdecttlcntids, nil
}

func NewActionNxDecTtlCntIds() *ActionNxDecTtlCntIds {
	return &ActionNxDecTtlCntIds{
		ActionNicira: NewActionNicira(21),
	}
}
func (self *ActionNxDecTtlCntIds) GetName() string {
	return "nx_dec_ttl_cnt_ids"
}

func (self *ActionNxDecTtlCntIds) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NControllers": self.NControllers,
	}
}

type ActionNxDecap struct {
	*ActionNicira
	NewPktType uint32
}

func (self *ActionNxDecap) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.PutUint32(uint32(self.NewPktType))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxDecap(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxDecap, error) {
	actionnxdecap := &ActionNxDecap{ActionNicira: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionNxDecap packet too short: %d < 4", decoder.Length())
	}
	decoder.Skip(2)
	actionnxdecap.NewPktType = uint32(decoder.ReadUint32())
	return actionnxdecap, nil
}

func NewActionNxDecap() *ActionNxDecap {
	return &ActionNxDecap{
		ActionNicira: NewActionNicira(47),
	}
}
func (self *ActionNxDecap) GetName() string {
	return "nx_decap"
}

func (self *ActionNxDecap) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NewPktType": self.NewPktType,
	}
}

type ActionNxEncap struct {
	*ActionNicira
	HdrSize    uint16
	NewPktType uint32
	Props      []IEdPropHeader
}

func (self *ActionNxEncap) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.HdrSize))
	encoder.PutUint32(uint32(self.NewPktType))
	for _, obj := range self.Props {
		if err := obj.Serialize(encoder); err != nil {
			return err
		}
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxEncap(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxEncap, error) {
	actionnxencap := &ActionNxEncap{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxEncap packet too short: %d < 6", decoder.Length())
	}
	actionnxencap.HdrSize = uint16(decoder.ReadUint16())
	actionnxencap.NewPktType = uint32(decoder.ReadUint32())

	for decoder.Length() >= 4 {
		item := &EdPropHeader{}
		if err := item.Decode(decoder); err != nil {
			return nil, err
		}
		actionnxencap.Props = append(actionnxencap.Props, item)
	}
	return actionnxencap, nil
}

func NewActionNxEncap() *ActionNxEncap {
	return &ActionNxEncap{
		ActionNicira: NewActionNicira(46),
	}
}
func (self *ActionNxEncap) GetName() string {
	return "nx_encap"
}

func (self *ActionNxEncap) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"HdrSize":    self.HdrSize,
		"NewPktType": self.NewPktType,
		"Props":      self.Props,
	}
}

type ActionNxExit struct {
	*ActionNicira
}

func (self *ActionNxExit) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxExit(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxExit, error) {
	actionnxexit := &ActionNxExit{ActionNicira: parent}
	return actionnxexit, nil
}

func NewActionNxExit() *ActionNxExit {
	return &ActionNxExit{
		ActionNicira: NewActionNicira(17),
	}
}
func (self *ActionNxExit) GetName() string {
	return "nx_exit"
}

func (self *ActionNxExit) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxFinTimeout struct {
	*ActionNicira
	FinIdleTimeout uint16
	FinHardTimeout uint16
}

func (self *ActionNxFinTimeout) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.FinIdleTimeout))
	encoder.PutUint16(uint16(self.FinHardTimeout))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxFinTimeout(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxFinTimeout, error) {
	actionnxfintimeout := &ActionNxFinTimeout{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxFinTimeout packet too short: %d < 6", decoder.Length())
	}
	actionnxfintimeout.FinIdleTimeout = uint16(decoder.ReadUint16())
	actionnxfintimeout.FinHardTimeout = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return actionnxfintimeout, nil
}

func NewActionNxFinTimeout() *ActionNxFinTimeout {
	return &ActionNxFinTimeout{
		ActionNicira: NewActionNicira(19),
	}
}
func (self *ActionNxFinTimeout) GetName() string {
	return "nx_fin_timeout"
}

func (self *ActionNxFinTimeout) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"FinIdleTimeout": self.FinIdleTimeout,
		"FinHardTimeout": self.FinHardTimeout,
	}
}

type ActionNxLearn struct {
	*ActionNicira
	IdleTimeout    uint16
	HardTimeout    uint16
	Priority       uint16
	Cookie         uint64
	Flags          uint16
	TableId        uint8
	FinIdleTimeout uint16
	FinHardTimeout uint16
}

func (self *ActionNxLearn) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.IdleTimeout))
	encoder.PutUint16(uint16(self.HardTimeout))
	encoder.PutUint16(uint16(self.Priority))
	encoder.PutUint64(uint64(self.Cookie))
	encoder.PutUint16(uint16(self.Flags))
	encoder.PutUint8(uint8(self.TableId))
	encoder.Write(bytes.Repeat([]byte{0}, 1))
	encoder.PutUint16(uint16(self.FinIdleTimeout))
	encoder.PutUint16(uint16(self.FinHardTimeout))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxLearn(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxLearn, error) {
	actionnxlearn := &ActionNxLearn{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxLearn packet too short: %d < 22", decoder.Length())
	}
	actionnxlearn.IdleTimeout = uint16(decoder.ReadUint16())
	actionnxlearn.HardTimeout = uint16(decoder.ReadUint16())
	actionnxlearn.Priority = uint16(decoder.ReadUint16())
	actionnxlearn.Cookie = uint64(decoder.ReadUint64())
	actionnxlearn.Flags = uint16(decoder.ReadUint16())
	actionnxlearn.TableId = uint8(decoder.ReadByte())
	decoder.Skip(1)
	actionnxlearn.FinIdleTimeout = uint16(decoder.ReadUint16())
	actionnxlearn.FinHardTimeout = uint16(decoder.ReadUint16())
	return actionnxlearn, nil
}

func NewActionNxLearn() *ActionNxLearn {
	return &ActionNxLearn{
		ActionNicira: NewActionNicira(16),
	}
}
func (self *ActionNxLearn) GetName() string {
	return "nx_learn"
}

func (self *ActionNxLearn) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"IdleTimeout":    self.IdleTimeout,
		"HardTimeout":    self.HardTimeout,
		"Priority":       self.Priority,
		"Cookie":         self.Cookie,
		"Flags":          self.Flags,
		"TableId":        self.TableId,
		"FinIdleTimeout": self.FinIdleTimeout,
		"FinHardTimeout": self.FinHardTimeout,
	}
}

type ActionNxLearn2 struct {
	*ActionNicira
}

func (self *ActionNxLearn2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxLearn2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxLearn2, error) {
	actionnxlearn2 := &ActionNxLearn2{ActionNicira: parent}
	return actionnxlearn2, nil
}

func NewActionNxLearn2() *ActionNxLearn2 {
	return &ActionNxLearn2{
		ActionNicira: NewActionNicira(45),
	}
}
func (self *ActionNxLearn2) GetName() string {
	return "nx_learn2"
}

func (self *ActionNxLearn2) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxMultipath struct {
	*ActionNicira
	Fields    uint16
	Basis     uint16
	Algorithm uint16
	MaxLink   uint16
	Arg       uint32
	OfsNbits  uint16
	Dst       uint32
}

func (self *ActionNxMultipath) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Fields))
	encoder.PutUint16(uint16(self.Basis))
	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.PutUint16(uint16(self.Algorithm))
	encoder.PutUint16(uint16(self.MaxLink))
	encoder.PutUint32(uint32(self.Arg))
	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Dst))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxMultipath(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxMultipath, error) {
	actionnxmultipath := &ActionNxMultipath{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxMultipath packet too short: %d < 22", decoder.Length())
	}
	actionnxmultipath.Fields = uint16(decoder.ReadUint16())
	actionnxmultipath.Basis = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	actionnxmultipath.Algorithm = uint16(decoder.ReadUint16())
	actionnxmultipath.MaxLink = uint16(decoder.ReadUint16())
	actionnxmultipath.Arg = uint32(decoder.ReadUint32())
	decoder.Skip(2)
	actionnxmultipath.OfsNbits = uint16(decoder.ReadUint16())
	actionnxmultipath.Dst = uint32(decoder.ReadUint32())
	return actionnxmultipath, nil
}

func NewActionNxMultipath() *ActionNxMultipath {
	return &ActionNxMultipath{
		ActionNicira: NewActionNicira(10),
	}
}
func (self *ActionNxMultipath) GetName() string {
	return "nx_multipath"
}

func (self *ActionNxMultipath) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Fields":    self.Fields,
		"Basis":     self.Basis,
		"Algorithm": self.Algorithm,
		"MaxLink":   self.MaxLink,
		"Arg":       self.Arg,
		"OfsNbits":  self.OfsNbits,
		"Dst":       self.Dst,
	}
}

type ActionNxNat struct {
	*ActionNicira
	Flags        uint16
	RangePresent uint16
}

func (self *ActionNxNat) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 2))
	encoder.PutUint16(uint16(self.Flags))
	encoder.PutUint16(uint16(self.RangePresent))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxNat(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxNat, error) {
	actionnxnat := &ActionNxNat{ActionNicira: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionNxNat packet too short: %d < 4", decoder.Length())
	}
	decoder.Skip(2)
	actionnxnat.Flags = uint16(decoder.ReadUint16())
	actionnxnat.RangePresent = uint16(decoder.ReadUint16())
	return actionnxnat, nil
}

func NewActionNxNat() *ActionNxNat {
	return &ActionNxNat{
		ActionNicira: NewActionNicira(36),
	}
}
func (self *ActionNxNat) GetName() string {
	return "nx_nat"
}

func (self *ActionNxNat) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Flags":        self.Flags,
		"RangePresent": self.RangePresent,
	}
}

type ActionNxNote struct {
	*ActionNicira
	Note []byte
}

func (self *ActionNxNote) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(self.Note)

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxNote(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxNote, error) {
	actionnxnote := &ActionNxNote{ActionNicira: parent}
	actionnxnote.Note = decoder.Read(decoder.Length())
	return actionnxnote, nil
}

func NewActionNxNote() *ActionNxNote {
	return &ActionNxNote{
		ActionNicira: NewActionNicira(8),
	}
}
func (self *ActionNxNote) GetName() string {
	return "nx_note"
}

func (self *ActionNxNote) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Note": self.Note,
	}
}

type ActionNxOutputReg struct {
	*ActionNicira
	OfsNbits uint16
	Src      uint32
	MaxLen   uint16
}

func (self *ActionNxOutputReg) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Src))
	encoder.PutUint16(uint16(self.MaxLen))
	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxOutputReg(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxOutputReg, error) {
	actionnxoutputreg := &ActionNxOutputReg{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxOutputReg packet too short: %d < 14", decoder.Length())
	}
	actionnxoutputreg.OfsNbits = uint16(decoder.ReadUint16())
	actionnxoutputreg.Src = uint32(decoder.ReadUint32())
	actionnxoutputreg.MaxLen = uint16(decoder.ReadUint16())
	decoder.Skip(6)
	return actionnxoutputreg, nil
}

func NewActionNxOutputReg() *ActionNxOutputReg {
	return &ActionNxOutputReg{
		ActionNicira: NewActionNicira(15),
	}
}
func (self *ActionNxOutputReg) GetName() string {
	return "nx_output_reg"
}

func (self *ActionNxOutputReg) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"OfsNbits": self.OfsNbits,
		"Src":      self.Src,
		"MaxLen":   self.MaxLen,
	}
}

type ActionNxOutputReg2 struct {
	*ActionNicira
	OfsNbits uint16
	MaxLen   uint16
}

func (self *ActionNxOutputReg2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint16(uint16(self.MaxLen))
	encoder.Write(bytes.Repeat([]byte{0}, 10))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxOutputReg2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxOutputReg2, error) {
	actionnxoutputreg2 := &ActionNxOutputReg2{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxOutputReg2 packet too short: %d < 14", decoder.Length())
	}
	actionnxoutputreg2.OfsNbits = uint16(decoder.ReadUint16())
	actionnxoutputreg2.MaxLen = uint16(decoder.ReadUint16())
	decoder.Skip(10)
	return actionnxoutputreg2, nil
}

func NewActionNxOutputReg2() *ActionNxOutputReg2 {
	return &ActionNxOutputReg2{
		ActionNicira: NewActionNicira(32),
	}
}
func (self *ActionNxOutputReg2) GetName() string {
	return "nx_output_reg2"
}

func (self *ActionNxOutputReg2) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"OfsNbits": self.OfsNbits,
		"MaxLen":   self.MaxLen,
	}
}

type ActionNxOutputTrunc struct {
	*ActionNicira
	Port   uint16
	MaxLen uint32
}

func (self *ActionNxOutputTrunc) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Port))
	encoder.PutUint32(uint32(self.MaxLen))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxOutputTrunc(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxOutputTrunc, error) {
	actionnxoutputtrunc := &ActionNxOutputTrunc{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxOutputTrunc packet too short: %d < 6", decoder.Length())
	}
	actionnxoutputtrunc.Port = uint16(decoder.ReadUint16())
	actionnxoutputtrunc.MaxLen = uint32(decoder.ReadUint32())
	return actionnxoutputtrunc, nil
}

func NewActionNxOutputTrunc() *ActionNxOutputTrunc {
	return &ActionNxOutputTrunc{
		ActionNicira: NewActionNicira(39),
	}
}
func (self *ActionNxOutputTrunc) GetName() string {
	return "nx_output_trunc"
}

func (self *ActionNxOutputTrunc) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Port":   self.Port,
		"MaxLen": self.MaxLen,
	}
}

type ActionNxPopQueue struct {
	*ActionNicira
}

func (self *ActionNxPopQueue) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxPopQueue(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxPopQueue, error) {
	actionnxpopqueue := &ActionNxPopQueue{ActionNicira: parent}
	return actionnxpopqueue, nil
}

func NewActionNxPopQueue() *ActionNxPopQueue {
	return &ActionNxPopQueue{
		ActionNicira: NewActionNicira(5),
	}
}
func (self *ActionNxPopQueue) GetName() string {
	return "nx_pop_queue"
}

func (self *ActionNxPopQueue) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxRegLoad struct {
	*ActionNicira
	OfsNbits uint16
	Dst      uint32
	Value    uint64
}

func (self *ActionNxRegLoad) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.OfsNbits))
	encoder.PutUint32(uint32(self.Dst))
	encoder.PutUint64(uint64(self.Value))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxRegLoad(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxRegLoad, error) {
	actionnxregload := &ActionNxRegLoad{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxRegLoad packet too short: %d < 14", decoder.Length())
	}
	actionnxregload.OfsNbits = uint16(decoder.ReadUint16())
	actionnxregload.Dst = uint32(decoder.ReadUint32())
	actionnxregload.Value = uint64(decoder.ReadUint64())
	return actionnxregload, nil
}

func NewActionNxRegLoad() *ActionNxRegLoad {
	return &ActionNxRegLoad{
		ActionNicira: NewActionNicira(7),
	}
}
func (self *ActionNxRegLoad) GetName() string {
	return "nx_reg_load"
}

func (self *ActionNxRegLoad) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"OfsNbits": self.OfsNbits,
		"Dst":      self.Dst,
		"Value":    self.Value,
	}
}

type ActionNxRegLoad2 struct {
	*ActionNicira
}

func (self *ActionNxRegLoad2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxRegLoad2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxRegLoad2, error) {
	actionnxregload2 := &ActionNxRegLoad2{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNxRegLoad2 packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(6)
	return actionnxregload2, nil
}

func NewActionNxRegLoad2() *ActionNxRegLoad2 {
	return &ActionNxRegLoad2{
		ActionNicira: NewActionNicira(33),
	}
}
func (self *ActionNxRegLoad2) GetName() string {
	return "nx_reg_load2"
}

func (self *ActionNxRegLoad2) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionNxRegMove struct {
	*ActionNicira
	NBits  uint16
	SrcOfs uint16
	DstOfs uint16
}

func (self *ActionNxRegMove) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.NBits))
	encoder.PutUint16(uint16(self.SrcOfs))
	encoder.PutUint16(uint16(self.DstOfs))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxRegMove(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxRegMove, error) {
	actionnxregmove := &ActionNxRegMove{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxRegMove packet too short: %d < 6", decoder.Length())
	}
	actionnxregmove.NBits = uint16(decoder.ReadUint16())
	actionnxregmove.SrcOfs = uint16(decoder.ReadUint16())
	actionnxregmove.DstOfs = uint16(decoder.ReadUint16())
	return actionnxregmove, nil
}

func NewActionNxRegMove() *ActionNxRegMove {
	return &ActionNxRegMove{
		ActionNicira: NewActionNicira(6),
	}
}
func (self *ActionNxRegMove) GetName() string {
	return "nx_reg_move"
}

func (self *ActionNxRegMove) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NBits":  self.NBits,
		"SrcOfs": self.SrcOfs,
		"DstOfs": self.DstOfs,
	}
}

type ActionNxResubmit struct {
	*ActionNicira
	Value uint16
}

func (self *ActionNxResubmit) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Value))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxResubmit(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxResubmit, error) {
	actionnxresubmit := &ActionNxResubmit{ActionNicira: parent}
	if decoder.Length() < 2 {
		return nil, fmt.Errorf("ActionNxResubmit packet too short: %d < 2", decoder.Length())
	}
	actionnxresubmit.Value = uint16(decoder.ReadUint16())
	return actionnxresubmit, nil
}

func NewActionNxResubmit() *ActionNxResubmit {
	return &ActionNxResubmit{
		ActionNicira: NewActionNicira(1),
	}
}
func (self *ActionNxResubmit) GetName() string {
	return "nx_resubmit"
}

func (self *ActionNxResubmit) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Value": self.Value,
	}
}

type ActionNxResubmitTable struct {
	*ActionNicira
	InPort uint16
	Table  uint8
}

func (self *ActionNxResubmitTable) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.InPort))
	encoder.PutUint8(uint8(self.Table))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxResubmitTable(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxResubmitTable, error) {
	actionnxresubmittable := &ActionNxResubmitTable{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxResubmitTable packet too short: %d < 6", decoder.Length())
	}
	actionnxresubmittable.InPort = uint16(decoder.ReadUint16())
	actionnxresubmittable.Table = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return actionnxresubmittable, nil
}

func NewActionNxResubmitTable() *ActionNxResubmitTable {
	return &ActionNxResubmitTable{
		ActionNicira: NewActionNicira(14),
	}
}
func (self *ActionNxResubmitTable) GetName() string {
	return "nx_resubmit_table"
}

func (self *ActionNxResubmitTable) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"InPort": self.InPort,
		"Table":  self.Table,
	}
}

type ActionNxResubmitTableCt struct {
	*ActionNicira
	InPort uint16
	Table  uint8
}

func (self *ActionNxResubmitTableCt) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.InPort))
	encoder.PutUint8(uint8(self.Table))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxResubmitTableCt(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxResubmitTableCt, error) {
	actionnxresubmittablect := &ActionNxResubmitTableCt{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionNxResubmitTableCt packet too short: %d < 6", decoder.Length())
	}
	actionnxresubmittablect.InPort = uint16(decoder.ReadUint16())
	actionnxresubmittablect.Table = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return actionnxresubmittablect, nil
}

func NewActionNxResubmitTableCt() *ActionNxResubmitTableCt {
	return &ActionNxResubmitTableCt{
		ActionNicira: NewActionNicira(44),
	}
}
func (self *ActionNxResubmitTableCt) GetName() string {
	return "nx_resubmit_table_ct"
}

func (self *ActionNxResubmitTableCt) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"InPort": self.InPort,
		"Table":  self.Table,
	}
}

type ActionNxSample struct {
	*ActionNicira
	Probability    uint16
	CollectorSetId uint32
	ObsDomainId    uint32
	ObsPointId     uint32
}

func (self *ActionNxSample) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Probability))
	encoder.PutUint32(uint32(self.CollectorSetId))
	encoder.PutUint32(uint32(self.ObsDomainId))
	encoder.PutUint32(uint32(self.ObsPointId))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxSample(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSample, error) {
	actionnxsample := &ActionNxSample{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxSample packet too short: %d < 14", decoder.Length())
	}
	actionnxsample.Probability = uint16(decoder.ReadUint16())
	actionnxsample.CollectorSetId = uint32(decoder.ReadUint32())
	actionnxsample.ObsDomainId = uint32(decoder.ReadUint32())
	actionnxsample.ObsPointId = uint32(decoder.ReadUint32())
	return actionnxsample, nil
}

func NewActionNxSample() *ActionNxSample {
	return &ActionNxSample{
		ActionNicira: NewActionNicira(29),
	}
}
func (self *ActionNxSample) GetName() string {
	return "nx_sample"
}

func (self *ActionNxSample) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Probability":    self.Probability,
		"CollectorSetId": self.CollectorSetId,
		"ObsDomainId":    self.ObsDomainId,
		"ObsPointId":     self.ObsPointId,
	}
}

type ActionNxSample2 struct {
	*ActionNicira
	Probability    uint16
	CollectorSetId uint32
	ObsDomainId    uint32
	ObsPointId     uint32
	SamplingPort   uint16
	Direction      uint8
}

func (self *ActionNxSample2) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Probability))
	encoder.PutUint32(uint32(self.CollectorSetId))
	encoder.PutUint32(uint32(self.ObsDomainId))
	encoder.PutUint32(uint32(self.ObsPointId))
	encoder.PutUint16(uint16(self.SamplingPort))
	encoder.PutUint8(uint8(self.Direction))
	encoder.Write(bytes.Repeat([]byte{0}, 5))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxSample2(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSample2, error) {
	actionnxsample2 := &ActionNxSample2{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxSample2 packet too short: %d < 22", decoder.Length())
	}
	actionnxsample2.Probability = uint16(decoder.ReadUint16())
	actionnxsample2.CollectorSetId = uint32(decoder.ReadUint32())
	actionnxsample2.ObsDomainId = uint32(decoder.ReadUint32())
	actionnxsample2.ObsPointId = uint32(decoder.ReadUint32())
	actionnxsample2.SamplingPort = uint16(decoder.ReadUint16())
	actionnxsample2.Direction = uint8(decoder.ReadByte())
	decoder.Skip(5)
	return actionnxsample2, nil
}

func NewActionNxSample2() *ActionNxSample2 {
	return &ActionNxSample2{
		ActionNicira: NewActionNicira(38),
	}
}
func (self *ActionNxSample2) GetName() string {
	return "nx_sample2"
}

func (self *ActionNxSample2) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Probability":    self.Probability,
		"CollectorSetId": self.CollectorSetId,
		"ObsDomainId":    self.ObsDomainId,
		"ObsPointId":     self.ObsPointId,
		"SamplingPort":   self.SamplingPort,
		"Direction":      self.Direction,
	}
}

type ActionNxSample3 struct {
	*ActionNicira
	Probability    uint16
	CollectorSetId uint32
	ObsDomainId    uint32
	ObsPointId     uint32
	SamplingPort   uint16
	Direction      uint8
}

func (self *ActionNxSample3) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Probability))
	encoder.PutUint32(uint32(self.CollectorSetId))
	encoder.PutUint32(uint32(self.ObsDomainId))
	encoder.PutUint32(uint32(self.ObsPointId))
	encoder.PutUint16(uint16(self.SamplingPort))
	encoder.PutUint8(uint8(self.Direction))
	encoder.Write(bytes.Repeat([]byte{0}, 5))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxSample3(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSample3, error) {
	actionnxsample3 := &ActionNxSample3{ActionNicira: parent}
	if decoder.Length() < 22 {
		return nil, fmt.Errorf("ActionNxSample3 packet too short: %d < 22", decoder.Length())
	}
	actionnxsample3.Probability = uint16(decoder.ReadUint16())
	actionnxsample3.CollectorSetId = uint32(decoder.ReadUint32())
	actionnxsample3.ObsDomainId = uint32(decoder.ReadUint32())
	actionnxsample3.ObsPointId = uint32(decoder.ReadUint32())
	actionnxsample3.SamplingPort = uint16(decoder.ReadUint16())
	actionnxsample3.Direction = uint8(decoder.ReadByte())
	decoder.Skip(5)
	return actionnxsample3, nil
}

func NewActionNxSample3() *ActionNxSample3 {
	return &ActionNxSample3{
		ActionNicira: NewActionNicira(41),
	}
}
func (self *ActionNxSample3) GetName() string {
	return "nx_sample3"
}

func (self *ActionNxSample3) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Probability":    self.Probability,
		"CollectorSetId": self.CollectorSetId,
		"ObsDomainId":    self.ObsDomainId,
		"ObsPointId":     self.ObsPointId,
		"SamplingPort":   self.SamplingPort,
		"Direction":      self.Direction,
	}
}

type ActionNxSetTunnel struct {
	*ActionNicira
	Value uint32
}

func (self *ActionNxSetTunnel) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.Value))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxSetTunnel(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSetTunnel, error) {
	actionnxsettunnel := &ActionNxSetTunnel{ActionNicira: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionNxSetTunnel packet too short: %d < 4", decoder.Length())
	}
	actionnxsettunnel.Value = uint32(decoder.ReadUint32())
	return actionnxsettunnel, nil
}

func NewActionNxSetTunnel() *ActionNxSetTunnel {
	return &ActionNxSetTunnel{
		ActionNicira: NewActionNicira(2),
	}
}
func (self *ActionNxSetTunnel) GetName() string {
	return "nx_set_tunnel"
}

func (self *ActionNxSetTunnel) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Value": self.Value,
	}
}

type ActionNxSetTunnel64 struct {
	*ActionNicira
	Value uint64
}

func (self *ActionNxSetTunnel64) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint64(uint64(self.Value))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxSetTunnel64(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxSetTunnel64, error) {
	actionnxsettunnel64 := &ActionNxSetTunnel64{ActionNicira: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionNxSetTunnel64 packet too short: %d < 8", decoder.Length())
	}
	actionnxsettunnel64.Value = uint64(decoder.ReadUint64())
	return actionnxsettunnel64, nil
}

func NewActionNxSetTunnel64() *ActionNxSetTunnel64 {
	return &ActionNxSetTunnel64{
		ActionNicira: NewActionNicira(9),
	}
}
func (self *ActionNxSetTunnel64) GetName() string {
	return "nx_set_tunnel64"
}

func (self *ActionNxSetTunnel64) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Value": self.Value,
	}
}

type ActionNxStackPop struct {
	*ActionNicira
	Offset uint16
}

func (self *ActionNxStackPop) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Offset))
	encoder.Write(bytes.Repeat([]byte{0}, 12))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxStackPop(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxStackPop, error) {
	actionnxstackpop := &ActionNxStackPop{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxStackPop packet too short: %d < 14", decoder.Length())
	}
	actionnxstackpop.Offset = uint16(decoder.ReadUint16())
	decoder.Skip(12)
	return actionnxstackpop, nil
}

func NewActionNxStackPop() *ActionNxStackPop {
	return &ActionNxStackPop{
		ActionNicira: NewActionNicira(28),
	}
}
func (self *ActionNxStackPop) GetName() string {
	return "nx_stack_pop"
}

func (self *ActionNxStackPop) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Offset": self.Offset,
	}
}

type ActionNxStackPush struct {
	*ActionNicira
	Offset uint16
}

func (self *ActionNxStackPush) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Offset))
	encoder.Write(bytes.Repeat([]byte{0}, 12))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxStackPush(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxStackPush, error) {
	actionnxstackpush := &ActionNxStackPush{ActionNicira: parent}
	if decoder.Length() < 14 {
		return nil, fmt.Errorf("ActionNxStackPush packet too short: %d < 14", decoder.Length())
	}
	actionnxstackpush.Offset = uint16(decoder.ReadUint16())
	decoder.Skip(12)
	return actionnxstackpush, nil
}

func NewActionNxStackPush() *ActionNxStackPush {
	return &ActionNxStackPush{
		ActionNicira: NewActionNicira(27),
	}
}
func (self *ActionNxStackPush) GetName() string {
	return "nx_stack_push"
}

func (self *ActionNxStackPush) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Offset": self.Offset,
	}
}

type ActionNxWriteMetadata struct {
	*ActionNicira
	Metadata uint64
	Mask     uint64
}

func (self *ActionNxWriteMetadata) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 6))
	encoder.PutUint64(uint64(self.Metadata))
	encoder.PutUint64(uint64(self.Mask))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionNxWriteMetadata(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionNxWriteMetadata, error) {
	actionnxwritemetadata := &ActionNxWriteMetadata{ActionNicira: parent}
	if decoder.Length() < 16 {
		return nil, fmt.Errorf("ActionNxWriteMetadata packet too short: %d < 16", decoder.Length())
	}
	decoder.Skip(6)
	actionnxwritemetadata.Metadata = uint64(decoder.ReadUint64())
	actionnxwritemetadata.Mask = uint64(decoder.ReadUint64())
	return actionnxwritemetadata, nil
}

func NewActionNxWriteMetadata() *ActionNxWriteMetadata {
	return &ActionNxWriteMetadata{
		ActionNicira: NewActionNicira(22),
	}
}
func (self *ActionNxWriteMetadata) GetName() string {
	return "nx_write_metadata"
}

func (self *ActionNxWriteMetadata) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Metadata": self.Metadata,
		"Mask":     self.Mask,
	}
}

type ActionOutput struct {
	*Action
	Port   PortNo
	MaxLen uint16
}

func (self *ActionOutput) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	self.Port.Serialize(encoder)
	encoder.PutUint16(uint16(self.MaxLen))
	encoder.Write(bytes.Repeat([]byte{0}, 6))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionOutput(parent *Action, decoder *goloxi.Decoder) (*ActionOutput, error) {
	actionoutput := &ActionOutput{Action: parent}
	if decoder.Length() < 12 {
		return nil, fmt.Errorf("ActionOutput packet too short: %d < 12", decoder.Length())
	}
	actionoutput.Port.Decode(decoder)
	actionoutput.MaxLen = uint16(decoder.ReadUint16())
	decoder.Skip(6)
	return actionoutput, nil
}

func NewActionOutput() *ActionOutput {
	return &ActionOutput{
		Action: NewAction(0),
	}
}
func (self *ActionOutput) GetName() string {
	return "output"
}

func (self *ActionOutput) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Port":   self.Port,
		"MaxLen": self.MaxLen,
	}
}

type ActionPopMpls struct {
	*Action
	Ethertype uint16
}

func (self *ActionPopMpls) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Ethertype))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionPopMpls(parent *Action, decoder *goloxi.Decoder) (*ActionPopMpls, error) {
	actionpopmpls := &ActionPopMpls{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionPopMpls packet too short: %d < 4", decoder.Length())
	}
	actionpopmpls.Ethertype = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return actionpopmpls, nil
}

func NewActionPopMpls() *ActionPopMpls {
	return &ActionPopMpls{
		Action: NewAction(20),
	}
}
func (self *ActionPopMpls) GetName() string {
	return "pop_mpls"
}

func (self *ActionPopMpls) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Ethertype": self.Ethertype,
	}
}

type ActionPopVlan struct {
	*Action
}

func (self *ActionPopVlan) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.Write(bytes.Repeat([]byte{0}, 4))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionPopVlan(parent *Action, decoder *goloxi.Decoder) (*ActionPopVlan, error) {
	actionpopvlan := &ActionPopVlan{Action: parent}
	if decoder.Length() < 8 {
		return nil, fmt.Errorf("ActionPopVlan packet too short: %d < 8", decoder.Length())
	}
	decoder.Skip(4)
	return actionpopvlan, nil
}

func NewActionPopVlan() *ActionPopVlan {
	return &ActionPopVlan{
		Action: NewAction(18),
	}
}
func (self *ActionPopVlan) GetName() string {
	return "pop_vlan"
}

func (self *ActionPopVlan) GetFields() map[string]interface{} {
	return map[string]interface{}{}
}

type ActionPushMpls struct {
	*Action
	Ethertype uint16
}

func (self *ActionPushMpls) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Ethertype))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionPushMpls(parent *Action, decoder *goloxi.Decoder) (*ActionPushMpls, error) {
	actionpushmpls := &ActionPushMpls{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionPushMpls packet too short: %d < 4", decoder.Length())
	}
	actionpushmpls.Ethertype = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return actionpushmpls, nil
}

func NewActionPushMpls() *ActionPushMpls {
	return &ActionPushMpls{
		Action: NewAction(19),
	}
}
func (self *ActionPushMpls) GetName() string {
	return "push_mpls"
}

func (self *ActionPushMpls) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Ethertype": self.Ethertype,
	}
}

type ActionPushVlan struct {
	*Action
	Ethertype uint16
}

func (self *ActionPushVlan) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.Ethertype))
	encoder.Write(bytes.Repeat([]byte{0}, 2))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionPushVlan(parent *Action, decoder *goloxi.Decoder) (*ActionPushVlan, error) {
	actionpushvlan := &ActionPushVlan{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionPushVlan packet too short: %d < 4", decoder.Length())
	}
	actionpushvlan.Ethertype = uint16(decoder.ReadUint16())
	decoder.Skip(2)
	return actionpushvlan, nil
}

func NewActionPushVlan() *ActionPushVlan {
	return &ActionPushVlan{
		Action: NewAction(17),
	}
}
func (self *ActionPushVlan) GetName() string {
	return "push_vlan"
}

func (self *ActionPushVlan) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Ethertype": self.Ethertype,
	}
}

type ActionResubmit struct {
	*ActionNicira
	InPort uint16
	Table  uint8
}

func (self *ActionResubmit) Serialize(encoder *goloxi.Encoder) error {
	if err := self.ActionNicira.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint16(uint16(self.InPort))
	encoder.PutUint8(uint8(self.Table))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionResubmit(parent *ActionNicira, decoder *goloxi.Decoder) (*ActionResubmit, error) {
	actionresubmit := &ActionResubmit{ActionNicira: parent}
	if decoder.Length() < 6 {
		return nil, fmt.Errorf("ActionResubmit packet too short: %d < 6", decoder.Length())
	}
	actionresubmit.InPort = uint16(decoder.ReadUint16())
	actionresubmit.Table = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return actionresubmit, nil
}

func NewActionResubmit() *ActionResubmit {
	return &ActionResubmit{
		ActionNicira: NewActionNicira(14),
	}
}
func (self *ActionResubmit) GetName() string {
	return "resubmit"
}

func (self *ActionResubmit) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"InPort": self.InPort,
		"Table":  self.Table,
	}
}

type ActionSetField struct {
	*Action
	Field OXM
}

func (self *ActionSetField) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	self.Field.Serialize(encoder)

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionSetField(parent *Action, decoder *goloxi.Decoder) (*ActionSetField, error) {
	actionsetfield := &ActionSetField{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetField packet too short: %d < 4", decoder.Length())
	}
	actionsetfield.Field.Decode(decoder)
	return actionsetfield, nil
}

func NewActionSetField() *ActionSetField {
	return &ActionSetField{
		Action: NewAction(25),
	}
}
func (self *ActionSetField) GetName() string {
	return "set_field"
}

func (self *ActionSetField) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"Field": self.Field,
	}
}

type ActionSetMplsTtl struct {
	*Action
	MplsTtl uint8
}

func (self *ActionSetMplsTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.MplsTtl))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionSetMplsTtl(parent *Action, decoder *goloxi.Decoder) (*ActionSetMplsTtl, error) {
	actionsetmplsttl := &ActionSetMplsTtl{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetMplsTtl packet too short: %d < 4", decoder.Length())
	}
	actionsetmplsttl.MplsTtl = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return actionsetmplsttl, nil
}

func NewActionSetMplsTtl() *ActionSetMplsTtl {
	return &ActionSetMplsTtl{
		Action: NewAction(15),
	}
}
func (self *ActionSetMplsTtl) GetName() string {
	return "set_mpls_ttl"
}

func (self *ActionSetMplsTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"MplsTtl": self.MplsTtl,
	}
}

type ActionSetNwTtl struct {
	*Action
	NwTtl uint8
}

func (self *ActionSetNwTtl) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint8(uint8(self.NwTtl))
	encoder.Write(bytes.Repeat([]byte{0}, 3))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionSetNwTtl(parent *Action, decoder *goloxi.Decoder) (*ActionSetNwTtl, error) {
	actionsetnwttl := &ActionSetNwTtl{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetNwTtl packet too short: %d < 4", decoder.Length())
	}
	actionsetnwttl.NwTtl = uint8(decoder.ReadByte())
	decoder.Skip(3)
	return actionsetnwttl, nil
}

func NewActionSetNwTtl() *ActionSetNwTtl {
	return &ActionSetNwTtl{
		Action: NewAction(23),
	}
}
func (self *ActionSetNwTtl) GetName() string {
	return "set_nw_ttl"
}

func (self *ActionSetNwTtl) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"NwTtl": self.NwTtl,
	}
}

type ActionSetQueue struct {
	*Action
	QueueId uint32
}

func (self *ActionSetQueue) Serialize(encoder *goloxi.Encoder) error {
	if err := self.Action.Serialize(encoder); err != nil {
		return err
	}

	encoder.PutUint32(uint32(self.QueueId))

	// Overwrite length
	binary.BigEndian.PutUint16(encoder.Bytes()[2:4], uint16(len(encoder.Bytes())))

	return nil
}

func decodeActionSetQueue(parent *Action, decoder *goloxi.Decoder) (*ActionSetQueue, error) {
	actionsetqueue := &ActionSetQueue{Action: parent}
	if decoder.Length() < 4 {
		return nil, fmt.Errorf("ActionSetQueue packet too short: %d < 4", decoder.Length())
	}
	actionsetqueue.QueueId = uint32(decoder.ReadUint32())
	return actionsetqueue, nil
}

func NewActionSetQueue() *ActionSetQueue {
	return &ActionSetQueue{
		Action: NewAction(21),
	}
}
func (self *ActionSetQueue) GetName() string {
	return "set_queue"
}

func (self *ActionSetQueue) GetFields() map[string]interface{} {
	return map[string]interface{}{
		"QueueId": self.QueueId,
	}
}
