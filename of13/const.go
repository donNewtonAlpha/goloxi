/*
 * Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
 * Copyright (c) 2011, 2012 Open Networking Foundation
 * Copyright 2013, Big Switch Networks, Inc. This library was generated by the LoxiGen Compiler.
 * Copyright 2018, Red Hat, Inc.
 */
// Automatically generated by LOXI from template const.go
// Do not modify

package of13

import (
	"fmt"
	"strings"
)

const (
	// Identifiers from group macro_definitions
	MaxTableNameLen    = 32         // OFP_MAX_TABLE_NAME_LEN
	MaxPortNameLen     = 16         // OFP_MAX_PORT_NAME_LEN
	TCPPort            = 6653       // OFP_TCP_PORT
	SSLPort            = 6653       // OFP_SSL_PORT
	EthAlen            = 6          // OFP_ETH_ALEN
	DefaultMissSendLen = 128        // OFP_DEFAULT_MISS_SEND_LEN
	VLANNone           = 0          // OFP_VLAN_NONE
	FlowPermanent      = 0          // OFP_FLOW_PERMANENT
	DefaultPriority    = 32768      // OFP_DEFAULT_PRIORITY
	NoBuffer           = 4294967295 // OFP_NO_BUFFER
	DescStrLen         = 256        // DESC_STR_LEN
	SerialNumLen       = 32         // SERIAL_NUM_LEN
	OFPQAll            = 4294967295 // OFPQ_ALL
	OFPQMaxRateUncfg   = 65535      // OFPQ_MAX_RATE_UNCFG
	OFPQMinRateUncfg   = 65535      // OFPQ_MIN_RATE_UNCFG
)

const (
	// Identifiers from group nx_flow_monitor_flags
	NxfmfInitial = 1  // NXFMF_INITIAL
	NxfmfAdd     = 2  // NXFMF_ADD
	NxfmfDelete  = 4  // NXFMF_DELETE
	NxfmfModify  = 8  // NXFMF_MODIFY
	NxfmfActions = 16 // NXFMF_ACTIONS
	NxfmfOwn     = 32 // NXFMF_OWN
)

type NxFlowMonitorFlags uint16

func (self NxFlowMonitorFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&NxfmfInitial == NxfmfInitial {
		flags = append(flags, "\"NxfmfInitial\": true")
	}
	if self&NxfmfAdd == NxfmfAdd {
		flags = append(flags, "\"NxfmfAdd\": true")
	}
	if self&NxfmfDelete == NxfmfDelete {
		flags = append(flags, "\"NxfmfDelete\": true")
	}
	if self&NxfmfModify == NxfmfModify {
		flags = append(flags, "\"NxfmfModify\": true")
	}
	if self&NxfmfActions == NxfmfActions {
		flags = append(flags, "\"NxfmfActions\": true")
	}
	if self&NxfmfOwn == NxfmfOwn {
		flags = append(flags, "\"NxfmfOwn\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group of_bsn_gentable_error_code
	OFBSNGentableErrorUnknown   = 0 // OF_BSN_GENTABLE_ERROR_UNKNOWN
	OFBSNGentableErrorParam     = 1 // OF_BSN_GENTABLE_ERROR_PARAM
	OFBSNGentableErrorTableFull = 2 // OF_BSN_GENTABLE_ERROR_TABLE_FULL
)

type BsnGentableErrorCode uint16

func (self BsnGentableErrorCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFBSNGentableErrorUnknown:
		return []byte("\"OFBSNGentableErrorUnknown\""), nil
	case OFBSNGentableErrorParam:
		return []byte("\"OFBSNGentableErrorParam\""), nil
	case OFBSNGentableErrorTableFull:
		return []byte("\"OFBSNGentableErrorTableFull\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnGentableErrorCode", self)
	}
}

const (
	// Identifiers from group of_bsn_hash_gtp_port_match
	OFBSNHashGtpPortMatchSrc       = 1 // OF_BSN_HASH_GTP_PORT_MATCH_SRC
	OFBSNHashGtpPortMatchDst       = 2 // OF_BSN_HASH_GTP_PORT_MATCH_DST
	OFBSNHashGtpPortMatchSrcOrDst  = 3 // OF_BSN_HASH_GTP_PORT_MATCH_SRC_OR_DST
	OFBSNHashGtpPortMatchSrcAndDst = 4 // OF_BSN_HASH_GTP_PORT_MATCH_SRC_AND_DST
)

type BsnHashGtpPortMatch uint8

func (self BsnHashGtpPortMatch) MarshalJSON() ([]byte, error) {
	switch self {
	case OFBSNHashGtpPortMatchSrc:
		return []byte("\"OFBSNHashGtpPortMatchSrc\""), nil
	case OFBSNHashGtpPortMatchDst:
		return []byte("\"OFBSNHashGtpPortMatchDst\""), nil
	case OFBSNHashGtpPortMatchSrcOrDst:
		return []byte("\"OFBSNHashGtpPortMatchSrcOrDst\""), nil
	case OFBSNHashGtpPortMatchSrcAndDst:
		return []byte("\"OFBSNHashGtpPortMatchSrcAndDst\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnHashGtpPortMatch", self)
	}
}

const (
	// Identifiers from group of_bsn_hash_packet_field
	BSNHashFieldDstMAC           = 2      // OFP_BSN_HASH_FIELD_DST_MAC
	BSNHashFieldSrcMAC           = 4      // OFP_BSN_HASH_FIELD_SRC_MAC
	BSNHashFieldEthType          = 8      // OFP_BSN_HASH_FIELD_ETH_TYPE
	BSNHashFieldVLANID           = 16     // OFP_BSN_HASH_FIELD_VLAN_ID
	BSNHashFieldInnerL2          = 32     // OFP_BSN_HASH_FIELD_INNER_L2
	BSNHashFieldInnerL3          = 64     // OFP_BSN_HASH_FIELD_INNER_L3
	BSNHashFieldSrcIp            = 128    // OFP_BSN_HASH_FIELD_SRC_IP
	BSNHashFieldDstIp            = 256    // OFP_BSN_HASH_FIELD_DST_IP
	BSNHashFieldIpProto          = 512    // OFP_BSN_HASH_FIELD_IP_PROTO
	BSNHashFieldSrcL4Port        = 1024   // OFP_BSN_HASH_FIELD_SRC_L4_PORT
	BSNHashFieldDstL4Port        = 2048   // OFP_BSN_HASH_FIELD_DST_L4_PORT
	BSNHashFieldMplsLabel1       = 4096   // OFP_BSN_HASH_FIELD_MPLS_LABEL1
	BSNHashFieldMplsLabel2       = 8192   // OFP_BSN_HASH_FIELD_MPLS_LABEL2
	BSNHashFieldMplsLabel3       = 16384  // OFP_BSN_HASH_FIELD_MPLS_LABEL3
	BSNHashFieldMplsLabelHiBits  = 32768  // OFP_BSN_HASH_FIELD_MPLS_LABEL_HI_BITS
	BSNHashFieldMplsPayloadSrcIp = 65536  // OFP_BSN_HASH_FIELD_MPLS_PAYLOAD_SRC_IP
	BSNHashFieldMplsPayloadDstIp = 131072 // OFP_BSN_HASH_FIELD_MPLS_PAYLOAD_DST_IP
	BSNHashFieldSymmetric        = 262144 // OFP_BSN_HASH_FIELD_SYMMETRIC
)

type BsnHashPacketField uint64

func (self BsnHashPacketField) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNHashFieldDstMAC == BSNHashFieldDstMAC {
		flags = append(flags, "\"BSNHashFieldDstMAC\": true")
	}
	if self&BSNHashFieldSrcMAC == BSNHashFieldSrcMAC {
		flags = append(flags, "\"BSNHashFieldSrcMAC\": true")
	}
	if self&BSNHashFieldEthType == BSNHashFieldEthType {
		flags = append(flags, "\"BSNHashFieldEthType\": true")
	}
	if self&BSNHashFieldVLANID == BSNHashFieldVLANID {
		flags = append(flags, "\"BSNHashFieldVLANID\": true")
	}
	if self&BSNHashFieldInnerL2 == BSNHashFieldInnerL2 {
		flags = append(flags, "\"BSNHashFieldInnerL2\": true")
	}
	if self&BSNHashFieldInnerL3 == BSNHashFieldInnerL3 {
		flags = append(flags, "\"BSNHashFieldInnerL3\": true")
	}
	if self&BSNHashFieldSrcIp == BSNHashFieldSrcIp {
		flags = append(flags, "\"BSNHashFieldSrcIp\": true")
	}
	if self&BSNHashFieldDstIp == BSNHashFieldDstIp {
		flags = append(flags, "\"BSNHashFieldDstIp\": true")
	}
	if self&BSNHashFieldIpProto == BSNHashFieldIpProto {
		flags = append(flags, "\"BSNHashFieldIpProto\": true")
	}
	if self&BSNHashFieldSrcL4Port == BSNHashFieldSrcL4Port {
		flags = append(flags, "\"BSNHashFieldSrcL4Port\": true")
	}
	if self&BSNHashFieldDstL4Port == BSNHashFieldDstL4Port {
		flags = append(flags, "\"BSNHashFieldDstL4Port\": true")
	}
	if self&BSNHashFieldMplsLabel1 == BSNHashFieldMplsLabel1 {
		flags = append(flags, "\"BSNHashFieldMplsLabel1\": true")
	}
	if self&BSNHashFieldMplsLabel2 == BSNHashFieldMplsLabel2 {
		flags = append(flags, "\"BSNHashFieldMplsLabel2\": true")
	}
	if self&BSNHashFieldMplsLabel3 == BSNHashFieldMplsLabel3 {
		flags = append(flags, "\"BSNHashFieldMplsLabel3\": true")
	}
	if self&BSNHashFieldMplsLabelHiBits == BSNHashFieldMplsLabelHiBits {
		flags = append(flags, "\"BSNHashFieldMplsLabelHiBits\": true")
	}
	if self&BSNHashFieldMplsPayloadSrcIp == BSNHashFieldMplsPayloadSrcIp {
		flags = append(flags, "\"BSNHashFieldMplsPayloadSrcIp\": true")
	}
	if self&BSNHashFieldMplsPayloadDstIp == BSNHashFieldMplsPayloadDstIp {
		flags = append(flags, "\"BSNHashFieldMplsPayloadDstIp\": true")
	}
	if self&BSNHashFieldSymmetric == BSNHashFieldSymmetric {
		flags = append(flags, "\"BSNHashFieldSymmetric\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group of_bsn_hash_packet_type
	OFBSNHashPacketL2        = 0 // OF_BSN_HASH_PACKET_L2
	OFBSNHashPacketL2Gre     = 1 // OF_BSN_HASH_PACKET_L2GRE
	OFBSNHashPacketIpv4      = 3 // OF_BSN_HASH_PACKET_IPV4
	OFBSNHashPacketIpv6      = 4 // OF_BSN_HASH_PACKET_IPV6
	OFBSNHashPacketMpls      = 5 // OF_BSN_HASH_PACKET_MPLS
	OFBSNHashPacketSymmetric = 6 // OF_BSN_HASH_PACKET_SYMMETRIC
)

type BsnHashPacketType uint8

func (self BsnHashPacketType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFBSNHashPacketL2:
		return []byte("\"OFBSNHashPacketL2\""), nil
	case OFBSNHashPacketL2Gre:
		return []byte("\"OFBSNHashPacketL2Gre\""), nil
	case OFBSNHashPacketIpv4:
		return []byte("\"OFBSNHashPacketIpv4\""), nil
	case OFBSNHashPacketIpv6:
		return []byte("\"OFBSNHashPacketIpv6\""), nil
	case OFBSNHashPacketMpls:
		return []byte("\"OFBSNHashPacketMpls\""), nil
	case OFBSNHashPacketSymmetric:
		return []byte("\"OFBSNHashPacketSymmetric\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnHashPacketType", self)
	}
}

const (
	// Identifiers from group of_bsn_hash_type
	BSNHashTypeL2       = 0 // OFP_BSN_HASH_TYPE_L2
	BSNHashTypeL3       = 1 // OFP_BSN_HASH_TYPE_L3
	BSNHashTypeEnhanced = 2 // OFP_BSN_HASH_TYPE_ENHANCED
)

type BsnHashType uint8

func (self BsnHashType) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNHashTypeL2:
		return []byte("\"BSNHashTypeL2\""), nil
	case BSNHashTypeL3:
		return []byte("\"BSNHashTypeL3\""), nil
	case BSNHashTypeEnhanced:
		return []byte("\"BSNHashTypeEnhanced\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnHashType", self)
	}
}

const (
	// Identifiers from group of_bsn_lacp_convergence_status
	LacpSuccess   = 0 // LACP_SUCCESS
	LacpTimedout  = 1 // LACP_TIMEDOUT
	LacpOutOfSync = 2 // LACP_OUT_OF_SYNC
)

type BsnLacpConvergenceStatus uint8

func (self BsnLacpConvergenceStatus) MarshalJSON() ([]byte, error) {
	switch self {
	case LacpSuccess:
		return []byte("\"LacpSuccess\""), nil
	case LacpTimedout:
		return []byte("\"LacpTimedout\""), nil
	case LacpOutOfSync:
		return []byte("\"LacpOutOfSync\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnLacpConvergenceStatus", self)
	}
}

const (
	// Identifiers from group of_bsn_pdu_slot_num
	BsnPduSlotNumAny = 255 // BSN_PDU_SLOT_NUM_ANY
)

type BsnPduSlotNum uint8

func (self BsnPduSlotNum) MarshalJSON() ([]byte, error) {
	switch self {
	case BsnPduSlotNumAny:
		return []byte("\"BsnPduSlotNumAny\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnPduSlotNum", self)
	}
}

const (
	// Identifiers from group of_bsn_vlan_counter
	BSNVLANCounterRxBytes   = 0 // OFP_BSN_VLAN_COUNTER_RX_BYTES
	BSNVLANCounterRxPackets = 1 // OFP_BSN_VLAN_COUNTER_RX_PACKETS
	BSNVLANCounterTxBytes   = 2 // OFP_BSN_VLAN_COUNTER_TX_BYTES
	BSNVLANCounterTxPackets = 3 // OFP_BSN_VLAN_COUNTER_TX_PACKETS
)

type BsnVlanCounter uint8

func (self BsnVlanCounter) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNVLANCounterRxBytes:
		return []byte("\"BSNVLANCounterRxBytes\""), nil
	case BSNVLANCounterRxPackets:
		return []byte("\"BSNVLANCounterRxPackets\""), nil
	case BSNVLANCounterTxBytes:
		return []byte("\"BSNVLANCounterTxBytes\""), nil
	case BSNVLANCounterTxPackets:
		return []byte("\"BSNVLANCounterTxPackets\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnVlanCounter", self)
	}
}

const (
	// Identifiers from group of_bsn_vrf_counter
	BSNVrfCounterBytes   = 0 // OFP_BSN_VRF_COUNTER_BYTES
	BSNVrfCounterPackets = 1 // OFP_BSN_VRF_COUNTER_PACKETS
)

type BsnVrfCounter uint8

func (self BsnVrfCounter) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNVrfCounterBytes:
		return []byte("\"BSNVrfCounterBytes\""), nil
	case BSNVrfCounterPackets:
		return []byte("\"BSNVrfCounterPackets\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnVrfCounter", self)
	}
}

const (
	// Identifiers from group ofp_action_type
	OFPATOutput       = 0     // OFPAT_OUTPUT
	OFPATCopyTtlOut   = 11    // OFPAT_COPY_TTL_OUT
	OFPATCopyTtlIn    = 12    // OFPAT_COPY_TTL_IN
	OFPATSetMplsTtl   = 15    // OFPAT_SET_MPLS_TTL
	OFPATDecMplsTtl   = 16    // OFPAT_DEC_MPLS_TTL
	OFPATPushVLAN     = 17    // OFPAT_PUSH_VLAN
	OFPATPopVLAN      = 18    // OFPAT_POP_VLAN
	OFPATPushMpls     = 19    // OFPAT_PUSH_MPLS
	OFPATPopMpls      = 20    // OFPAT_POP_MPLS
	OFPATSetQueue     = 21    // OFPAT_SET_QUEUE
	OFPATGroup        = 22    // OFPAT_GROUP
	OFPATSetNwTtl     = 23    // OFPAT_SET_NW_TTL
	OFPATDecNwTtl     = 24    // OFPAT_DEC_NW_TTL
	OFPATSetField     = 25    // OFPAT_SET_FIELD
	OFPATPushPbb      = 26    // OFPAT_PUSH_PBB
	OFPATPopPbb       = 27    // OFPAT_POP_PBB
	OFPATExperimenter = 65535 // OFPAT_EXPERIMENTER
)

type ActionType uint16

func (self ActionType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPATOutput:
		return []byte("\"OFPATOutput\""), nil
	case OFPATCopyTtlOut:
		return []byte("\"OFPATCopyTtlOut\""), nil
	case OFPATCopyTtlIn:
		return []byte("\"OFPATCopyTtlIn\""), nil
	case OFPATSetMplsTtl:
		return []byte("\"OFPATSetMplsTtl\""), nil
	case OFPATDecMplsTtl:
		return []byte("\"OFPATDecMplsTtl\""), nil
	case OFPATPushVLAN:
		return []byte("\"OFPATPushVLAN\""), nil
	case OFPATPopVLAN:
		return []byte("\"OFPATPopVLAN\""), nil
	case OFPATPushMpls:
		return []byte("\"OFPATPushMpls\""), nil
	case OFPATPopMpls:
		return []byte("\"OFPATPopMpls\""), nil
	case OFPATSetQueue:
		return []byte("\"OFPATSetQueue\""), nil
	case OFPATGroup:
		return []byte("\"OFPATGroup\""), nil
	case OFPATSetNwTtl:
		return []byte("\"OFPATSetNwTtl\""), nil
	case OFPATDecNwTtl:
		return []byte("\"OFPATDecNwTtl\""), nil
	case OFPATSetField:
		return []byte("\"OFPATSetField\""), nil
	case OFPATPushPbb:
		return []byte("\"OFPATPushPbb\""), nil
	case OFPATPopPbb:
		return []byte("\"OFPATPopPbb\""), nil
	case OFPATExperimenter:
		return []byte("\"OFPATExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for ActionType", self)
	}
}

const (
	// Identifiers from group ofp_bad_action_code
	OFPBACBadType             = 0  // OFPBAC_BAD_TYPE
	OFPBACBadLen              = 1  // OFPBAC_BAD_LEN
	OFPBACBadExperimenter     = 2  // OFPBAC_BAD_EXPERIMENTER
	OFPBACBadExperimenterType = 3  // OFPBAC_BAD_EXPERIMENTER_TYPE
	OFPBACBadOutPort          = 4  // OFPBAC_BAD_OUT_PORT
	OFPBACBadArgument         = 5  // OFPBAC_BAD_ARGUMENT
	OFPBACEperm               = 6  // OFPBAC_EPERM
	OFPBACTooMany             = 7  // OFPBAC_TOO_MANY
	OFPBACBadQueue            = 8  // OFPBAC_BAD_QUEUE
	OFPBACBadOutGroup         = 9  // OFPBAC_BAD_OUT_GROUP
	OFPBACMatchInconsistent   = 10 // OFPBAC_MATCH_INCONSISTENT
	OFPBACUnsupportedOrder    = 11 // OFPBAC_UNSUPPORTED_ORDER
	OFPBACBadTag              = 12 // OFPBAC_BAD_TAG
	OFPBACBadSetType          = 13 // OFPBAC_BAD_SET_TYPE
	OFPBACBadSetLen           = 14 // OFPBAC_BAD_SET_LEN
	OFPBACBadSetArgument      = 15 // OFPBAC_BAD_SET_ARGUMENT
)

type BadActionCode uint16

func (self BadActionCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPBACBadType:
		return []byte("\"OFPBACBadType\""), nil
	case OFPBACBadLen:
		return []byte("\"OFPBACBadLen\""), nil
	case OFPBACBadExperimenter:
		return []byte("\"OFPBACBadExperimenter\""), nil
	case OFPBACBadExperimenterType:
		return []byte("\"OFPBACBadExperimenterType\""), nil
	case OFPBACBadOutPort:
		return []byte("\"OFPBACBadOutPort\""), nil
	case OFPBACBadArgument:
		return []byte("\"OFPBACBadArgument\""), nil
	case OFPBACEperm:
		return []byte("\"OFPBACEperm\""), nil
	case OFPBACTooMany:
		return []byte("\"OFPBACTooMany\""), nil
	case OFPBACBadQueue:
		return []byte("\"OFPBACBadQueue\""), nil
	case OFPBACBadOutGroup:
		return []byte("\"OFPBACBadOutGroup\""), nil
	case OFPBACMatchInconsistent:
		return []byte("\"OFPBACMatchInconsistent\""), nil
	case OFPBACUnsupportedOrder:
		return []byte("\"OFPBACUnsupportedOrder\""), nil
	case OFPBACBadTag:
		return []byte("\"OFPBACBadTag\""), nil
	case OFPBACBadSetType:
		return []byte("\"OFPBACBadSetType\""), nil
	case OFPBACBadSetLen:
		return []byte("\"OFPBACBadSetLen\""), nil
	case OFPBACBadSetArgument:
		return []byte("\"OFPBACBadSetArgument\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BadActionCode", self)
	}
}

const (
	// Identifiers from group ofp_bad_instruction_code
	OFPBICUnknownInst         = 0 // OFPBIC_UNKNOWN_INST
	OFPBICUnsupInst           = 1 // OFPBIC_UNSUP_INST
	OFPBICBadTableID          = 2 // OFPBIC_BAD_TABLE_ID
	OFPBICUnsupMetadata       = 3 // OFPBIC_UNSUP_METADATA
	OFPBICUnsupMetadataMask   = 4 // OFPBIC_UNSUP_METADATA_MASK
	OFPBICBadExperimenter     = 5 // OFPBIC_BAD_EXPERIMENTER
	OFPBICBadExperimenterType = 6 // OFPBIC_BAD_EXPERIMENTER_TYPE
	OFPBICBadLen              = 7 // OFPBIC_BAD_LEN
	OFPBICEperm               = 8 // OFPBIC_EPERM
)

type BadInstructionCode uint16

func (self BadInstructionCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPBICUnknownInst:
		return []byte("\"OFPBICUnknownInst\""), nil
	case OFPBICUnsupInst:
		return []byte("\"OFPBICUnsupInst\""), nil
	case OFPBICBadTableID:
		return []byte("\"OFPBICBadTableID\""), nil
	case OFPBICUnsupMetadata:
		return []byte("\"OFPBICUnsupMetadata\""), nil
	case OFPBICUnsupMetadataMask:
		return []byte("\"OFPBICUnsupMetadataMask\""), nil
	case OFPBICBadExperimenter:
		return []byte("\"OFPBICBadExperimenter\""), nil
	case OFPBICBadExperimenterType:
		return []byte("\"OFPBICBadExperimenterType\""), nil
	case OFPBICBadLen:
		return []byte("\"OFPBICBadLen\""), nil
	case OFPBICEperm:
		return []byte("\"OFPBICEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BadInstructionCode", self)
	}
}

const (
	// Identifiers from group ofp_bad_match_code
	OFPBMCBadType       = 0  // OFPBMC_BAD_TYPE
	OFPBMCBadLen        = 1  // OFPBMC_BAD_LEN
	OFPBMCBadTag        = 2  // OFPBMC_BAD_TAG
	OFPBMCBadDlAddrMask = 3  // OFPBMC_BAD_DL_ADDR_MASK
	OFPBMCBadNwAddrMask = 4  // OFPBMC_BAD_NW_ADDR_MASK
	OFPBMCBadWildcards  = 5  // OFPBMC_BAD_WILDCARDS
	OFPBMCBadField      = 6  // OFPBMC_BAD_FIELD
	OFPBMCBadValue      = 7  // OFPBMC_BAD_VALUE
	OFPBMCBadMask       = 8  // OFPBMC_BAD_MASK
	OFPBMCBadPrereq     = 9  // OFPBMC_BAD_PREREQ
	OFPBMCDupField      = 10 // OFPBMC_DUP_FIELD
	OFPBMCEperm         = 11 // OFPBMC_EPERM
)

type BadMatchCode uint16

func (self BadMatchCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPBMCBadType:
		return []byte("\"OFPBMCBadType\""), nil
	case OFPBMCBadLen:
		return []byte("\"OFPBMCBadLen\""), nil
	case OFPBMCBadTag:
		return []byte("\"OFPBMCBadTag\""), nil
	case OFPBMCBadDlAddrMask:
		return []byte("\"OFPBMCBadDlAddrMask\""), nil
	case OFPBMCBadNwAddrMask:
		return []byte("\"OFPBMCBadNwAddrMask\""), nil
	case OFPBMCBadWildcards:
		return []byte("\"OFPBMCBadWildcards\""), nil
	case OFPBMCBadField:
		return []byte("\"OFPBMCBadField\""), nil
	case OFPBMCBadValue:
		return []byte("\"OFPBMCBadValue\""), nil
	case OFPBMCBadMask:
		return []byte("\"OFPBMCBadMask\""), nil
	case OFPBMCBadPrereq:
		return []byte("\"OFPBMCBadPrereq\""), nil
	case OFPBMCDupField:
		return []byte("\"OFPBMCDupField\""), nil
	case OFPBMCEperm:
		return []byte("\"OFPBMCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BadMatchCode", self)
	}
}

const (
	// Identifiers from group ofp_bad_request_code
	OFPBRCBadVersion              = 0  // OFPBRC_BAD_VERSION
	OFPBRCBadType                 = 1  // OFPBRC_BAD_TYPE
	OFPBRCBadStat                 = 2  // OFPBRC_BAD_STAT
	OFPBRCBadExperimenter         = 3  // OFPBRC_BAD_EXPERIMENTER
	OFPBRCBadExperimenterType     = 4  // OFPBRC_BAD_EXPERIMENTER_TYPE
	OFPBRCEperm                   = 5  // OFPBRC_EPERM
	OFPBRCBadLen                  = 6  // OFPBRC_BAD_LEN
	OFPBRCBufferEmpty             = 7  // OFPBRC_BUFFER_EMPTY
	OFPBRCBufferUnknown           = 8  // OFPBRC_BUFFER_UNKNOWN
	OFPBRCBadTableID              = 9  // OFPBRC_BAD_TABLE_ID
	OFPBRCIsSlave                 = 10 // OFPBRC_IS_SLAVE
	OFPBRCBadPort                 = 11 // OFPBRC_BAD_PORT
	OFPBRCBadPacket               = 12 // OFPBRC_BAD_PACKET
	OFPBRCMultipartBufferOverflow = 13 // OFPBRC_MULTIPART_BUFFER_OVERFLOW
)

type BadRequestCode uint16

func (self BadRequestCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPBRCBadVersion:
		return []byte("\"OFPBRCBadVersion\""), nil
	case OFPBRCBadType:
		return []byte("\"OFPBRCBadType\""), nil
	case OFPBRCBadStat:
		return []byte("\"OFPBRCBadStat\""), nil
	case OFPBRCBadExperimenter:
		return []byte("\"OFPBRCBadExperimenter\""), nil
	case OFPBRCBadExperimenterType:
		return []byte("\"OFPBRCBadExperimenterType\""), nil
	case OFPBRCEperm:
		return []byte("\"OFPBRCEperm\""), nil
	case OFPBRCBadLen:
		return []byte("\"OFPBRCBadLen\""), nil
	case OFPBRCBufferEmpty:
		return []byte("\"OFPBRCBufferEmpty\""), nil
	case OFPBRCBufferUnknown:
		return []byte("\"OFPBRCBufferUnknown\""), nil
	case OFPBRCBadTableID:
		return []byte("\"OFPBRCBadTableID\""), nil
	case OFPBRCIsSlave:
		return []byte("\"OFPBRCIsSlave\""), nil
	case OFPBRCBadPort:
		return []byte("\"OFPBRCBadPort\""), nil
	case OFPBRCBadPacket:
		return []byte("\"OFPBRCBadPacket\""), nil
	case OFPBRCMultipartBufferOverflow:
		return []byte("\"OFPBRCMultipartBufferOverflow\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BadRequestCode", self)
	}
}

const (
	// Identifiers from group ofp_bsn_anchor
	BSNAnchorPacketStart    = 0 // OFP_BSN_ANCHOR_PACKET_START
	BSNAnchorL3HeaderStart  = 1 // OFP_BSN_ANCHOR_L3_HEADER_START
	BSNAnchorL4HeaderStart  = 2 // OFP_BSN_ANCHOR_L4_HEADER_START
	BSNAnchorL4PayloadStart = 3 // OFP_BSN_ANCHOR_L4_PAYLOAD_START
)

type BsnAnchor uint16

func (self BsnAnchor) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNAnchorPacketStart:
		return []byte("\"BSNAnchorPacketStart\""), nil
	case BSNAnchorL3HeaderStart:
		return []byte("\"BSNAnchorL3HeaderStart\""), nil
	case BSNAnchorL4HeaderStart:
		return []byte("\"BSNAnchorL4HeaderStart\""), nil
	case BSNAnchorL4PayloadStart:
		return []byte("\"BSNAnchorL4PayloadStart\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnAnchor", self)
	}
}

const (
	// Identifiers from group ofp_bsn_auto_negotiation_type
	BSNAutoNegotiationDefault = 0 // OFP_BSN_AUTO_NEGOTIATION_DEFAULT
	BSNAutoNegotiationEnable  = 1 // OFP_BSN_AUTO_NEGOTIATION_ENABLE
	BSNAutoNegotiationDisable = 2 // OFP_BSN_AUTO_NEGOTIATION_DISABLE
)

type BsnAutoNegotiationType uint8

func (self BsnAutoNegotiationType) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNAutoNegotiationDefault:
		return []byte("\"BSNAutoNegotiationDefault\""), nil
	case BSNAutoNegotiationEnable:
		return []byte("\"BSNAutoNegotiationEnable\""), nil
	case BSNAutoNegotiationDisable:
		return []byte("\"BSNAutoNegotiationDisable\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnAutoNegotiationType", self)
	}
}

const (
	// Identifiers from group ofp_bsn_bfd_endpoint
	BSNBfdUnused   = 0 // OFP_BSN_BFD_UNUSED
	BSNBfdMicro    = 1 // OFP_BSN_BFD_MICRO
	BSNBfd1Hop     = 2 // OFP_BSN_BFD_1_HOP
	BSNBfdMultiHop = 3 // OFP_BSN_BFD_MULTI_HOP
)

type BsnBfdEndpoint uint8

func (self BsnBfdEndpoint) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNBfdUnused:
		return []byte("\"BSNBfdUnused\""), nil
	case BSNBfdMicro:
		return []byte("\"BSNBfdMicro\""), nil
	case BSNBfd1Hop:
		return []byte("\"BSNBfd1Hop\""), nil
	case BSNBfdMultiHop:
		return []byte("\"BSNBfdMultiHop\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnBfdEndpoint", self)
	}
}

const (
	// Identifiers from group ofp_bsn_bfd_endpoint_state
	BSNBfdEndpointStateAdmindown  = 0 // OFP_BSN_BFD_ENDPOINT_STATE_ADMINDOWN
	BSNBfdEndpointStateDown       = 1 // OFP_BSN_BFD_ENDPOINT_STATE_DOWN
	BSNBfdEndpointStateInit       = 2 // OFP_BSN_BFD_ENDPOINT_STATE_INIT
	BSNBfdEndpointStateUp         = 3 // OFP_BSN_BFD_ENDPOINT_STATE_UP
	BSNBfdEndpointSessionError    = 4 // OFP_BSN_BFD_ENDPOINT_SESSION_ERROR
	BSNBfdEndpointRemoteAdmindown = 5 // OFP_BSN_BFD_ENDPOINT_REMOTE_ADMINDOWN
	BSNBfdEndpointParamsChange    = 6 // OFP_BSN_BFD_ENDPOINT_PARAMS_CHANGE
)

type BsnBfdEndpointState uint8

func (self BsnBfdEndpointState) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNBfdEndpointStateAdmindown:
		return []byte("\"BSNBfdEndpointStateAdmindown\""), nil
	case BSNBfdEndpointStateDown:
		return []byte("\"BSNBfdEndpointStateDown\""), nil
	case BSNBfdEndpointStateInit:
		return []byte("\"BSNBfdEndpointStateInit\""), nil
	case BSNBfdEndpointStateUp:
		return []byte("\"BSNBfdEndpointStateUp\""), nil
	case BSNBfdEndpointSessionError:
		return []byte("\"BSNBfdEndpointSessionError\""), nil
	case BSNBfdEndpointRemoteAdmindown:
		return []byte("\"BSNBfdEndpointRemoteAdmindown\""), nil
	case BSNBfdEndpointParamsChange:
		return []byte("\"BSNBfdEndpointParamsChange\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnBfdEndpointState", self)
	}
}

const (
	// Identifiers from group ofp_bsn_controller_connection_state
	BSNControllerConnectionStateDisconnected = 0 // OFP_BSN_CONTROLLER_CONNECTION_STATE_DISCONNECTED
	BSNControllerConnectionStateConnected    = 1 // OFP_BSN_CONTROLLER_CONNECTION_STATE_CONNECTED
)

type BsnControllerConnectionState uint8

func (self BsnControllerConnectionState) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNControllerConnectionStateDisconnected:
		return []byte("\"BSNControllerConnectionStateDisconnected\""), nil
	case BSNControllerConnectionStateConnected:
		return []byte("\"BSNControllerConnectionStateConnected\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnControllerConnectionState", self)
	}
}

const (
	// Identifiers from group ofp_bsn_controller_role_reason
	BSNControllerRoleReasonMasterRequest = 0 // OFP_BSN_CONTROLLER_ROLE_REASON_MASTER_REQUEST
	BSNControllerRoleReasonConfig        = 1 // OFP_BSN_CONTROLLER_ROLE_REASON_CONFIG
	BSNControllerRoleReasonExperimenter  = 2 // OFP_BSN_CONTROLLER_ROLE_REASON_EXPERIMENTER
)

type BsnControllerRoleReason uint8

func (self BsnControllerRoleReason) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNControllerRoleReasonMasterRequest:
		return []byte("\"BSNControllerRoleReasonMasterRequest\""), nil
	case BSNControllerRoleReasonConfig:
		return []byte("\"BSNControllerRoleReasonConfig\""), nil
	case BSNControllerRoleReasonExperimenter:
		return []byte("\"BSNControllerRoleReasonExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnControllerRoleReason", self)
	}
}

const (
	// Identifiers from group ofp_bsn_decap
	BSNDecapVxlan  = 0 // OFP_BSN_DECAP_VXLAN
	BSNDecapErspan = 1 // OFP_BSN_DECAP_ERSPAN
	BSNDecapL2GRE  = 2 // OFP_BSN_DECAP_L2_GRE
	BSNDecapNvgre  = 3 // OFP_BSN_DECAP_NVGRE
	BSNDecapCapwap = 4 // OFP_BSN_DECAP_CAPWAP
	BSNDecapL2Mpls = 5 // OFP_BSN_DECAP_L2_MPLS
	BSNDecapL3GRE  = 6 // OFP_BSN_DECAP_L3_GRE
	BSNDecapGtp    = 7 // OFP_BSN_DECAP_GTP
	BSNDecapL3Mpls = 8 // OFP_BSN_DECAP_L3_MPLS
)

type BsnDecap uint16

func (self BsnDecap) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNDecapVxlan:
		return []byte("\"BSNDecapVxlan\""), nil
	case BSNDecapErspan:
		return []byte("\"BSNDecapErspan\""), nil
	case BSNDecapL2GRE:
		return []byte("\"BSNDecapL2GRE\""), nil
	case BSNDecapNvgre:
		return []byte("\"BSNDecapNvgre\""), nil
	case BSNDecapCapwap:
		return []byte("\"BSNDecapCapwap\""), nil
	case BSNDecapL2Mpls:
		return []byte("\"BSNDecapL2Mpls\""), nil
	case BSNDecapL3GRE:
		return []byte("\"BSNDecapL3GRE\""), nil
	case BSNDecapGtp:
		return []byte("\"BSNDecapGtp\""), nil
	case BSNDecapL3Mpls:
		return []byte("\"BSNDecapL3Mpls\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnDecap", self)
	}
}

const (
	// Identifiers from group ofp_bsn_encap
	BSNEncapUnused  = 0 // OFP_BSN_ENCAP_UNUSED
	BSNEncapIpv4Udp = 1 // OFP_BSN_ENCAP_IPV4_UDP
	BSNEncapIpv6Udp = 2 // OFP_BSN_ENCAP_IPV6_UDP
)

type BsnEncap uint8

func (self BsnEncap) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNEncapUnused:
		return []byte("\"BSNEncapUnused\""), nil
	case BSNEncapIpv4Udp:
		return []byte("\"BSNEncapIpv4Udp\""), nil
	case BSNEncapIpv6Udp:
		return []byte("\"BSNEncapIpv6Udp\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnEncap", self)
	}
}

const (
	// Identifiers from group ofp_bsn_enhanced_hash_type
	BSNEnhancedHashL2        = 1  // OFP_BSN_ENHANCED_HASH_L2
	BSNEnhancedHashL3        = 2  // OFP_BSN_ENHANCED_HASH_L3
	BSNEnhancedHashL2Gre     = 4  // OFP_BSN_ENHANCED_HASH_L2GRE
	BSNEnhancedHashMpls      = 8  // OFP_BSN_ENHANCED_HASH_MPLS
	BSNEnhancedHashGtp       = 16 // OFP_BSN_ENHANCED_HASH_GTP
	BSNEnhancedHashSymmetric = 32 // OFP_BSN_ENHANCED_HASH_SYMMETRIC
)

type BsnEnhancedHashType uint64

func (self BsnEnhancedHashType) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNEnhancedHashL2 == BSNEnhancedHashL2 {
		flags = append(flags, "\"BSNEnhancedHashL2\": true")
	}
	if self&BSNEnhancedHashL3 == BSNEnhancedHashL3 {
		flags = append(flags, "\"BSNEnhancedHashL3\": true")
	}
	if self&BSNEnhancedHashL2Gre == BSNEnhancedHashL2Gre {
		flags = append(flags, "\"BSNEnhancedHashL2Gre\": true")
	}
	if self&BSNEnhancedHashMpls == BSNEnhancedHashMpls {
		flags = append(flags, "\"BSNEnhancedHashMpls\": true")
	}
	if self&BSNEnhancedHashGtp == BSNEnhancedHashGtp {
		flags = append(flags, "\"BSNEnhancedHashGtp\": true")
	}
	if self&BSNEnhancedHashSymmetric == BSNEnhancedHashSymmetric {
		flags = append(flags, "\"BSNEnhancedHashSymmetric\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_fabric_port_role
	BSNFabricPortRolePartitionedSpine = 1 // OFP_BSN_FABRIC_PORT_ROLE_PARTITIONED_SPINE
)

type BsnFabricPortRole uint16

func (self BsnFabricPortRole) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNFabricPortRolePartitionedSpine:
		return []byte("\"BSNFabricPortRolePartitionedSpine\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnFabricPortRole", self)
	}
}

const (
	// Identifiers from group ofp_bsn_flow_classifier
	BSNFlowClassifierNone        = 0 // OFP_BSN_FLOW_CLASSIFIER_NONE
	BSNFlowClassifierL2Bc        = 1 // OFP_BSN_FLOW_CLASSIFIER_L2BC
	BSNFlowClassifierL2Uc        = 2 // OFP_BSN_FLOW_CLASSIFIER_L2UC
	BSNFlowClassifierL2Unknown   = 3 // OFP_BSN_FLOW_CLASSIFIER_L2UNKNOWN
	BSNFlowClassifierL2Mcknown   = 4 // OFP_BSN_FLOW_CLASSIFIER_L2MCKNOWN
	BSNFlowClassifierL2Mcunknown = 5 // OFP_BSN_FLOW_CLASSIFIER_L2MCUNKNOWN
	BSNFlowClassifierL3Mcunknown = 6 // OFP_BSN_FLOW_CLASSIFIER_L3MCUNKNOWN
	BSNFlowClassifierL3Mcknown   = 7 // OFP_BSN_FLOW_CLASSIFIER_L3MCKNOWN
	BSNFlowClassifierL3Ucknown   = 8 // OFP_BSN_FLOW_CLASSIFIER_L3UCKNOWN
	BSNFlowClassifierL3Ucunknown = 9 // OFP_BSN_FLOW_CLASSIFIER_L3UCUNKNOWN
)

type BsnFlowClassifier uint16

func (self BsnFlowClassifier) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNFlowClassifierNone:
		return []byte("\"BSNFlowClassifierNone\""), nil
	case BSNFlowClassifierL2Bc:
		return []byte("\"BSNFlowClassifierL2Bc\""), nil
	case BSNFlowClassifierL2Uc:
		return []byte("\"BSNFlowClassifierL2Uc\""), nil
	case BSNFlowClassifierL2Unknown:
		return []byte("\"BSNFlowClassifierL2Unknown\""), nil
	case BSNFlowClassifierL2Mcknown:
		return []byte("\"BSNFlowClassifierL2Mcknown\""), nil
	case BSNFlowClassifierL2Mcunknown:
		return []byte("\"BSNFlowClassifierL2Mcunknown\""), nil
	case BSNFlowClassifierL3Mcunknown:
		return []byte("\"BSNFlowClassifierL3Mcunknown\""), nil
	case BSNFlowClassifierL3Mcknown:
		return []byte("\"BSNFlowClassifierL3Mcknown\""), nil
	case BSNFlowClassifierL3Ucknown:
		return []byte("\"BSNFlowClassifierL3Ucknown\""), nil
	case BSNFlowClassifierL3Ucunknown:
		return []byte("\"BSNFlowClassifierL3Ucunknown\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnFlowClassifier", self)
	}
}

const (
	// Identifiers from group ofp_bsn_forward_error_correction_type
	BSNForwardErrorCorrectionDefault = 0 // OFP_BSN_FORWARD_ERROR_CORRECTION_DEFAULT
	BSNForwardErrorCorrectionEnable  = 1 // OFP_BSN_FORWARD_ERROR_CORRECTION_ENABLE
	BSNForwardErrorCorrectionDisable = 2 // OFP_BSN_FORWARD_ERROR_CORRECTION_DISABLE
)

type BsnForwardErrorCorrectionType uint8

func (self BsnForwardErrorCorrectionType) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNForwardErrorCorrectionDefault:
		return []byte("\"BSNForwardErrorCorrectionDefault\""), nil
	case BSNForwardErrorCorrectionEnable:
		return []byte("\"BSNForwardErrorCorrectionEnable\""), nil
	case BSNForwardErrorCorrectionDisable:
		return []byte("\"BSNForwardErrorCorrectionDisable\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnForwardErrorCorrectionType", self)
	}
}

const (
	// Identifiers from group ofp_bsn_hash_algorithm_type
	BSNHashAlgorithmCrc16Xor8  = 0 // OFP_BSN_HASH_ALGORITHM_CRC16XOR8
	BSNHashAlgorithmCrc16Xor4  = 1 // OFP_BSN_HASH_ALGORITHM_CRC16XOR4
	BSNHashAlgorithmCrc16Xor2  = 2 // OFP_BSN_HASH_ALGORITHM_CRC16XOR2
	BSNHashAlgorithmCrc16Xor1  = 3 // OFP_BSN_HASH_ALGORITHM_CRC16XOR1
	BSNHashAlgorithmCrc16      = 4 // OFP_BSN_HASH_ALGORITHM_CRC16
	BSNHashAlgorithmXor16      = 5 // OFP_BSN_HASH_ALGORITHM_XOR16
	BSNHashAlgorithmCrc16Ccitt = 6 // OFP_BSN_HASH_ALGORITHM_CRC16CCITT
	BSNHashAlgorithmCrc32Lo    = 7 // OFP_BSN_HASH_ALGORITHM_CRC32LO
	BSNHashAlgorithmCrc32Hi    = 8 // OFP_BSN_HASH_ALGORITHM_CRC32HI
)

type BsnHashAlgorithmType uint16

func (self BsnHashAlgorithmType) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNHashAlgorithmCrc16Xor8:
		return []byte("\"BSNHashAlgorithmCrc16Xor8\""), nil
	case BSNHashAlgorithmCrc16Xor4:
		return []byte("\"BSNHashAlgorithmCrc16Xor4\""), nil
	case BSNHashAlgorithmCrc16Xor2:
		return []byte("\"BSNHashAlgorithmCrc16Xor2\""), nil
	case BSNHashAlgorithmCrc16Xor1:
		return []byte("\"BSNHashAlgorithmCrc16Xor1\""), nil
	case BSNHashAlgorithmCrc16:
		return []byte("\"BSNHashAlgorithmCrc16\""), nil
	case BSNHashAlgorithmXor16:
		return []byte("\"BSNHashAlgorithmXor16\""), nil
	case BSNHashAlgorithmCrc16Ccitt:
		return []byte("\"BSNHashAlgorithmCrc16Ccitt\""), nil
	case BSNHashAlgorithmCrc32Lo:
		return []byte("\"BSNHashAlgorithmCrc32Lo\""), nil
	case BSNHashAlgorithmCrc32Hi:
		return []byte("\"BSNHashAlgorithmCrc32Hi\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnHashAlgorithmType", self)
	}
}

const (
	// Identifiers from group ofp_bsn_hash_select_flags
	BSNHashSelectSrcIp = 1 // OFP_BSN_HASH_SELECT_SRC_IP
	BSNHashSelectDstIp = 2 // OFP_BSN_HASH_SELECT_DST_IP
)

type BsnHashSelectFlags uint32

func (self BsnHashSelectFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNHashSelectSrcIp == BSNHashSelectSrcIp {
		flags = append(flags, "\"BSNHashSelectSrcIp\": true")
	}
	if self&BSNHashSelectDstIp == BSNHashSelectDstIp {
		flags = append(flags, "\"BSNHashSelectDstIp\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_ip_tunnel_type
	BSNIpTunnelTypeNone = 0 // OFP_BSN_IP_TUNNEL_TYPE_NONE
	BSNIpTunnelTypePim  = 1 // OFP_BSN_IP_TUNNEL_TYPE_PIM
)

type BsnIpTunnelType uint16

func (self BsnIpTunnelType) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNIpTunnelTypeNone:
		return []byte("\"BSNIpTunnelTypeNone\""), nil
	case BSNIpTunnelTypePim:
		return []byte("\"BSNIpTunnelTypePim\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnIpTunnelType", self)
	}
}

const (
	// Identifiers from group ofp_bsn_lacp_state
	BSNLacpStateActivity        = 1   // OFP_BSN_LACP_STATE_ACTIVITY
	BSNLacpStateTimeout         = 2   // OFP_BSN_LACP_STATE_TIMEOUT
	BSNLacpStateAggregation     = 4   // OFP_BSN_LACP_STATE_AGGREGATION
	BSNLacpStateSynchronization = 8   // OFP_BSN_LACP_STATE_SYNCHRONIZATION
	BSNLacpStateCollecting      = 16  // OFP_BSN_LACP_STATE_COLLECTING
	BSNLacpStateDistributing    = 32  // OFP_BSN_LACP_STATE_DISTRIBUTING
	BSNLacpStateDefaulted       = 64  // OFP_BSN_LACP_STATE_DEFAULTED
	BSNLacpStateExpired         = 128 // OFP_BSN_LACP_STATE_EXPIRED
)

type BsnLacpState uint8

func (self BsnLacpState) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNLacpStateActivity == BSNLacpStateActivity {
		flags = append(flags, "\"BSNLacpStateActivity\": true")
	}
	if self&BSNLacpStateTimeout == BSNLacpStateTimeout {
		flags = append(flags, "\"BSNLacpStateTimeout\": true")
	}
	if self&BSNLacpStateAggregation == BSNLacpStateAggregation {
		flags = append(flags, "\"BSNLacpStateAggregation\": true")
	}
	if self&BSNLacpStateSynchronization == BSNLacpStateSynchronization {
		flags = append(flags, "\"BSNLacpStateSynchronization\": true")
	}
	if self&BSNLacpStateCollecting == BSNLacpStateCollecting {
		flags = append(flags, "\"BSNLacpStateCollecting\": true")
	}
	if self&BSNLacpStateDistributing == BSNLacpStateDistributing {
		flags = append(flags, "\"BSNLacpStateDistributing\": true")
	}
	if self&BSNLacpStateDefaulted == BSNLacpStateDefaulted {
		flags = append(flags, "\"BSNLacpStateDefaulted\": true")
	}
	if self&BSNLacpStateExpired == BSNLacpStateExpired {
		flags = append(flags, "\"BSNLacpStateExpired\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_lag_flag
	BSNLagFlagAutoRecovery = 1 // OFP_BSN_LAG_FLAG_AUTO_RECOVERY
)

type BsnLagFlag uint16

func (self BsnLagFlag) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNLagFlagAutoRecovery == BSNLagFlagAutoRecovery {
		flags = append(flags, "\"BSNLagFlagAutoRecovery\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_loglevel
	BSNLoglevelMsg     = 0 // OFP_BSN_LOGLEVEL_MSG
	BSNLoglevelError   = 1 // OFP_BSN_LOGLEVEL_ERROR
	BSNLoglevelWarn    = 2 // OFP_BSN_LOGLEVEL_WARN
	BSNLoglevelInfo    = 3 // OFP_BSN_LOGLEVEL_INFO
	BSNLoglevelVerbose = 4 // OFP_BSN_LOGLEVEL_VERBOSE
	BSNLoglevelTrace   = 5 // OFP_BSN_LOGLEVEL_TRACE
)

type BsnLoglevel uint8

func (self BsnLoglevel) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNLoglevelMsg:
		return []byte("\"BSNLoglevelMsg\""), nil
	case BSNLoglevelError:
		return []byte("\"BSNLoglevelError\""), nil
	case BSNLoglevelWarn:
		return []byte("\"BSNLoglevelWarn\""), nil
	case BSNLoglevelInfo:
		return []byte("\"BSNLoglevelInfo\""), nil
	case BSNLoglevelVerbose:
		return []byte("\"BSNLoglevelVerbose\""), nil
	case BSNLoglevelTrace:
		return []byte("\"BSNLoglevelTrace\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnLoglevel", self)
	}
}

const (
	// Identifiers from group ofp_bsn_loopback_mode
	BSNLoopbackModeNone      = 0 // OFP_BSN_LOOPBACK_MODE_NONE
	BSNLoopbackModeMAC       = 1 // OFP_BSN_LOOPBACK_MODE_MAC
	BSNLoopbackModePhy       = 2 // OFP_BSN_LOOPBACK_MODE_PHY
	BSNLoopbackModePhyRemote = 3 // OFP_BSN_LOOPBACK_MODE_PHY_REMOTE
)

type BsnLoopbackMode uint8

func (self BsnLoopbackMode) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNLoopbackModeNone:
		return []byte("\"BSNLoopbackModeNone\""), nil
	case BSNLoopbackModeMAC:
		return []byte("\"BSNLoopbackModeMAC\""), nil
	case BSNLoopbackModePhy:
		return []byte("\"BSNLoopbackModePhy\""), nil
	case BSNLoopbackModePhyRemote:
		return []byte("\"BSNLoopbackModePhyRemote\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnLoopbackMode", self)
	}
}

const (
	// Identifiers from group ofp_bsn_lua_upload_flags
	BSNLuaUploadMore  = 1 // OFP_BSN_LUA_UPLOAD_MORE
	BSNLuaUploadForce = 2 // OFP_BSN_LUA_UPLOAD_FORCE
)

type BsnLuaUploadFlags uint16

func (self BsnLuaUploadFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNLuaUploadMore == BSNLuaUploadMore {
		flags = append(flags, "\"BSNLuaUploadMore\": true")
	}
	if self&BSNLuaUploadForce == BSNLuaUploadForce {
		flags = append(flags, "\"BSNLuaUploadForce\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_multicast_packet
	BSNMulticastPacketNone         = 0 // OFP_BSN_MULTICAST_PACKET_NONE
	BSNMulticastPacketPimHello     = 1 // OFP_BSN_MULTICAST_PACKET_PIM_HELLO
	BSNMulticastPacketPimJoinPrune = 2 // OFP_BSN_MULTICAST_PACKET_PIM_JOIN_PRUNE
	BSNMulticastPacketPimAssert    = 3 // OFP_BSN_MULTICAST_PACKET_PIM_ASSERT
)

type BsnMulticastPacket uint16

func (self BsnMulticastPacket) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNMulticastPacketNone:
		return []byte("\"BSNMulticastPacketNone\""), nil
	case BSNMulticastPacketPimHello:
		return []byte("\"BSNMulticastPacketPimHello\""), nil
	case BSNMulticastPacketPimJoinPrune:
		return []byte("\"BSNMulticastPacketPimJoinPrune\""), nil
	case BSNMulticastPacketPimAssert:
		return []byte("\"BSNMulticastPacketPimAssert\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnMulticastPacket", self)
	}
}

const (
	// Identifiers from group ofp_bsn_pktin_flag
	BSNPktinFlagPdu             = 1       // OFP_BSN_PKTIN_FLAG_PDU
	BSNPktinFlagNewHost         = 2       // OFP_BSN_PKTIN_FLAG_NEW_HOST
	BSNPktinFlagStationMove     = 4       // OFP_BSN_PKTIN_FLAG_STATION_MOVE
	BSNPktinFlagARP             = 8       // OFP_BSN_PKTIN_FLAG_ARP
	BSNPktinFlagDhcp            = 16      // OFP_BSN_PKTIN_FLAG_DHCP
	BSNPktinFlagL2Cpu           = 32      // OFP_BSN_PKTIN_FLAG_L2_CPU
	BSNPktinFlagDebug           = 64      // OFP_BSN_PKTIN_FLAG_DEBUG
	BSNPktinFlagTtlExpired      = 128     // OFP_BSN_PKTIN_FLAG_TTL_EXPIRED
	BSNPktinFlagL3Miss          = 256     // OFP_BSN_PKTIN_FLAG_L3_MISS
	BSNPktinFlagL3Cpu           = 512     // OFP_BSN_PKTIN_FLAG_L3_CPU
	BSNPktinFlagIngressAcl      = 1024    // OFP_BSN_PKTIN_FLAG_INGRESS_ACL
	BSNPktinFlagSflow           = 2048    // OFP_BSN_PKTIN_FLAG_SFLOW
	BSNPktinFlagARPCache        = 4096    // OFP_BSN_PKTIN_FLAG_ARP_CACHE
	BSNPktinFlagARPTarget       = 8192    // OFP_BSN_PKTIN_FLAG_ARP_TARGET
	BSNPktinFlagIgmp            = 16384   // OFP_BSN_PKTIN_FLAG_IGMP
	BSNPktinFlagPim             = 32768   // OFP_BSN_PKTIN_FLAG_PIM
	BSNPktinFlagVxlanSipMiss    = 65536   // OFP_BSN_PKTIN_FLAG_VXLAN_SIP_MISS
	BSNPktinFlagMcReserved      = 131072  // OFP_BSN_PKTIN_FLAG_MC_RESERVED
	BSNPktinFlagAnalytics       = 262144  // OFP_BSN_PKTIN_FLAG_ANALYTICS
	BSNPktinFlagIcmpv6          = 524288  // OFP_BSN_PKTIN_FLAG_ICMPV6
	BSNPktinFlagIngressAclLocal = 1048576 // OFP_BSN_PKTIN_FLAG_INGRESS_ACL_LOCAL
	BSNPktinFlagIpmcMiss        = 2097152 // OFP_BSN_PKTIN_FLAG_IPMC_MISS
	BSNPktinFlagIpmcRpfFailed   = 4194304 // OFP_BSN_PKTIN_FLAG_IPMC_RPF_FAILED
	BSNPktinFlagBfdSlowpath     = 8388608 // OFP_BSN_PKTIN_FLAG_BFD_SLOWPATH
)

type BsnPktinFlag uint64

func (self BsnPktinFlag) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNPktinFlagPdu == BSNPktinFlagPdu {
		flags = append(flags, "\"BSNPktinFlagPdu\": true")
	}
	if self&BSNPktinFlagNewHost == BSNPktinFlagNewHost {
		flags = append(flags, "\"BSNPktinFlagNewHost\": true")
	}
	if self&BSNPktinFlagStationMove == BSNPktinFlagStationMove {
		flags = append(flags, "\"BSNPktinFlagStationMove\": true")
	}
	if self&BSNPktinFlagARP == BSNPktinFlagARP {
		flags = append(flags, "\"BSNPktinFlagARP\": true")
	}
	if self&BSNPktinFlagDhcp == BSNPktinFlagDhcp {
		flags = append(flags, "\"BSNPktinFlagDhcp\": true")
	}
	if self&BSNPktinFlagL2Cpu == BSNPktinFlagL2Cpu {
		flags = append(flags, "\"BSNPktinFlagL2Cpu\": true")
	}
	if self&BSNPktinFlagDebug == BSNPktinFlagDebug {
		flags = append(flags, "\"BSNPktinFlagDebug\": true")
	}
	if self&BSNPktinFlagTtlExpired == BSNPktinFlagTtlExpired {
		flags = append(flags, "\"BSNPktinFlagTtlExpired\": true")
	}
	if self&BSNPktinFlagL3Miss == BSNPktinFlagL3Miss {
		flags = append(flags, "\"BSNPktinFlagL3Miss\": true")
	}
	if self&BSNPktinFlagL3Cpu == BSNPktinFlagL3Cpu {
		flags = append(flags, "\"BSNPktinFlagL3Cpu\": true")
	}
	if self&BSNPktinFlagIngressAcl == BSNPktinFlagIngressAcl {
		flags = append(flags, "\"BSNPktinFlagIngressAcl\": true")
	}
	if self&BSNPktinFlagSflow == BSNPktinFlagSflow {
		flags = append(flags, "\"BSNPktinFlagSflow\": true")
	}
	if self&BSNPktinFlagARPCache == BSNPktinFlagARPCache {
		flags = append(flags, "\"BSNPktinFlagARPCache\": true")
	}
	if self&BSNPktinFlagARPTarget == BSNPktinFlagARPTarget {
		flags = append(flags, "\"BSNPktinFlagARPTarget\": true")
	}
	if self&BSNPktinFlagIgmp == BSNPktinFlagIgmp {
		flags = append(flags, "\"BSNPktinFlagIgmp\": true")
	}
	if self&BSNPktinFlagPim == BSNPktinFlagPim {
		flags = append(flags, "\"BSNPktinFlagPim\": true")
	}
	if self&BSNPktinFlagVxlanSipMiss == BSNPktinFlagVxlanSipMiss {
		flags = append(flags, "\"BSNPktinFlagVxlanSipMiss\": true")
	}
	if self&BSNPktinFlagMcReserved == BSNPktinFlagMcReserved {
		flags = append(flags, "\"BSNPktinFlagMcReserved\": true")
	}
	if self&BSNPktinFlagAnalytics == BSNPktinFlagAnalytics {
		flags = append(flags, "\"BSNPktinFlagAnalytics\": true")
	}
	if self&BSNPktinFlagIcmpv6 == BSNPktinFlagIcmpv6 {
		flags = append(flags, "\"BSNPktinFlagIcmpv6\": true")
	}
	if self&BSNPktinFlagIngressAclLocal == BSNPktinFlagIngressAclLocal {
		flags = append(flags, "\"BSNPktinFlagIngressAclLocal\": true")
	}
	if self&BSNPktinFlagIpmcMiss == BSNPktinFlagIpmcMiss {
		flags = append(flags, "\"BSNPktinFlagIpmcMiss\": true")
	}
	if self&BSNPktinFlagIpmcRpfFailed == BSNPktinFlagIpmcRpfFailed {
		flags = append(flags, "\"BSNPktinFlagIpmcRpfFailed\": true")
	}
	if self&BSNPktinFlagBfdSlowpath == BSNPktinFlagBfdSlowpath {
		flags = append(flags, "\"BSNPktinFlagBfdSlowpath\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_port_counter
	BSNPortCounterRxBytes                = 0  // OFP_BSN_PORT_COUNTER_RX_BYTES
	BSNPortCounterRxPacketsUnicast       = 1  // OFP_BSN_PORT_COUNTER_RX_PACKETS_UNICAST
	BSNPortCounterRxPacketsBroadcast     = 2  // OFP_BSN_PORT_COUNTER_RX_PACKETS_BROADCAST
	BSNPortCounterRxPacketsMulticast     = 3  // OFP_BSN_PORT_COUNTER_RX_PACKETS_MULTICAST
	BSNPortCounterRxDropped              = 4  // OFP_BSN_PORT_COUNTER_RX_DROPPED
	BSNPortCounterRxErrors               = 5  // OFP_BSN_PORT_COUNTER_RX_ERRORS
	BSNPortCounterTxBytes                = 6  // OFP_BSN_PORT_COUNTER_TX_BYTES
	BSNPortCounterTxPacketsUnicast       = 7  // OFP_BSN_PORT_COUNTER_TX_PACKETS_UNICAST
	BSNPortCounterTxPacketsBroadcast     = 8  // OFP_BSN_PORT_COUNTER_TX_PACKETS_BROADCAST
	BSNPortCounterTxPacketsMulticast     = 9  // OFP_BSN_PORT_COUNTER_TX_PACKETS_MULTICAST
	BSNPortCounterTxDropped              = 10 // OFP_BSN_PORT_COUNTER_TX_DROPPED
	BSNPortCounterTxErrors               = 11 // OFP_BSN_PORT_COUNTER_TX_ERRORS
	BSNPortCounterRxRunts                = 12 // OFP_BSN_PORT_COUNTER_RX_RUNTS
	BSNPortCounterRxGiants               = 13 // OFP_BSN_PORT_COUNTER_RX_GIANTS
	BSNPortCounterRxCrcErrors            = 14 // OFP_BSN_PORT_COUNTER_RX_CRC_ERRORS
	BSNPortCounterRxAlignmentErrors      = 15 // OFP_BSN_PORT_COUNTER_RX_ALIGNMENT_ERRORS
	BSNPortCounterRxSymbolErrors         = 16 // OFP_BSN_PORT_COUNTER_RX_SYMBOL_ERRORS
	BSNPortCounterRxPauseInput           = 17 // OFP_BSN_PORT_COUNTER_RX_PAUSE_INPUT
	BSNPortCounterTxCollisions           = 18 // OFP_BSN_PORT_COUNTER_TX_COLLISIONS
	BSNPortCounterTxLateCollisions       = 19 // OFP_BSN_PORT_COUNTER_TX_LATE_COLLISIONS
	BSNPortCounterTxDeferred             = 20 // OFP_BSN_PORT_COUNTER_TX_DEFERRED
	BSNPortCounterTxPauseOutput          = 21 // OFP_BSN_PORT_COUNTER_TX_PAUSE_OUTPUT
	BSNPortCounterRxPackets              = 22 // OFP_BSN_PORT_COUNTER_RX_PACKETS
	BSNPortCounterTxPackets              = 23 // OFP_BSN_PORT_COUNTER_TX_PACKETS
	BSNPortCounterRxLengthErrors         = 24 // OFP_BSN_PORT_COUNTER_RX_LENGTH_ERRORS
	BSNPortCounterRxOverflowErrors       = 25 // OFP_BSN_PORT_COUNTER_RX_OVERFLOW_ERRORS
	BSNPortCounterTxCarrierErrors        = 26 // OFP_BSN_PORT_COUNTER_TX_CARRIER_ERRORS
	BSNPortCounterRxPacketsBadVLAN       = 27 // OFP_BSN_PORT_COUNTER_RX_PACKETS_BAD_VLAN
	BSNPortCounterLinkUp                 = 28 // OFP_BSN_PORT_COUNTER_LINK_UP
	BSNPortCounterLinkDown               = 29 // OFP_BSN_PORT_COUNTER_LINK_DOWN
	BSNPortCounterRxPfcControlFrame      = 30 // OFP_BSN_PORT_COUNTER_RX_PFC_CONTROL_FRAME
	BSNPortCounterTxPfcControlFrame      = 31 // OFP_BSN_PORT_COUNTER_TX_PFC_CONTROL_FRAME
	BSNPortCounterRxPfcFrameXonPriority0 = 32 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_XON_PRIORITY_0
	BSNPortCounterRxPfcFrameXonPriority1 = 33 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_XON_PRIORITY_1
	BSNPortCounterRxPfcFrameXonPriority2 = 34 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_XON_PRIORITY_2
	BSNPortCounterRxPfcFrameXonPriority3 = 35 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_XON_PRIORITY_3
	BSNPortCounterRxPfcFrameXonPriority4 = 36 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_XON_PRIORITY_4
	BSNPortCounterRxPfcFrameXonPriority5 = 37 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_XON_PRIORITY_5
	BSNPortCounterRxPfcFrameXonPriority6 = 38 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_XON_PRIORITY_6
	BSNPortCounterRxPfcFrameXonPriority7 = 39 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_XON_PRIORITY_7
	BSNPortCounterRxPfcFramePriority0    = 40 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_PRIORITY_0
	BSNPortCounterRxPfcFramePriority1    = 41 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_PRIORITY_1
	BSNPortCounterRxPfcFramePriority2    = 42 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_PRIORITY_2
	BSNPortCounterRxPfcFramePriority3    = 43 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_PRIORITY_3
	BSNPortCounterRxPfcFramePriority4    = 44 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_PRIORITY_4
	BSNPortCounterRxPfcFramePriority5    = 45 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_PRIORITY_5
	BSNPortCounterRxPfcFramePriority6    = 46 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_PRIORITY_6
	BSNPortCounterRxPfcFramePriority7    = 47 // OFP_BSN_PORT_COUNTER_RX_PFC_FRAME_PRIORITY_7
	BSNPortCounterTxPfcFramePriority0    = 48 // OFP_BSN_PORT_COUNTER_TX_PFC_FRAME_PRIORITY_0
	BSNPortCounterTxPfcFramePriority1    = 49 // OFP_BSN_PORT_COUNTER_TX_PFC_FRAME_PRIORITY_1
	BSNPortCounterTxPfcFramePriority2    = 50 // OFP_BSN_PORT_COUNTER_TX_PFC_FRAME_PRIORITY_2
	BSNPortCounterTxPfcFramePriority3    = 51 // OFP_BSN_PORT_COUNTER_TX_PFC_FRAME_PRIORITY_3
	BSNPortCounterTxPfcFramePriority4    = 52 // OFP_BSN_PORT_COUNTER_TX_PFC_FRAME_PRIORITY_4
	BSNPortCounterTxPfcFramePriority5    = 53 // OFP_BSN_PORT_COUNTER_TX_PFC_FRAME_PRIORITY_5
	BSNPortCounterTxPfcFramePriority6    = 54 // OFP_BSN_PORT_COUNTER_TX_PFC_FRAME_PRIORITY_6
	BSNPortCounterTxPfcFramePriority7    = 55 // OFP_BSN_PORT_COUNTER_TX_PFC_FRAME_PRIORITY_7
)

type BsnPortCounter uint8

func (self BsnPortCounter) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNPortCounterRxBytes:
		return []byte("\"BSNPortCounterRxBytes\""), nil
	case BSNPortCounterRxPacketsUnicast:
		return []byte("\"BSNPortCounterRxPacketsUnicast\""), nil
	case BSNPortCounterRxPacketsBroadcast:
		return []byte("\"BSNPortCounterRxPacketsBroadcast\""), nil
	case BSNPortCounterRxPacketsMulticast:
		return []byte("\"BSNPortCounterRxPacketsMulticast\""), nil
	case BSNPortCounterRxDropped:
		return []byte("\"BSNPortCounterRxDropped\""), nil
	case BSNPortCounterRxErrors:
		return []byte("\"BSNPortCounterRxErrors\""), nil
	case BSNPortCounterTxBytes:
		return []byte("\"BSNPortCounterTxBytes\""), nil
	case BSNPortCounterTxPacketsUnicast:
		return []byte("\"BSNPortCounterTxPacketsUnicast\""), nil
	case BSNPortCounterTxPacketsBroadcast:
		return []byte("\"BSNPortCounterTxPacketsBroadcast\""), nil
	case BSNPortCounterTxPacketsMulticast:
		return []byte("\"BSNPortCounterTxPacketsMulticast\""), nil
	case BSNPortCounterTxDropped:
		return []byte("\"BSNPortCounterTxDropped\""), nil
	case BSNPortCounterTxErrors:
		return []byte("\"BSNPortCounterTxErrors\""), nil
	case BSNPortCounterRxRunts:
		return []byte("\"BSNPortCounterRxRunts\""), nil
	case BSNPortCounterRxGiants:
		return []byte("\"BSNPortCounterRxGiants\""), nil
	case BSNPortCounterRxCrcErrors:
		return []byte("\"BSNPortCounterRxCrcErrors\""), nil
	case BSNPortCounterRxAlignmentErrors:
		return []byte("\"BSNPortCounterRxAlignmentErrors\""), nil
	case BSNPortCounterRxSymbolErrors:
		return []byte("\"BSNPortCounterRxSymbolErrors\""), nil
	case BSNPortCounterRxPauseInput:
		return []byte("\"BSNPortCounterRxPauseInput\""), nil
	case BSNPortCounterTxCollisions:
		return []byte("\"BSNPortCounterTxCollisions\""), nil
	case BSNPortCounterTxLateCollisions:
		return []byte("\"BSNPortCounterTxLateCollisions\""), nil
	case BSNPortCounterTxDeferred:
		return []byte("\"BSNPortCounterTxDeferred\""), nil
	case BSNPortCounterTxPauseOutput:
		return []byte("\"BSNPortCounterTxPauseOutput\""), nil
	case BSNPortCounterRxPackets:
		return []byte("\"BSNPortCounterRxPackets\""), nil
	case BSNPortCounterTxPackets:
		return []byte("\"BSNPortCounterTxPackets\""), nil
	case BSNPortCounterRxLengthErrors:
		return []byte("\"BSNPortCounterRxLengthErrors\""), nil
	case BSNPortCounterRxOverflowErrors:
		return []byte("\"BSNPortCounterRxOverflowErrors\""), nil
	case BSNPortCounterTxCarrierErrors:
		return []byte("\"BSNPortCounterTxCarrierErrors\""), nil
	case BSNPortCounterRxPacketsBadVLAN:
		return []byte("\"BSNPortCounterRxPacketsBadVLAN\""), nil
	case BSNPortCounterLinkUp:
		return []byte("\"BSNPortCounterLinkUp\""), nil
	case BSNPortCounterLinkDown:
		return []byte("\"BSNPortCounterLinkDown\""), nil
	case BSNPortCounterRxPfcControlFrame:
		return []byte("\"BSNPortCounterRxPfcControlFrame\""), nil
	case BSNPortCounterTxPfcControlFrame:
		return []byte("\"BSNPortCounterTxPfcControlFrame\""), nil
	case BSNPortCounterRxPfcFrameXonPriority0:
		return []byte("\"BSNPortCounterRxPfcFrameXonPriority0\""), nil
	case BSNPortCounterRxPfcFrameXonPriority1:
		return []byte("\"BSNPortCounterRxPfcFrameXonPriority1\""), nil
	case BSNPortCounterRxPfcFrameXonPriority2:
		return []byte("\"BSNPortCounterRxPfcFrameXonPriority2\""), nil
	case BSNPortCounterRxPfcFrameXonPriority3:
		return []byte("\"BSNPortCounterRxPfcFrameXonPriority3\""), nil
	case BSNPortCounterRxPfcFrameXonPriority4:
		return []byte("\"BSNPortCounterRxPfcFrameXonPriority4\""), nil
	case BSNPortCounterRxPfcFrameXonPriority5:
		return []byte("\"BSNPortCounterRxPfcFrameXonPriority5\""), nil
	case BSNPortCounterRxPfcFrameXonPriority6:
		return []byte("\"BSNPortCounterRxPfcFrameXonPriority6\""), nil
	case BSNPortCounterRxPfcFrameXonPriority7:
		return []byte("\"BSNPortCounterRxPfcFrameXonPriority7\""), nil
	case BSNPortCounterRxPfcFramePriority0:
		return []byte("\"BSNPortCounterRxPfcFramePriority0\""), nil
	case BSNPortCounterRxPfcFramePriority1:
		return []byte("\"BSNPortCounterRxPfcFramePriority1\""), nil
	case BSNPortCounterRxPfcFramePriority2:
		return []byte("\"BSNPortCounterRxPfcFramePriority2\""), nil
	case BSNPortCounterRxPfcFramePriority3:
		return []byte("\"BSNPortCounterRxPfcFramePriority3\""), nil
	case BSNPortCounterRxPfcFramePriority4:
		return []byte("\"BSNPortCounterRxPfcFramePriority4\""), nil
	case BSNPortCounterRxPfcFramePriority5:
		return []byte("\"BSNPortCounterRxPfcFramePriority5\""), nil
	case BSNPortCounterRxPfcFramePriority6:
		return []byte("\"BSNPortCounterRxPfcFramePriority6\""), nil
	case BSNPortCounterRxPfcFramePriority7:
		return []byte("\"BSNPortCounterRxPfcFramePriority7\""), nil
	case BSNPortCounterTxPfcFramePriority0:
		return []byte("\"BSNPortCounterTxPfcFramePriority0\""), nil
	case BSNPortCounterTxPfcFramePriority1:
		return []byte("\"BSNPortCounterTxPfcFramePriority1\""), nil
	case BSNPortCounterTxPfcFramePriority2:
		return []byte("\"BSNPortCounterTxPfcFramePriority2\""), nil
	case BSNPortCounterTxPfcFramePriority3:
		return []byte("\"BSNPortCounterTxPfcFramePriority3\""), nil
	case BSNPortCounterTxPfcFramePriority4:
		return []byte("\"BSNPortCounterTxPfcFramePriority4\""), nil
	case BSNPortCounterTxPfcFramePriority5:
		return []byte("\"BSNPortCounterTxPfcFramePriority5\""), nil
	case BSNPortCounterTxPfcFramePriority6:
		return []byte("\"BSNPortCounterTxPfcFramePriority6\""), nil
	case BSNPortCounterTxPfcFramePriority7:
		return []byte("\"BSNPortCounterTxPfcFramePriority7\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnPortCounter", self)
	}
}

const (
	// Identifiers from group ofp_bsn_port_mode
	BSNPortModeNone  = 0  // OFP_BSN_PORT_MODE_NONE
	BSNPortMode4Xx   = 1  // OFP_BSN_PORT_MODE_4XX
	BSNPortMode4X1   = 2  // OFP_BSN_PORT_MODE_4X1
	BSNPortMode4X10  = 3  // OFP_BSN_PORT_MODE_4X10
	BSNPortMode4X25  = 4  // OFP_BSN_PORT_MODE_4X25
	BSNPortMode2X50  = 5  // OFP_BSN_PORT_MODE_2X50
	BSNPortMode1X1   = 6  // OFP_BSN_PORT_MODE_1X1
	BSNPortMode1X10  = 7  // OFP_BSN_PORT_MODE_1X10
	BSNPortMode1X25  = 8  // OFP_BSN_PORT_MODE_1X25
	BSNPortMode1X40  = 9  // OFP_BSN_PORT_MODE_1X40
	BSNPortMode1X100 = 10 // OFP_BSN_PORT_MODE_1X100
)

type BsnPortMode uint16

func (self BsnPortMode) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNPortModeNone:
		return []byte("\"BSNPortModeNone\""), nil
	case BSNPortMode4Xx:
		return []byte("\"BSNPortMode4Xx\""), nil
	case BSNPortMode4X1:
		return []byte("\"BSNPortMode4X1\""), nil
	case BSNPortMode4X10:
		return []byte("\"BSNPortMode4X10\""), nil
	case BSNPortMode4X25:
		return []byte("\"BSNPortMode4X25\""), nil
	case BSNPortMode2X50:
		return []byte("\"BSNPortMode2X50\""), nil
	case BSNPortMode1X1:
		return []byte("\"BSNPortMode1X1\""), nil
	case BSNPortMode1X10:
		return []byte("\"BSNPortMode1X10\""), nil
	case BSNPortMode1X25:
		return []byte("\"BSNPortMode1X25\""), nil
	case BSNPortMode1X40:
		return []byte("\"BSNPortMode1X40\""), nil
	case BSNPortMode1X100:
		return []byte("\"BSNPortMode1X100\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnPortMode", self)
	}
}

const (
	// Identifiers from group ofp_bsn_port_speed_gbps_type
	BSNPortSpeedGbps1   = 1   // OFP_BSN_PORT_SPEED_GBPS_1
	BSNPortSpeedGbps10  = 10  // OFP_BSN_PORT_SPEED_GBPS_10
	BSNPortSpeedGbps25  = 25  // OFP_BSN_PORT_SPEED_GBPS_25
	BSNPortSpeedGbps40  = 40  // OFP_BSN_PORT_SPEED_GBPS_40
	BSNPortSpeedGbps50  = 50  // OFP_BSN_PORT_SPEED_GBPS_50
	BSNPortSpeedGbps100 = 100 // OFP_BSN_PORT_SPEED_GBPS_100
)

type BsnPortSpeedGbpsType uint32

func (self BsnPortSpeedGbpsType) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNPortSpeedGbps1:
		return []byte("\"BSNPortSpeedGbps1\""), nil
	case BSNPortSpeedGbps10:
		return []byte("\"BSNPortSpeedGbps10\""), nil
	case BSNPortSpeedGbps25:
		return []byte("\"BSNPortSpeedGbps25\""), nil
	case BSNPortSpeedGbps40:
		return []byte("\"BSNPortSpeedGbps40\""), nil
	case BSNPortSpeedGbps50:
		return []byte("\"BSNPortSpeedGbps50\""), nil
	case BSNPortSpeedGbps100:
		return []byte("\"BSNPortSpeedGbps100\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnPortSpeedGbpsType", self)
	}
}

const (
	// Identifiers from group ofp_bsn_port_usage
	BSNPortUnused       = 0 // OFP_BSN_PORT_UNUSED
	BSNPortTransmitOnly = 1 // OFP_BSN_PORT_TRANSMIT_ONLY
	BSNPortReceiveOnly  = 2 // OFP_BSN_PORT_RECEIVE_ONLY
	BSNPortBidirection  = 3 // OFP_BSN_PORT_BIDIRECTION
)

type BsnPortUsage uint16

func (self BsnPortUsage) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNPortUnused:
		return []byte("\"BSNPortUnused\""), nil
	case BSNPortTransmitOnly:
		return []byte("\"BSNPortTransmitOnly\""), nil
	case BSNPortReceiveOnly:
		return []byte("\"BSNPortReceiveOnly\""), nil
	case BSNPortBidirection:
		return []byte("\"BSNPortBidirection\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnPortUsage", self)
	}
}

const (
	// Identifiers from group ofp_bsn_port_vxlan_mode
	BSNPortVxlanRecirculationEnable = 0 // OFP_BSN_PORT_VXLAN_RECIRCULATION_ENABLE
	BSNPortVxlanTerminationEnable   = 1 // OFP_BSN_PORT_VXLAN_TERMINATION_ENABLE
)

type BsnPortVxlanMode uint8

func (self BsnPortVxlanMode) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNPortVxlanRecirculationEnable:
		return []byte("\"BSNPortVxlanRecirculationEnable\""), nil
	case BSNPortVxlanTerminationEnable:
		return []byte("\"BSNPortVxlanTerminationEnable\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnPortVxlanMode", self)
	}
}

const (
	// Identifiers from group ofp_bsn_push_vlan
	BSNPushVLANUntagged     = 1 // OFP_BSN_PUSH_VLAN_UNTAGGED
	BSNPushVLANSingleTagged = 2 // OFP_BSN_PUSH_VLAN_SINGLE_TAGGED
	BSNPushVLANDoubleTagged = 4 // OFP_BSN_PUSH_VLAN_DOUBLE_TAGGED
)

type BsnPushVlan uint8

func (self BsnPushVlan) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNPushVLANUntagged == BSNPushVLANUntagged {
		flags = append(flags, "\"BSNPushVLANUntagged\": true")
	}
	if self&BSNPushVLANSingleTagged == BSNPushVLANSingleTagged {
		flags = append(flags, "\"BSNPushVLANSingleTagged\": true")
	}
	if self&BSNPushVLANDoubleTagged == BSNPushVLANDoubleTagged {
		flags = append(flags, "\"BSNPushVLANDoubleTagged\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_rate_unit
	BSNRateUnitPps    = 0 // OFP_BSN_RATE_UNIT_PPS
	BSNRateUnitKbitps = 1 // OFP_BSN_RATE_UNIT_KBITPS
)

type BsnRateUnit uint8

func (self BsnRateUnit) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNRateUnitPps:
		return []byte("\"BSNRateUnitPps\""), nil
	case BSNRateUnitKbitps:
		return []byte("\"BSNRateUnitKbitps\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnRateUnit", self)
	}
}

const (
	// Identifiers from group ofp_bsn_routing_param
	BSNRoutingParamOspfUcast     = 1 // OFP_BSN_ROUTING_PARAM_OSPF_UCAST
	BSNRoutingParamOspfMcast     = 2 // OFP_BSN_ROUTING_PARAM_OSPF_MCAST
	BSNRoutingParamARPFrr        = 3 // OFP_BSN_ROUTING_PARAM_ARP_FRR
	BSNRoutingParamIpv6OspfUcast = 4 // OFP_BSN_ROUTING_PARAM_IPV6_OSPF_UCAST
	BSNRoutingParamIpv6OspfMcast = 5 // OFP_BSN_ROUTING_PARAM_IPV6_OSPF_MCAST
	BSNRoutingParamIpv6NdpFrr    = 6 // OFP_BSN_ROUTING_PARAM_IPV6_NDP_FRR
)

type BsnRoutingParam uint16

func (self BsnRoutingParam) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNRoutingParamOspfUcast:
		return []byte("\"BSNRoutingParamOspfUcast\""), nil
	case BSNRoutingParamOspfMcast:
		return []byte("\"BSNRoutingParamOspfMcast\""), nil
	case BSNRoutingParamARPFrr:
		return []byte("\"BSNRoutingParamARPFrr\""), nil
	case BSNRoutingParamIpv6OspfUcast:
		return []byte("\"BSNRoutingParamIpv6OspfUcast\""), nil
	case BSNRoutingParamIpv6OspfMcast:
		return []byte("\"BSNRoutingParamIpv6OspfMcast\""), nil
	case BSNRoutingParamIpv6NdpFrr:
		return []byte("\"BSNRoutingParamIpv6NdpFrr\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnRoutingParam", self)
	}
}

const (
	// Identifiers from group ofp_bsn_status
	BSNStatusDisable = 0 // OFP_BSN_STATUS_DISABLE
	BSNStatusEnable  = 1 // OFP_BSN_STATUS_ENABLE
)

type BsnStatus uint8

func (self BsnStatus) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNStatusDisable:
		return []byte("\"BSNStatusDisable\""), nil
	case BSNStatusEnable:
		return []byte("\"BSNStatusEnable\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnStatus", self)
	}
}

const (
	// Identifiers from group ofp_bsn_strip_vlan
	BSNStripVLANFirst  = 1 // OFP_BSN_STRIP_VLAN_FIRST
	BSNStripVLANSecond = 2 // OFP_BSN_STRIP_VLAN_SECOND
	BSNStripVLANThird  = 4 // OFP_BSN_STRIP_VLAN_THIRD
)

type BsnStripVlan uint8

func (self BsnStripVlan) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNStripVLANFirst == BSNStripVLANFirst {
		flags = append(flags, "\"BSNStripVLANFirst\": true")
	}
	if self&BSNStripVLANSecond == BSNStripVLANSecond {
		flags = append(flags, "\"BSNStripVLANSecond\": true")
	}
	if self&BSNStripVLANThird == BSNStripVLANThird {
		flags = append(flags, "\"BSNStripVLANThird\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_tcp_flag
	BSNTCPFlagFin = 1   // OFP_BSN_TCP_FLAG_FIN
	BSNTCPFlagSyn = 2   // OFP_BSN_TCP_FLAG_SYN
	BSNTCPFlagRst = 4   // OFP_BSN_TCP_FLAG_RST
	BSNTCPFlagPsh = 8   // OFP_BSN_TCP_FLAG_PSH
	BSNTCPFlagAck = 16  // OFP_BSN_TCP_FLAG_ACK
	BSNTCPFlagUrg = 32  // OFP_BSN_TCP_FLAG_URG
	BSNTCPFlagEce = 64  // OFP_BSN_TCP_FLAG_ECE
	BSNTCPFlagCwr = 128 // OFP_BSN_TCP_FLAG_CWR
	BSNTCPFlagNs  = 256 // OFP_BSN_TCP_FLAG_NS
)

type BsnTcpFlag uint16

func (self BsnTcpFlag) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNTCPFlagFin == BSNTCPFlagFin {
		flags = append(flags, "\"BSNTCPFlagFin\": true")
	}
	if self&BSNTCPFlagSyn == BSNTCPFlagSyn {
		flags = append(flags, "\"BSNTCPFlagSyn\": true")
	}
	if self&BSNTCPFlagRst == BSNTCPFlagRst {
		flags = append(flags, "\"BSNTCPFlagRst\": true")
	}
	if self&BSNTCPFlagPsh == BSNTCPFlagPsh {
		flags = append(flags, "\"BSNTCPFlagPsh\": true")
	}
	if self&BSNTCPFlagAck == BSNTCPFlagAck {
		flags = append(flags, "\"BSNTCPFlagAck\": true")
	}
	if self&BSNTCPFlagUrg == BSNTCPFlagUrg {
		flags = append(flags, "\"BSNTCPFlagUrg\": true")
	}
	if self&BSNTCPFlagEce == BSNTCPFlagEce {
		flags = append(flags, "\"BSNTCPFlagEce\": true")
	}
	if self&BSNTCPFlagCwr == BSNTCPFlagCwr {
		flags = append(flags, "\"BSNTCPFlagCwr\": true")
	}
	if self&BSNTCPFlagNs == BSNTCPFlagNs {
		flags = append(flags, "\"BSNTCPFlagNs\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_tunnel_type
	BSNTunnelL2Gre = 1 // OFP_BSN_TUNNEL_L2GRE
)

type BsnTunnelType uint64

func (self BsnTunnelType) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNTunnelL2Gre == BSNTunnelL2Gre {
		flags = append(flags, "\"BSNTunnelL2Gre\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_udf_anchor
	BSNUdfAnchorPacketStart   = 0 // OFP_BSN_UDF_ANCHOR_PACKET_START
	BSNUdfAnchorL3HeaderStart = 1 // OFP_BSN_UDF_ANCHOR_L3_HEADER_START
	BSNUdfAnchorL4HeaderStart = 2 // OFP_BSN_UDF_ANCHOR_L4_HEADER_START
)

type BsnUdfAnchor uint16

func (self BsnUdfAnchor) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNUdfAnchorPacketStart:
		return []byte("\"BSNUdfAnchorPacketStart\""), nil
	case BSNUdfAnchorL3HeaderStart:
		return []byte("\"BSNUdfAnchorL3HeaderStart\""), nil
	case BSNUdfAnchorL4HeaderStart:
		return []byte("\"BSNUdfAnchorL4HeaderStart\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnUdfAnchor", self)
	}
}

const (
	// Identifiers from group ofp_bsn_udf_mode
	BSNUdf8X2Bytes = 1 // OFP_BSN_UDF_8X2_BYTES
)

type BsnUdfMode uint8

func (self BsnUdfMode) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&BSNUdf8X2Bytes == BSNUdf8X2Bytes {
		flags = append(flags, "\"BSNUdf8X2Bytes\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_upgrade
	BSNUpgradeInvalid    = 0 // OFP_BSN_UPGRADE_INVALID
	BSNUpgradeInProgress = 1 // OFP_BSN_UPGRADE_IN_PROGRESS
)

type BsnUpgrade uint16

func (self BsnUpgrade) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNUpgradeInvalid:
		return []byte("\"BSNUpgradeInvalid\""), nil
	case BSNUpgradeInProgress:
		return []byte("\"BSNUpgradeInProgress\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnUpgrade", self)
	}
}

const (
	// Identifiers from group ofp_bsn_vlan_counter_constants
	BSNVLANAll = 65535 // OFP_BSN_VLAN_ALL
)

const (
	// Identifiers from group ofp_bsn_vport_l2gre_flags
	OFBSNVportL2GreLocalMACIsValid  = 1  // OF_BSN_VPORT_L2GRE_LOCAL_MAC_IS_VALID
	OFBSNVportL2GreDSCPAssign       = 2  // OF_BSN_VPORT_L2GRE_DSCP_ASSIGN
	OFBSNVportL2GreDSCPCopy         = 4  // OF_BSN_VPORT_L2GRE_DSCP_COPY
	OFBSNVportL2GreLoopbackIsValid  = 8  // OF_BSN_VPORT_L2GRE_LOOPBACK_IS_VALID
	OFBSNVportL2GreRateLimitIsValid = 16 // OF_BSN_VPORT_L2GRE_RATE_LIMIT_IS_VALID
)

type BsnVportL2GreFlags uint32

func (self BsnVportL2GreFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFBSNVportL2GreLocalMACIsValid == OFBSNVportL2GreLocalMACIsValid {
		flags = append(flags, "\"OFBSNVportL2GreLocalMACIsValid\": true")
	}
	if self&OFBSNVportL2GreDSCPAssign == OFBSNVportL2GreDSCPAssign {
		flags = append(flags, "\"OFBSNVportL2GreDSCPAssign\": true")
	}
	if self&OFBSNVportL2GreDSCPCopy == OFBSNVportL2GreDSCPCopy {
		flags = append(flags, "\"OFBSNVportL2GreDSCPCopy\": true")
	}
	if self&OFBSNVportL2GreLoopbackIsValid == OFBSNVportL2GreLoopbackIsValid {
		flags = append(flags, "\"OFBSNVportL2GreLoopbackIsValid\": true")
	}
	if self&OFBSNVportL2GreRateLimitIsValid == OFBSNVportL2GreRateLimitIsValid {
		flags = append(flags, "\"OFBSNVportL2GreRateLimitIsValid\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_bsn_vport_q_in_q_untagged
	OFBSNVportQInQUntagged = 65535 // OF_BSN_VPORT_Q_IN_Q_UNTAGGED
)

type BsnVportQInQUntagged uint16

func (self BsnVportQInQUntagged) MarshalJSON() ([]byte, error) {
	switch self {
	case OFBSNVportQInQUntagged:
		return []byte("\"OFBSNVportQInQUntagged\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnVportQInQUntagged", self)
	}
}

const (
	// Identifiers from group ofp_bsn_vport_status
	OFBSNVportStatusOk     = 0 // OF_BSN_VPORT_STATUS_OK
	OFBSNVportStatusFailed = 1 // OF_BSN_VPORT_STATUS_FAILED
)

const (
	// Identifiers from group ofp_bsn_vrf_counter_constants
	BSNVrfAll = 4294967295 // OFP_BSN_VRF_ALL
)

type BsnVrfCounterConstants uint32

func (self BsnVrfCounterConstants) MarshalJSON() ([]byte, error) {
	switch self {
	case BSNVrfAll:
		return []byte("\"BSNVrfAll\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for BsnVrfCounterConstants", self)
	}
}

const (
	// Identifiers from group ofp_capabilities
	OFPCFlowStats   = 1   // OFPC_FLOW_STATS
	OFPCTableStats  = 2   // OFPC_TABLE_STATS
	OFPCPortStats   = 4   // OFPC_PORT_STATS
	OFPCGroupStats  = 8   // OFPC_GROUP_STATS
	OFPCIpReasm     = 32  // OFPC_IP_REASM
	OFPCQueueStats  = 64  // OFPC_QUEUE_STATS
	OFPCPortBlocked = 256 // OFPC_PORT_BLOCKED
)

type Capabilities uint32

func (self Capabilities) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPCFlowStats == OFPCFlowStats {
		flags = append(flags, "\"OFPCFlowStats\": true")
	}
	if self&OFPCTableStats == OFPCTableStats {
		flags = append(flags, "\"OFPCTableStats\": true")
	}
	if self&OFPCPortStats == OFPCPortStats {
		flags = append(flags, "\"OFPCPortStats\": true")
	}
	if self&OFPCGroupStats == OFPCGroupStats {
		flags = append(flags, "\"OFPCGroupStats\": true")
	}
	if self&OFPCIpReasm == OFPCIpReasm {
		flags = append(flags, "\"OFPCIpReasm\": true")
	}
	if self&OFPCQueueStats == OFPCQueueStats {
		flags = append(flags, "\"OFPCQueueStats\": true")
	}
	if self&OFPCPortBlocked == OFPCPortBlocked {
		flags = append(flags, "\"OFPCPortBlocked\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_config_flags
	OFPCFragNormal = 0 // OFPC_FRAG_NORMAL
	OFPCFragDrop   = 1 // OFPC_FRAG_DROP
	OFPCFragReasm  = 2 // OFPC_FRAG_REASM
	OFPCFragMask   = 3 // OFPC_FRAG_MASK
)

type ConfigFlags uint16

func (self ConfigFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPCFragNormal == OFPCFragNormal {
		flags = append(flags, "\"OFPCFragNormal\": true")
	}
	if self&OFPCFragDrop == OFPCFragDrop {
		flags = append(flags, "\"OFPCFragDrop\": true")
	}
	if self&OFPCFragReasm == OFPCFragReasm {
		flags = append(flags, "\"OFPCFragReasm\": true")
	}
	if self&OFPCFragMask == OFPCFragMask {
		flags = append(flags, "\"OFPCFragMask\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_controller_max_len
	OFPCMLMax      = 65509 // OFPCML_MAX
	OFPCMLNoBuffer = 65535 // OFPCML_NO_BUFFER
)

type ControllerMaxLen uint16

func (self ControllerMaxLen) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPCMLMax:
		return []byte("\"OFPCMLMax\""), nil
	case OFPCMLNoBuffer:
		return []byte("\"OFPCMLNoBuffer\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for ControllerMaxLen", self)
	}
}

const (
	// Identifiers from group ofp_controller_role
	OFPCRRoleNochange = 0 // OFPCR_ROLE_NOCHANGE
	OFPCRRoleEqual    = 1 // OFPCR_ROLE_EQUAL
	OFPCRRoleMaster   = 2 // OFPCR_ROLE_MASTER
	OFPCRRoleSlave    = 3 // OFPCR_ROLE_SLAVE
)

type ControllerRole uint32

func (self ControllerRole) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPCRRoleNochange:
		return []byte("\"OFPCRRoleNochange\""), nil
	case OFPCRRoleEqual:
		return []byte("\"OFPCRRoleEqual\""), nil
	case OFPCRRoleMaster:
		return []byte("\"OFPCRRoleMaster\""), nil
	case OFPCRRoleSlave:
		return []byte("\"OFPCRRoleSlave\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for ControllerRole", self)
	}
}

const (
	// Identifiers from group ofp_ed_nsh_prop_type
	OFPPPTPropNshNone   = 0 // OFPPPT_PROP_NSH_NONE
	OFPPPTPropNshMdtype = 1 // OFPPPT_PROP_NSH_MDTYPE
	OFPPPTPropNshTlv    = 2 // OFPPPT_PROP_NSH_TLV
)

type EdNshPropType uint8

func (self EdNshPropType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPPTPropNshNone:
		return []byte("\"OFPPPTPropNshNone\""), nil
	case OFPPPTPropNshMdtype:
		return []byte("\"OFPPPTPropNshMdtype\""), nil
	case OFPPPTPropNshTlv:
		return []byte("\"OFPPPTPropNshTlv\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for EdNshPropType", self)
	}
}

const (
	// Identifiers from group ofp_ed_prop_class
	OFPPPCBasic        = 0     // OFPPPC_BASIC
	OFPPPCMpls         = 1     // OFPPPC_MPLS
	OFPPPCGRE          = 2     // OFPPPC_GRE
	OFPPPCGtp          = 3     // OFPPPC_GTP
	OFPPPCNsh          = 4     // OFPPPC_NSH
	OFPPPCExperimenter = 65535 // OFPPPC_EXPERIMENTER
)

type EdPropClass uint16

func (self EdPropClass) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPPCBasic:
		return []byte("\"OFPPPCBasic\""), nil
	case OFPPPCMpls:
		return []byte("\"OFPPPCMpls\""), nil
	case OFPPPCGRE:
		return []byte("\"OFPPPCGRE\""), nil
	case OFPPPCGtp:
		return []byte("\"OFPPPCGtp\""), nil
	case OFPPPCNsh:
		return []byte("\"OFPPPCNsh\""), nil
	case OFPPPCExperimenter:
		return []byte("\"OFPPPCExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for EdPropClass", self)
	}
}

const (
	// Identifiers from group ofp_error_type
	OFPETHelloFailed         = 0     // OFPET_HELLO_FAILED
	OFPETBadRequest          = 1     // OFPET_BAD_REQUEST
	OFPETBadAction           = 2     // OFPET_BAD_ACTION
	OFPETBadInstruction      = 3     // OFPET_BAD_INSTRUCTION
	OFPETBadMatch            = 4     // OFPET_BAD_MATCH
	OFPETFlowModFailed       = 5     // OFPET_FLOW_MOD_FAILED
	OFPETGroupModFailed      = 6     // OFPET_GROUP_MOD_FAILED
	OFPETPortModFailed       = 7     // OFPET_PORT_MOD_FAILED
	OFPETTableModFailed      = 8     // OFPET_TABLE_MOD_FAILED
	OFPETQueueOpFailed       = 9     // OFPET_QUEUE_OP_FAILED
	OFPETSwitchConfigFailed  = 10    // OFPET_SWITCH_CONFIG_FAILED
	OFPETRoleRequestFailed   = 11    // OFPET_ROLE_REQUEST_FAILED
	OFPETMeterModFailed      = 12    // OFPET_METER_MOD_FAILED
	OFPETTableFeaturesFailed = 13    // OFPET_TABLE_FEATURES_FAILED
	OFPETExperimenter        = 65535 // OFPET_EXPERIMENTER
)

type ErrorType uint16

func (self ErrorType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPETHelloFailed:
		return []byte("\"OFPETHelloFailed\""), nil
	case OFPETBadRequest:
		return []byte("\"OFPETBadRequest\""), nil
	case OFPETBadAction:
		return []byte("\"OFPETBadAction\""), nil
	case OFPETBadInstruction:
		return []byte("\"OFPETBadInstruction\""), nil
	case OFPETBadMatch:
		return []byte("\"OFPETBadMatch\""), nil
	case OFPETFlowModFailed:
		return []byte("\"OFPETFlowModFailed\""), nil
	case OFPETGroupModFailed:
		return []byte("\"OFPETGroupModFailed\""), nil
	case OFPETPortModFailed:
		return []byte("\"OFPETPortModFailed\""), nil
	case OFPETTableModFailed:
		return []byte("\"OFPETTableModFailed\""), nil
	case OFPETQueueOpFailed:
		return []byte("\"OFPETQueueOpFailed\""), nil
	case OFPETSwitchConfigFailed:
		return []byte("\"OFPETSwitchConfigFailed\""), nil
	case OFPETRoleRequestFailed:
		return []byte("\"OFPETRoleRequestFailed\""), nil
	case OFPETMeterModFailed:
		return []byte("\"OFPETMeterModFailed\""), nil
	case OFPETTableFeaturesFailed:
		return []byte("\"OFPETTableFeaturesFailed\""), nil
	case OFPETExperimenter:
		return []byte("\"OFPETExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for ErrorType", self)
	}
}

const (
	// Identifiers from group ofp_flow_mod_command
	OFPFCAdd          = 0 // OFPFC_ADD
	OFPFCModify       = 1 // OFPFC_MODIFY
	OFPFCModifyStrict = 2 // OFPFC_MODIFY_STRICT
	OFPFCDelete       = 3 // OFPFC_DELETE
	OFPFCDeleteStrict = 4 // OFPFC_DELETE_STRICT
)

type FlowModCommand uint8

func (self FlowModCommand) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPFCAdd:
		return []byte("\"OFPFCAdd\""), nil
	case OFPFCModify:
		return []byte("\"OFPFCModify\""), nil
	case OFPFCModifyStrict:
		return []byte("\"OFPFCModifyStrict\""), nil
	case OFPFCDelete:
		return []byte("\"OFPFCDelete\""), nil
	case OFPFCDeleteStrict:
		return []byte("\"OFPFCDeleteStrict\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for FlowModCommand", self)
	}
}

const (
	// Identifiers from group ofp_flow_mod_failed_code
	OFPFMFCUnknown    = 0 // OFPFMFC_UNKNOWN
	OFPFMFCTableFull  = 1 // OFPFMFC_TABLE_FULL
	OFPFMFCBadTableID = 2 // OFPFMFC_BAD_TABLE_ID
	OFPFMFCOverlap    = 3 // OFPFMFC_OVERLAP
	OFPFMFCEperm      = 4 // OFPFMFC_EPERM
	OFPFMFCBadTimeout = 5 // OFPFMFC_BAD_TIMEOUT
	OFPFMFCBadCommand = 6 // OFPFMFC_BAD_COMMAND
	OFPFMFCBadFlags   = 7 // OFPFMFC_BAD_FLAGS
)

type FlowModFailedCode uint16

func (self FlowModFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPFMFCUnknown:
		return []byte("\"OFPFMFCUnknown\""), nil
	case OFPFMFCTableFull:
		return []byte("\"OFPFMFCTableFull\""), nil
	case OFPFMFCBadTableID:
		return []byte("\"OFPFMFCBadTableID\""), nil
	case OFPFMFCOverlap:
		return []byte("\"OFPFMFCOverlap\""), nil
	case OFPFMFCEperm:
		return []byte("\"OFPFMFCEperm\""), nil
	case OFPFMFCBadTimeout:
		return []byte("\"OFPFMFCBadTimeout\""), nil
	case OFPFMFCBadCommand:
		return []byte("\"OFPFMFCBadCommand\""), nil
	case OFPFMFCBadFlags:
		return []byte("\"OFPFMFCBadFlags\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for FlowModFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_flow_mod_flags
	OFPFFSendFlowRem  = 1   // OFPFF_SEND_FLOW_REM
	OFPFFCheckOverlap = 2   // OFPFF_CHECK_OVERLAP
	OFPFFResetCounts  = 4   // OFPFF_RESET_COUNTS
	OFPFFNoPktCounts  = 8   // OFPFF_NO_PKT_COUNTS
	OFPFFNoBytCounts  = 16  // OFPFF_NO_BYT_COUNTS
	OFPFFBSNSendIdle  = 128 // OFPFF_BSN_SEND_IDLE
)

type FlowModFlags uint16

func (self FlowModFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPFFSendFlowRem == OFPFFSendFlowRem {
		flags = append(flags, "\"OFPFFSendFlowRem\": true")
	}
	if self&OFPFFCheckOverlap == OFPFFCheckOverlap {
		flags = append(flags, "\"OFPFFCheckOverlap\": true")
	}
	if self&OFPFFResetCounts == OFPFFResetCounts {
		flags = append(flags, "\"OFPFFResetCounts\": true")
	}
	if self&OFPFFNoPktCounts == OFPFFNoPktCounts {
		flags = append(flags, "\"OFPFFNoPktCounts\": true")
	}
	if self&OFPFFNoBytCounts == OFPFFNoBytCounts {
		flags = append(flags, "\"OFPFFNoBytCounts\": true")
	}
	if self&OFPFFBSNSendIdle == OFPFFBSNSendIdle {
		flags = append(flags, "\"OFPFFBSNSendIdle\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_flow_removed_reason
	OFPRRIdleTimeout = 0 // OFPRR_IDLE_TIMEOUT
	OFPRRHardTimeout = 1 // OFPRR_HARD_TIMEOUT
	OFPRRDelete      = 2 // OFPRR_DELETE
	OFPRRGroupDelete = 3 // OFPRR_GROUP_DELETE
)

type FlowRemovedReason uint8

func (self FlowRemovedReason) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPRRIdleTimeout:
		return []byte("\"OFPRRIdleTimeout\""), nil
	case OFPRRHardTimeout:
		return []byte("\"OFPRRHardTimeout\""), nil
	case OFPRRDelete:
		return []byte("\"OFPRRDelete\""), nil
	case OFPRRGroupDelete:
		return []byte("\"OFPRRGroupDelete\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for FlowRemovedReason", self)
	}
}

const (
	// Identifiers from group ofp_group
	OFPGMax = 4294967040 // OFPG_MAX
	OFPGAll = 4294967292 // OFPG_ALL
	OFPGAny = 4294967295 // OFPG_ANY
)

type Group uint32

func (self Group) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPGMax:
		return []byte("\"OFPGMax\""), nil
	case OFPGAll:
		return []byte("\"OFPGAll\""), nil
	case OFPGAny:
		return []byte("\"OFPGAny\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for Group", self)
	}
}

const (
	// Identifiers from group ofp_group_capabilities
	OFPGFCSelectWeight   = 1 // OFPGFC_SELECT_WEIGHT
	OFPGFCSelectLiveness = 2 // OFPGFC_SELECT_LIVENESS
	OFPGFCChaining       = 4 // OFPGFC_CHAINING
	OFPGFCChainingChecks = 8 // OFPGFC_CHAINING_CHECKS
)

type GroupCapabilities uint32

func (self GroupCapabilities) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPGFCSelectWeight == OFPGFCSelectWeight {
		flags = append(flags, "\"OFPGFCSelectWeight\": true")
	}
	if self&OFPGFCSelectLiveness == OFPGFCSelectLiveness {
		flags = append(flags, "\"OFPGFCSelectLiveness\": true")
	}
	if self&OFPGFCChaining == OFPGFCChaining {
		flags = append(flags, "\"OFPGFCChaining\": true")
	}
	if self&OFPGFCChainingChecks == OFPGFCChainingChecks {
		flags = append(flags, "\"OFPGFCChainingChecks\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_group_mod_command
	OFPGCAdd    = 0 // OFPGC_ADD
	OFPGCModify = 1 // OFPGC_MODIFY
	OFPGCDelete = 2 // OFPGC_DELETE
)

type GroupModCommand uint16

func (self GroupModCommand) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPGCAdd:
		return []byte("\"OFPGCAdd\""), nil
	case OFPGCModify:
		return []byte("\"OFPGCModify\""), nil
	case OFPGCDelete:
		return []byte("\"OFPGCDelete\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for GroupModCommand", self)
	}
}

const (
	// Identifiers from group ofp_group_mod_failed_code
	OFPGMFCGroupExists         = 0  // OFPGMFC_GROUP_EXISTS
	OFPGMFCInvalidGroup        = 1  // OFPGMFC_INVALID_GROUP
	OFPGMFCWeightUnsupported   = 2  // OFPGMFC_WEIGHT_UNSUPPORTED
	OFPGMFCOutOfGroups         = 3  // OFPGMFC_OUT_OF_GROUPS
	OFPGMFCOutOfBuckets        = 4  // OFPGMFC_OUT_OF_BUCKETS
	OFPGMFCChainingUnsupported = 5  // OFPGMFC_CHAINING_UNSUPPORTED
	OFPGMFCWatchUnsupported    = 6  // OFPGMFC_WATCH_UNSUPPORTED
	OFPGMFCLoop                = 7  // OFPGMFC_LOOP
	OFPGMFCUnknownGroup        = 8  // OFPGMFC_UNKNOWN_GROUP
	OFPGMFCChainedGroup        = 9  // OFPGMFC_CHAINED_GROUP
	OFPGMFCBadType             = 10 // OFPGMFC_BAD_TYPE
	OFPGMFCBadCommand          = 11 // OFPGMFC_BAD_COMMAND
	OFPGMFCBadBucket           = 12 // OFPGMFC_BAD_BUCKET
	OFPGMFCBadWatch            = 13 // OFPGMFC_BAD_WATCH
	OFPGMFCEperm               = 14 // OFPGMFC_EPERM
)

type GroupModFailedCode uint16

func (self GroupModFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPGMFCGroupExists:
		return []byte("\"OFPGMFCGroupExists\""), nil
	case OFPGMFCInvalidGroup:
		return []byte("\"OFPGMFCInvalidGroup\""), nil
	case OFPGMFCWeightUnsupported:
		return []byte("\"OFPGMFCWeightUnsupported\""), nil
	case OFPGMFCOutOfGroups:
		return []byte("\"OFPGMFCOutOfGroups\""), nil
	case OFPGMFCOutOfBuckets:
		return []byte("\"OFPGMFCOutOfBuckets\""), nil
	case OFPGMFCChainingUnsupported:
		return []byte("\"OFPGMFCChainingUnsupported\""), nil
	case OFPGMFCWatchUnsupported:
		return []byte("\"OFPGMFCWatchUnsupported\""), nil
	case OFPGMFCLoop:
		return []byte("\"OFPGMFCLoop\""), nil
	case OFPGMFCUnknownGroup:
		return []byte("\"OFPGMFCUnknownGroup\""), nil
	case OFPGMFCChainedGroup:
		return []byte("\"OFPGMFCChainedGroup\""), nil
	case OFPGMFCBadType:
		return []byte("\"OFPGMFCBadType\""), nil
	case OFPGMFCBadCommand:
		return []byte("\"OFPGMFCBadCommand\""), nil
	case OFPGMFCBadBucket:
		return []byte("\"OFPGMFCBadBucket\""), nil
	case OFPGMFCBadWatch:
		return []byte("\"OFPGMFCBadWatch\""), nil
	case OFPGMFCEperm:
		return []byte("\"OFPGMFCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for GroupModFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_group_type
	OFPGTAll      = 0 // OFPGT_ALL
	OFPGTSelect   = 1 // OFPGT_SELECT
	OFPGTIndirect = 2 // OFPGT_INDIRECT
	OFPGTFf       = 3 // OFPGT_FF
)

type GroupType uint8

func (self GroupType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPGTAll:
		return []byte("\"OFPGTAll\""), nil
	case OFPGTSelect:
		return []byte("\"OFPGTSelect\""), nil
	case OFPGTIndirect:
		return []byte("\"OFPGTIndirect\""), nil
	case OFPGTFf:
		return []byte("\"OFPGTFf\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for GroupType", self)
	}
}

const (
	// Identifiers from group ofp_hello_elem_type
	OFPHETVersionbitmap = 1 // OFPHET_VERSIONBITMAP
)

type HelloElemType uint16

func (self HelloElemType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPHETVersionbitmap:
		return []byte("\"OFPHETVersionbitmap\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for HelloElemType", self)
	}
}

const (
	// Identifiers from group ofp_hello_failed_code
	OFPHFCIncompatible = 0 // OFPHFC_INCOMPATIBLE
	OFPHFCEperm        = 1 // OFPHFC_EPERM
)

type HelloFailedCode uint16

func (self HelloFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPHFCIncompatible:
		return []byte("\"OFPHFCIncompatible\""), nil
	case OFPHFCEperm:
		return []byte("\"OFPHFCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for HelloFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_instruction_type
	OFPITGotoTable     = 1     // OFPIT_GOTO_TABLE
	OFPITWriteMetadata = 2     // OFPIT_WRITE_METADATA
	OFPITWriteActions  = 3     // OFPIT_WRITE_ACTIONS
	OFPITApplyActions  = 4     // OFPIT_APPLY_ACTIONS
	OFPITClearActions  = 5     // OFPIT_CLEAR_ACTIONS
	OFPITMeter         = 6     // OFPIT_METER
	OFPITExperimenter  = 65535 // OFPIT_EXPERIMENTER
)

type InstructionType uint16

func (self InstructionType) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPITGotoTable == OFPITGotoTable {
		flags = append(flags, "\"OFPITGotoTable\": true")
	}
	if self&OFPITWriteMetadata == OFPITWriteMetadata {
		flags = append(flags, "\"OFPITWriteMetadata\": true")
	}
	if self&OFPITWriteActions == OFPITWriteActions {
		flags = append(flags, "\"OFPITWriteActions\": true")
	}
	if self&OFPITApplyActions == OFPITApplyActions {
		flags = append(flags, "\"OFPITApplyActions\": true")
	}
	if self&OFPITClearActions == OFPITClearActions {
		flags = append(flags, "\"OFPITClearActions\": true")
	}
	if self&OFPITMeter == OFPITMeter {
		flags = append(flags, "\"OFPITMeter\": true")
	}
	if self&OFPITExperimenter == OFPITExperimenter {
		flags = append(flags, "\"OFPITExperimenter\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_ipv6exthdr_flags
	OFPIEHNonext = 1   // OFPIEH_NONEXT
	OFPIEHEsp    = 2   // OFPIEH_ESP
	OFPIEHAuth   = 4   // OFPIEH_AUTH
	OFPIEHDest   = 8   // OFPIEH_DEST
	OFPIEHFrag   = 16  // OFPIEH_FRAG
	OFPIEHRouter = 32  // OFPIEH_ROUTER
	OFPIEHHop    = 64  // OFPIEH_HOP
	OFPIEHUnrep  = 128 // OFPIEH_UNREP
	OFPIEHUnseq  = 256 // OFPIEH_UNSEQ
)

type Ipv6ExthdrFlags uint16

func (self Ipv6ExthdrFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPIEHNonext == OFPIEHNonext {
		flags = append(flags, "\"OFPIEHNonext\": true")
	}
	if self&OFPIEHEsp == OFPIEHEsp {
		flags = append(flags, "\"OFPIEHEsp\": true")
	}
	if self&OFPIEHAuth == OFPIEHAuth {
		flags = append(flags, "\"OFPIEHAuth\": true")
	}
	if self&OFPIEHDest == OFPIEHDest {
		flags = append(flags, "\"OFPIEHDest\": true")
	}
	if self&OFPIEHFrag == OFPIEHFrag {
		flags = append(flags, "\"OFPIEHFrag\": true")
	}
	if self&OFPIEHRouter == OFPIEHRouter {
		flags = append(flags, "\"OFPIEHRouter\": true")
	}
	if self&OFPIEHHop == OFPIEHHop {
		flags = append(flags, "\"OFPIEHHop\": true")
	}
	if self&OFPIEHUnrep == OFPIEHUnrep {
		flags = append(flags, "\"OFPIEHUnrep\": true")
	}
	if self&OFPIEHUnseq == OFPIEHUnseq {
		flags = append(flags, "\"OFPIEHUnseq\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_match_type
	OFPMTStandard = 0 // OFPMT_STANDARD
	OFPMTOXM      = 1 // OFPMT_OXM
)

type MatchType uint16

func (self MatchType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPMTStandard:
		return []byte("\"OFPMTStandard\""), nil
	case OFPMTOXM:
		return []byte("\"OFPMTOXM\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for MatchType", self)
	}
}

const (
	// Identifiers from group ofp_meter
	OFPMMax        = 4294901760 // OFPM_MAX
	OFPMSlowpath   = 4294967293 // OFPM_SLOWPATH
	OFPMController = 4294967294 // OFPM_CONTROLLER
	OFPMAll        = 4294967295 // OFPM_ALL
)

type Meter uint32

func (self Meter) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPMMax:
		return []byte("\"OFPMMax\""), nil
	case OFPMSlowpath:
		return []byte("\"OFPMSlowpath\""), nil
	case OFPMController:
		return []byte("\"OFPMController\""), nil
	case OFPMAll:
		return []byte("\"OFPMAll\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for Meter", self)
	}
}

const (
	// Identifiers from group ofp_meter_band_type
	OFPMBTDrop         = 1     // OFPMBT_DROP
	OFPMBTDSCPRemark   = 2     // OFPMBT_DSCP_REMARK
	OFPMBTExperimenter = 65535 // OFPMBT_EXPERIMENTER
)

type MeterBandType uint16

func (self MeterBandType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPMBTDrop:
		return []byte("\"OFPMBTDrop\""), nil
	case OFPMBTDSCPRemark:
		return []byte("\"OFPMBTDSCPRemark\""), nil
	case OFPMBTExperimenter:
		return []byte("\"OFPMBTExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for MeterBandType", self)
	}
}

const (
	// Identifiers from group ofp_meter_flags
	OFPMFKbps  = 1 // OFPMF_KBPS
	OFPMFPktps = 2 // OFPMF_PKTPS
	OFPMFBurst = 4 // OFPMF_BURST
	OFPMFStats = 8 // OFPMF_STATS
)

type MeterFlags uint16

func (self MeterFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPMFKbps == OFPMFKbps {
		flags = append(flags, "\"OFPMFKbps\": true")
	}
	if self&OFPMFPktps == OFPMFPktps {
		flags = append(flags, "\"OFPMFPktps\": true")
	}
	if self&OFPMFBurst == OFPMFBurst {
		flags = append(flags, "\"OFPMFBurst\": true")
	}
	if self&OFPMFStats == OFPMFStats {
		flags = append(flags, "\"OFPMFStats\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_meter_mod_command
	OFPMCAdd    = 0 // OFPMC_ADD
	OFPMCModify = 1 // OFPMC_MODIFY
	OFPMCDelete = 2 // OFPMC_DELETE
)

type MeterModCommand uint16

func (self MeterModCommand) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPMCAdd:
		return []byte("\"OFPMCAdd\""), nil
	case OFPMCModify:
		return []byte("\"OFPMCModify\""), nil
	case OFPMCDelete:
		return []byte("\"OFPMCDelete\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for MeterModCommand", self)
	}
}

const (
	// Identifiers from group ofp_meter_mod_failed_code
	OFPMMFCUnknown      = 0  // OFPMMFC_UNKNOWN
	OFPMMFCMeterExists  = 1  // OFPMMFC_METER_EXISTS
	OFPMMFCInvalidMeter = 2  // OFPMMFC_INVALID_METER
	OFPMMFCUnknownMeter = 3  // OFPMMFC_UNKNOWN_METER
	OFPMMFCBadCommand   = 4  // OFPMMFC_BAD_COMMAND
	OFPMMFCBadFlags     = 5  // OFPMMFC_BAD_FLAGS
	OFPMMFCBadRate      = 6  // OFPMMFC_BAD_RATE
	OFPMMFCBadBurst     = 7  // OFPMMFC_BAD_BURST
	OFPMMFCBadBand      = 8  // OFPMMFC_BAD_BAND
	OFPMMFCBadBandValue = 9  // OFPMMFC_BAD_BAND_VALUE
	OFPMMFCOutOfMeters  = 10 // OFPMMFC_OUT_OF_METERS
	OFPMMFCOutOfBands   = 11 // OFPMMFC_OUT_OF_BANDS
)

type MeterModFailedCode uint16

func (self MeterModFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPMMFCUnknown:
		return []byte("\"OFPMMFCUnknown\""), nil
	case OFPMMFCMeterExists:
		return []byte("\"OFPMMFCMeterExists\""), nil
	case OFPMMFCInvalidMeter:
		return []byte("\"OFPMMFCInvalidMeter\""), nil
	case OFPMMFCUnknownMeter:
		return []byte("\"OFPMMFCUnknownMeter\""), nil
	case OFPMMFCBadCommand:
		return []byte("\"OFPMMFCBadCommand\""), nil
	case OFPMMFCBadFlags:
		return []byte("\"OFPMMFCBadFlags\""), nil
	case OFPMMFCBadRate:
		return []byte("\"OFPMMFCBadRate\""), nil
	case OFPMMFCBadBurst:
		return []byte("\"OFPMMFCBadBurst\""), nil
	case OFPMMFCBadBand:
		return []byte("\"OFPMMFCBadBand\""), nil
	case OFPMMFCBadBandValue:
		return []byte("\"OFPMMFCBadBandValue\""), nil
	case OFPMMFCOutOfMeters:
		return []byte("\"OFPMMFCOutOfMeters\""), nil
	case OFPMMFCOutOfBands:
		return []byte("\"OFPMMFCOutOfBands\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for MeterModFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_ovs_tcp_flag
	OvsTCPFlagFin = 1   // OFP_OVS_TCP_FLAG_FIN
	OvsTCPFlagSyn = 2   // OFP_OVS_TCP_FLAG_SYN
	OvsTCPFlagRst = 4   // OFP_OVS_TCP_FLAG_RST
	OvsTCPFlagPsh = 8   // OFP_OVS_TCP_FLAG_PSH
	OvsTCPFlagAck = 16  // OFP_OVS_TCP_FLAG_ACK
	OvsTCPFlagUrg = 32  // OFP_OVS_TCP_FLAG_URG
	OvsTCPFlagEce = 64  // OFP_OVS_TCP_FLAG_ECE
	OvsTCPFlagCwr = 128 // OFP_OVS_TCP_FLAG_CWR
	OvsTCPFlagNs  = 256 // OFP_OVS_TCP_FLAG_NS
)

type OvsTcpFlag uint16

func (self OvsTcpFlag) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OvsTCPFlagFin == OvsTCPFlagFin {
		flags = append(flags, "\"OvsTCPFlagFin\": true")
	}
	if self&OvsTCPFlagSyn == OvsTCPFlagSyn {
		flags = append(flags, "\"OvsTCPFlagSyn\": true")
	}
	if self&OvsTCPFlagRst == OvsTCPFlagRst {
		flags = append(flags, "\"OvsTCPFlagRst\": true")
	}
	if self&OvsTCPFlagPsh == OvsTCPFlagPsh {
		flags = append(flags, "\"OvsTCPFlagPsh\": true")
	}
	if self&OvsTCPFlagAck == OvsTCPFlagAck {
		flags = append(flags, "\"OvsTCPFlagAck\": true")
	}
	if self&OvsTCPFlagUrg == OvsTCPFlagUrg {
		flags = append(flags, "\"OvsTCPFlagUrg\": true")
	}
	if self&OvsTCPFlagEce == OvsTCPFlagEce {
		flags = append(flags, "\"OvsTCPFlagEce\": true")
	}
	if self&OvsTCPFlagCwr == OvsTCPFlagCwr {
		flags = append(flags, "\"OvsTCPFlagCwr\": true")
	}
	if self&OvsTCPFlagNs == OvsTCPFlagNs {
		flags = append(flags, "\"OvsTCPFlagNs\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_oxm_class
	OFPXMCNxm0          = 0     // OFPXMC_NXM_0
	OFPXMCNxm1          = 1     // OFPXMC_NXM_1
	OFPXMCOpenflowBasic = 32768 // OFPXMC_OPENFLOW_BASIC
	OFPXMCExperimenter  = 65535 // OFPXMC_EXPERIMENTER
)

type OxmClass uint16

func (self OxmClass) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPXMCNxm0:
		return []byte("\"OFPXMCNxm0\""), nil
	case OFPXMCNxm1:
		return []byte("\"OFPXMCNxm1\""), nil
	case OFPXMCOpenflowBasic:
		return []byte("\"OFPXMCOpenflowBasic\""), nil
	case OFPXMCExperimenter:
		return []byte("\"OFPXMCExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for OxmClass", self)
	}
}

const (
	// Identifiers from group ofp_packet_in_reason
	OFPRNoMatch                     = 0   // OFPR_NO_MATCH
	OFPRAction                      = 1   // OFPR_ACTION
	OFPRInvalidTtl                  = 2   // OFPR_INVALID_TTL
	OFPRBSNNewHost                  = 128 // OFPR_BSN_NEW_HOST
	OFPRBSNStationMove              = 129 // OFPR_BSN_STATION_MOVE
	OFPRBSNBadVLAN                  = 130 // OFPR_BSN_BAD_VLAN
	OFPRBSNDestinationLookupFailure = 131 // OFPR_BSN_DESTINATION_LOOKUP_FAILURE
	OFPRBSNNoRoute                  = 132 // OFPR_BSN_NO_ROUTE
	OFPRBSNICMPEchoRequest          = 133 // OFPR_BSN_ICMP_ECHO_REQUEST
	OFPRBSNDestNetworkUnreachable   = 134 // OFPR_BSN_DEST_NETWORK_UNREACHABLE
	OFPRBSNDestHostUnreachable      = 135 // OFPR_BSN_DEST_HOST_UNREACHABLE
	OFPRBSNDestPortUnreachable      = 136 // OFPR_BSN_DEST_PORT_UNREACHABLE
	OFPRBSNFragmentationRequired    = 137 // OFPR_BSN_FRAGMENTATION_REQUIRED
	OFPRBSNARP                      = 139 // OFPR_BSN_ARP
	OFPRBSNDhcp                     = 140 // OFPR_BSN_DHCP
	OFPRBSNDebug                    = 141 // OFPR_BSN_DEBUG
	OFPRBSNPacketOfDeath            = 142 // OFPR_BSN_PACKET_OF_DEATH
)

type PacketInReason uint8

func (self PacketInReason) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPRNoMatch:
		return []byte("\"OFPRNoMatch\""), nil
	case OFPRAction:
		return []byte("\"OFPRAction\""), nil
	case OFPRInvalidTtl:
		return []byte("\"OFPRInvalidTtl\""), nil
	case OFPRBSNNewHost:
		return []byte("\"OFPRBSNNewHost\""), nil
	case OFPRBSNStationMove:
		return []byte("\"OFPRBSNStationMove\""), nil
	case OFPRBSNBadVLAN:
		return []byte("\"OFPRBSNBadVLAN\""), nil
	case OFPRBSNDestinationLookupFailure:
		return []byte("\"OFPRBSNDestinationLookupFailure\""), nil
	case OFPRBSNNoRoute:
		return []byte("\"OFPRBSNNoRoute\""), nil
	case OFPRBSNICMPEchoRequest:
		return []byte("\"OFPRBSNICMPEchoRequest\""), nil
	case OFPRBSNDestNetworkUnreachable:
		return []byte("\"OFPRBSNDestNetworkUnreachable\""), nil
	case OFPRBSNDestHostUnreachable:
		return []byte("\"OFPRBSNDestHostUnreachable\""), nil
	case OFPRBSNDestPortUnreachable:
		return []byte("\"OFPRBSNDestPortUnreachable\""), nil
	case OFPRBSNFragmentationRequired:
		return []byte("\"OFPRBSNFragmentationRequired\""), nil
	case OFPRBSNARP:
		return []byte("\"OFPRBSNARP\""), nil
	case OFPRBSNDhcp:
		return []byte("\"OFPRBSNDhcp\""), nil
	case OFPRBSNDebug:
		return []byte("\"OFPRBSNDebug\""), nil
	case OFPRBSNPacketOfDeath:
		return []byte("\"OFPRBSNPacketOfDeath\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for PacketInReason", self)
	}
}

const (
	// Identifiers from group ofp_port
	OFPPMax        = 4294967040 // OFPP_MAX
	OFPPInPort     = 4294967288 // OFPP_IN_PORT
	OFPPTable      = 4294967289 // OFPP_TABLE
	OFPPNormal     = 4294967290 // OFPP_NORMAL
	OFPPFlood      = 4294967291 // OFPP_FLOOD
	OFPPAll        = 4294967292 // OFPP_ALL
	OFPPController = 4294967293 // OFPP_CONTROLLER
	OFPPLocal      = 4294967294 // OFPP_LOCAL
	OFPPAny        = 4294967295 // OFPP_ANY
)

type Port uint32

func (self Port) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPMax:
		return []byte("\"OFPPMax\""), nil
	case OFPPInPort:
		return []byte("\"OFPPInPort\""), nil
	case OFPPTable:
		return []byte("\"OFPPTable\""), nil
	case OFPPNormal:
		return []byte("\"OFPPNormal\""), nil
	case OFPPFlood:
		return []byte("\"OFPPFlood\""), nil
	case OFPPAll:
		return []byte("\"OFPPAll\""), nil
	case OFPPController:
		return []byte("\"OFPPController\""), nil
	case OFPPLocal:
		return []byte("\"OFPPLocal\""), nil
	case OFPPAny:
		return []byte("\"OFPPAny\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for Port", self)
	}
}

const (
	// Identifiers from group ofp_port_config
	OFPPCPortDown      = 1          // OFPPC_PORT_DOWN
	OFPPCNoRecv        = 4          // OFPPC_NO_RECV
	OFPPCNoFwd         = 32         // OFPPC_NO_FWD
	OFPPCNoPacketIn    = 64         // OFPPC_NO_PACKET_IN
	OFPPCBSNMirrorDest = 2147483648 // OFPPC_BSN_MIRROR_DEST
)

type PortConfig uint32

func (self PortConfig) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPPCPortDown == OFPPCPortDown {
		flags = append(flags, "\"OFPPCPortDown\": true")
	}
	if self&OFPPCNoRecv == OFPPCNoRecv {
		flags = append(flags, "\"OFPPCNoRecv\": true")
	}
	if self&OFPPCNoFwd == OFPPCNoFwd {
		flags = append(flags, "\"OFPPCNoFwd\": true")
	}
	if self&OFPPCNoPacketIn == OFPPCNoPacketIn {
		flags = append(flags, "\"OFPPCNoPacketIn\": true")
	}
	if self&OFPPCBSNMirrorDest == OFPPCBSNMirrorDest {
		flags = append(flags, "\"OFPPCBSNMirrorDest\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_port_features
	OFPPF10MbHd             = 1          // OFPPF_10MB_HD
	OFPPF10MbFd             = 2          // OFPPF_10MB_FD
	OFPPF100MbHd            = 4          // OFPPF_100MB_HD
	OFPPF100MbFd            = 8          // OFPPF_100MB_FD
	OFPPF1GbHd              = 16         // OFPPF_1GB_HD
	OFPPF1GbFd              = 32         // OFPPF_1GB_FD
	OFPPF10GbFd             = 64         // OFPPF_10GB_FD
	OFPPF40GbFd             = 128        // OFPPF_40GB_FD
	OFPPF100GbFd            = 256        // OFPPF_100GB_FD
	OFPPF1TbFd              = 512        // OFPPF_1TB_FD
	OFPPFOther              = 1024       // OFPPF_OTHER
	OFPPFCopper             = 2048       // OFPPF_COPPER
	OFPPFFiber              = 4096       // OFPPF_FIBER
	OFPPFAutoneg            = 8192       // OFPPF_AUTONEG
	OFPPFPause              = 16384      // OFPPF_PAUSE
	OFPPFPauseAsym          = 32768      // OFPPF_PAUSE_ASYM
	OFPPFBSNBreakoutCapable = 2147483648 // OFPPF_BSN_BREAKOUT_CAPABLE
)

type PortFeatures uint32

func (self PortFeatures) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPPF10MbHd == OFPPF10MbHd {
		flags = append(flags, "\"OFPPF10MbHd\": true")
	}
	if self&OFPPF10MbFd == OFPPF10MbFd {
		flags = append(flags, "\"OFPPF10MbFd\": true")
	}
	if self&OFPPF100MbHd == OFPPF100MbHd {
		flags = append(flags, "\"OFPPF100MbHd\": true")
	}
	if self&OFPPF100MbFd == OFPPF100MbFd {
		flags = append(flags, "\"OFPPF100MbFd\": true")
	}
	if self&OFPPF1GbHd == OFPPF1GbHd {
		flags = append(flags, "\"OFPPF1GbHd\": true")
	}
	if self&OFPPF1GbFd == OFPPF1GbFd {
		flags = append(flags, "\"OFPPF1GbFd\": true")
	}
	if self&OFPPF10GbFd == OFPPF10GbFd {
		flags = append(flags, "\"OFPPF10GbFd\": true")
	}
	if self&OFPPF40GbFd == OFPPF40GbFd {
		flags = append(flags, "\"OFPPF40GbFd\": true")
	}
	if self&OFPPF100GbFd == OFPPF100GbFd {
		flags = append(flags, "\"OFPPF100GbFd\": true")
	}
	if self&OFPPF1TbFd == OFPPF1TbFd {
		flags = append(flags, "\"OFPPF1TbFd\": true")
	}
	if self&OFPPFOther == OFPPFOther {
		flags = append(flags, "\"OFPPFOther\": true")
	}
	if self&OFPPFCopper == OFPPFCopper {
		flags = append(flags, "\"OFPPFCopper\": true")
	}
	if self&OFPPFFiber == OFPPFFiber {
		flags = append(flags, "\"OFPPFFiber\": true")
	}
	if self&OFPPFAutoneg == OFPPFAutoneg {
		flags = append(flags, "\"OFPPFAutoneg\": true")
	}
	if self&OFPPFPause == OFPPFPause {
		flags = append(flags, "\"OFPPFPause\": true")
	}
	if self&OFPPFPauseAsym == OFPPFPauseAsym {
		flags = append(flags, "\"OFPPFPauseAsym\": true")
	}
	if self&OFPPFBSNBreakoutCapable == OFPPFBSNBreakoutCapable {
		flags = append(flags, "\"OFPPFBSNBreakoutCapable\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_port_mod_failed_code
	OFPPMFCBadPort      = 0 // OFPPMFC_BAD_PORT
	OFPPMFCBadHwAddr    = 1 // OFPPMFC_BAD_HW_ADDR
	OFPPMFCBadConfig    = 2 // OFPPMFC_BAD_CONFIG
	OFPPMFCBadAdvertise = 3 // OFPPMFC_BAD_ADVERTISE
	OFPPMFCEperm        = 4 // OFPPMFC_EPERM
)

type PortModFailedCode uint16

func (self PortModFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPMFCBadPort:
		return []byte("\"OFPPMFCBadPort\""), nil
	case OFPPMFCBadHwAddr:
		return []byte("\"OFPPMFCBadHwAddr\""), nil
	case OFPPMFCBadConfig:
		return []byte("\"OFPPMFCBadConfig\""), nil
	case OFPPMFCBadAdvertise:
		return []byte("\"OFPPMFCBadAdvertise\""), nil
	case OFPPMFCEperm:
		return []byte("\"OFPPMFCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for PortModFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_port_reason
	OFPPRAdd    = 0 // OFPPR_ADD
	OFPPRDelete = 1 // OFPPR_DELETE
	OFPPRModify = 2 // OFPPR_MODIFY
)

type PortReason uint8

func (self PortReason) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPPRAdd:
		return []byte("\"OFPPRAdd\""), nil
	case OFPPRDelete:
		return []byte("\"OFPPRDelete\""), nil
	case OFPPRModify:
		return []byte("\"OFPPRModify\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for PortReason", self)
	}
}

const (
	// Identifiers from group ofp_port_state
	OFPPSLinkDown = 1 // OFPPS_LINK_DOWN
	OFPPSBlocked  = 2 // OFPPS_BLOCKED
	OFPPSLive     = 4 // OFPPS_LIVE
)

type PortState uint32

func (self PortState) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPPSLinkDown == OFPPSLinkDown {
		flags = append(flags, "\"OFPPSLinkDown\": true")
	}
	if self&OFPPSBlocked == OFPPSBlocked {
		flags = append(flags, "\"OFPPSBlocked\": true")
	}
	if self&OFPPSLive == OFPPSLive {
		flags = append(flags, "\"OFPPSLive\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_queue_op_failed_code
	OFPQOFCBadPort  = 0 // OFPQOFC_BAD_PORT
	OFPQOFCBadQueue = 1 // OFPQOFC_BAD_QUEUE
	OFPQOFCEperm    = 2 // OFPQOFC_EPERM
)

type QueueOpFailedCode uint16

func (self QueueOpFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPQOFCBadPort:
		return []byte("\"OFPQOFCBadPort\""), nil
	case OFPQOFCBadQueue:
		return []byte("\"OFPQOFCBadQueue\""), nil
	case OFPQOFCEperm:
		return []byte("\"OFPQOFCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for QueueOpFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_queue_properties
	OFPQTMinRate      = 1     // OFPQT_MIN_RATE
	OFPQTMaxRate      = 2     // OFPQT_MAX_RATE
	OFPQTExperimenter = 65535 // OFPQT_EXPERIMENTER
)

type QueueProperties uint16

func (self QueueProperties) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPQTMinRate:
		return []byte("\"OFPQTMinRate\""), nil
	case OFPQTMaxRate:
		return []byte("\"OFPQTMaxRate\""), nil
	case OFPQTExperimenter:
		return []byte("\"OFPQTExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for QueueProperties", self)
	}
}

const (
	// Identifiers from group ofp_role_request_failed_code
	OFPRRFCStale   = 0 // OFPRRFC_STALE
	OFPRRFCUnsup   = 1 // OFPRRFC_UNSUP
	OFPRRFCBadRole = 2 // OFPRRFC_BAD_ROLE
)

type RoleRequestFailedCode uint16

func (self RoleRequestFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPRRFCStale:
		return []byte("\"OFPRRFCStale\""), nil
	case OFPRRFCUnsup:
		return []byte("\"OFPRRFCUnsup\""), nil
	case OFPRRFCBadRole:
		return []byte("\"OFPRRFCBadRole\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for RoleRequestFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_stats_reply_flags
	OFPSFReplyMore = 1 // OFPSF_REPLY_MORE
)

type StatsReplyFlags uint16

func (self StatsReplyFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPSFReplyMore == OFPSFReplyMore {
		flags = append(flags, "\"OFPSFReplyMore\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_stats_request_flags
	OFPSFReqMore = 1 // OFPSF_REQ_MORE
)

type StatsRequestFlags uint16

func (self StatsRequestFlags) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPSFReqMore == OFPSFReqMore {
		flags = append(flags, "\"OFPSFReqMore\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_stats_type
	OFPSTDesc          = 0     // OFPST_DESC
	OFPSTFlow          = 1     // OFPST_FLOW
	OFPSTAggregate     = 2     // OFPST_AGGREGATE
	OFPSTTable         = 3     // OFPST_TABLE
	OFPSTPort          = 4     // OFPST_PORT
	OFPSTQueue         = 5     // OFPST_QUEUE
	OFPSTGroup         = 6     // OFPST_GROUP
	OFPSTGroupDesc     = 7     // OFPST_GROUP_DESC
	OFPSTGroupFeatures = 8     // OFPST_GROUP_FEATURES
	OFPSTMeter         = 9     // OFPST_METER
	OFPSTMeterConfig   = 10    // OFPST_METER_CONFIG
	OFPSTMeterFeatures = 11    // OFPST_METER_FEATURES
	OFPSTTableFeatures = 12    // OFPST_TABLE_FEATURES
	OFPSTPortDesc      = 13    // OFPST_PORT_DESC
	OFPSTExperimenter  = 65535 // OFPST_EXPERIMENTER
)

type StatsType uint16

func (self StatsType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPSTDesc:
		return []byte("\"OFPSTDesc\""), nil
	case OFPSTFlow:
		return []byte("\"OFPSTFlow\""), nil
	case OFPSTAggregate:
		return []byte("\"OFPSTAggregate\""), nil
	case OFPSTTable:
		return []byte("\"OFPSTTable\""), nil
	case OFPSTPort:
		return []byte("\"OFPSTPort\""), nil
	case OFPSTQueue:
		return []byte("\"OFPSTQueue\""), nil
	case OFPSTGroup:
		return []byte("\"OFPSTGroup\""), nil
	case OFPSTGroupDesc:
		return []byte("\"OFPSTGroupDesc\""), nil
	case OFPSTGroupFeatures:
		return []byte("\"OFPSTGroupFeatures\""), nil
	case OFPSTMeter:
		return []byte("\"OFPSTMeter\""), nil
	case OFPSTMeterConfig:
		return []byte("\"OFPSTMeterConfig\""), nil
	case OFPSTMeterFeatures:
		return []byte("\"OFPSTMeterFeatures\""), nil
	case OFPSTTableFeatures:
		return []byte("\"OFPSTTableFeatures\""), nil
	case OFPSTPortDesc:
		return []byte("\"OFPSTPortDesc\""), nil
	case OFPSTExperimenter:
		return []byte("\"OFPSTExperimenter\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for StatsType", self)
	}
}

const (
	// Identifiers from group ofp_switch_config_failed_code
	OFPSCFCBadFlags = 0 // OFPSCFC_BAD_FLAGS
	OFPSCFCBadLen   = 1 // OFPSCFC_BAD_LEN
	OFPSCFCEperm    = 2 // OFPSCFC_EPERM
)

type SwitchConfigFailedCode uint16

func (self SwitchConfigFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPSCFCBadFlags:
		return []byte("\"OFPSCFCBadFlags\""), nil
	case OFPSCFCBadLen:
		return []byte("\"OFPSCFCBadLen\""), nil
	case OFPSCFCEperm:
		return []byte("\"OFPSCFCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for SwitchConfigFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_table
	OFPTTMax = 254 // OFPTT_MAX
	OFPTTAll = 255 // OFPTT_ALL
)

type Table uint8

func (self Table) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPTTMax:
		return []byte("\"OFPTTMax\""), nil
	case OFPTTAll:
		return []byte("\"OFPTTAll\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for Table", self)
	}
}

const (
	// Identifiers from group ofp_table_config
	OFPTCDeprecatedMask = 3 // OFPTC_DEPRECATED_MASK
)

type TableConfig uint32

func (self TableConfig) MarshalJSON() ([]byte, error) {
	var flags []string
	if self&OFPTCDeprecatedMask == OFPTCDeprecatedMask {
		flags = append(flags, "\"OFPTCDeprecatedMask\": true")
	}
	return []byte("{" + strings.Join(flags, ", ") + "}"), nil
}

const (
	// Identifiers from group ofp_table_feature_prop_type
	OFPTFPTInstructions      = 0     // OFPTFPT_INSTRUCTIONS
	OFPTFPTInstructionsMiss  = 1     // OFPTFPT_INSTRUCTIONS_MISS
	OFPTFPTNextTables        = 2     // OFPTFPT_NEXT_TABLES
	OFPTFPTNextTablesMiss    = 3     // OFPTFPT_NEXT_TABLES_MISS
	OFPTFPTWriteActions      = 4     // OFPTFPT_WRITE_ACTIONS
	OFPTFPTWriteActionsMiss  = 5     // OFPTFPT_WRITE_ACTIONS_MISS
	OFPTFPTApplyActions      = 6     // OFPTFPT_APPLY_ACTIONS
	OFPTFPTApplyActionsMiss  = 7     // OFPTFPT_APPLY_ACTIONS_MISS
	OFPTFPTMatch             = 8     // OFPTFPT_MATCH
	OFPTFPTWildcards         = 10    // OFPTFPT_WILDCARDS
	OFPTFPTWriteSetfield     = 12    // OFPTFPT_WRITE_SETFIELD
	OFPTFPTWriteSetfieldMiss = 13    // OFPTFPT_WRITE_SETFIELD_MISS
	OFPTFPTApplySetfield     = 14    // OFPTFPT_APPLY_SETFIELD
	OFPTFPTApplySetfieldMiss = 15    // OFPTFPT_APPLY_SETFIELD_MISS
	OFPTFPTExperimenter      = 65534 // OFPTFPT_EXPERIMENTER
	OFPTFPTExperimenterMiss  = 65535 // OFPTFPT_EXPERIMENTER_MISS
)

type TableFeaturePropType uint16

func (self TableFeaturePropType) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPTFPTInstructions:
		return []byte("\"OFPTFPTInstructions\""), nil
	case OFPTFPTInstructionsMiss:
		return []byte("\"OFPTFPTInstructionsMiss\""), nil
	case OFPTFPTNextTables:
		return []byte("\"OFPTFPTNextTables\""), nil
	case OFPTFPTNextTablesMiss:
		return []byte("\"OFPTFPTNextTablesMiss\""), nil
	case OFPTFPTWriteActions:
		return []byte("\"OFPTFPTWriteActions\""), nil
	case OFPTFPTWriteActionsMiss:
		return []byte("\"OFPTFPTWriteActionsMiss\""), nil
	case OFPTFPTApplyActions:
		return []byte("\"OFPTFPTApplyActions\""), nil
	case OFPTFPTApplyActionsMiss:
		return []byte("\"OFPTFPTApplyActionsMiss\""), nil
	case OFPTFPTMatch:
		return []byte("\"OFPTFPTMatch\""), nil
	case OFPTFPTWildcards:
		return []byte("\"OFPTFPTWildcards\""), nil
	case OFPTFPTWriteSetfield:
		return []byte("\"OFPTFPTWriteSetfield\""), nil
	case OFPTFPTWriteSetfieldMiss:
		return []byte("\"OFPTFPTWriteSetfieldMiss\""), nil
	case OFPTFPTApplySetfield:
		return []byte("\"OFPTFPTApplySetfield\""), nil
	case OFPTFPTApplySetfieldMiss:
		return []byte("\"OFPTFPTApplySetfieldMiss\""), nil
	case OFPTFPTExperimenter:
		return []byte("\"OFPTFPTExperimenter\""), nil
	case OFPTFPTExperimenterMiss:
		return []byte("\"OFPTFPTExperimenterMiss\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for TableFeaturePropType", self)
	}
}

const (
	// Identifiers from group ofp_table_features_failed_code
	OFPTFFCBadTable    = 0 // OFPTFFC_BAD_TABLE
	OFPTFFCBadMetadata = 1 // OFPTFFC_BAD_METADATA
	OFPTFFCBadType     = 2 // OFPTFFC_BAD_TYPE
	OFPTFFCBadLen      = 3 // OFPTFFC_BAD_LEN
	OFPTFFCBadArgument = 4 // OFPTFFC_BAD_ARGUMENT
	OFPTFFCEperm       = 5 // OFPTFFC_EPERM
)

type TableFeaturesFailedCode uint16

func (self TableFeaturesFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPTFFCBadTable:
		return []byte("\"OFPTFFCBadTable\""), nil
	case OFPTFFCBadMetadata:
		return []byte("\"OFPTFFCBadMetadata\""), nil
	case OFPTFFCBadType:
		return []byte("\"OFPTFFCBadType\""), nil
	case OFPTFFCBadLen:
		return []byte("\"OFPTFFCBadLen\""), nil
	case OFPTFFCBadArgument:
		return []byte("\"OFPTFFCBadArgument\""), nil
	case OFPTFFCEperm:
		return []byte("\"OFPTFFCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for TableFeaturesFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_table_mod_failed_code
	OFPTMFCBadTable  = 0 // OFPTMFC_BAD_TABLE
	OFPTMFCBadConfig = 1 // OFPTMFC_BAD_CONFIG
	OFPTMFCEperm     = 2 // OFPTMFC_EPERM
)

type TableModFailedCode uint16

func (self TableModFailedCode) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPTMFCBadTable:
		return []byte("\"OFPTMFCBadTable\""), nil
	case OFPTMFCBadConfig:
		return []byte("\"OFPTMFCBadConfig\""), nil
	case OFPTMFCEperm:
		return []byte("\"OFPTMFCEperm\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for TableModFailedCode", self)
	}
}

const (
	// Identifiers from group ofp_type
	OFPTHello                 = 0  // OFPT_HELLO
	OFPTError                 = 1  // OFPT_ERROR
	OFPTEchoRequest           = 2  // OFPT_ECHO_REQUEST
	OFPTEchoReply             = 3  // OFPT_ECHO_REPLY
	OFPTExperimenter          = 4  // OFPT_EXPERIMENTER
	OFPTFeaturesRequest       = 5  // OFPT_FEATURES_REQUEST
	OFPTFeaturesReply         = 6  // OFPT_FEATURES_REPLY
	OFPTGetConfigRequest      = 7  // OFPT_GET_CONFIG_REQUEST
	OFPTGetConfigReply        = 8  // OFPT_GET_CONFIG_REPLY
	OFPTSetConfig             = 9  // OFPT_SET_CONFIG
	OFPTPacketIn              = 10 // OFPT_PACKET_IN
	OFPTFlowRemoved           = 11 // OFPT_FLOW_REMOVED
	OFPTPortStatus            = 12 // OFPT_PORT_STATUS
	OFPTPacketOut             = 13 // OFPT_PACKET_OUT
	OFPTFlowMod               = 14 // OFPT_FLOW_MOD
	OFPTGroupMod              = 15 // OFPT_GROUP_MOD
	OFPTPortMod               = 16 // OFPT_PORT_MOD
	OFPTTableMod              = 17 // OFPT_TABLE_MOD
	OFPTStatsRequest          = 18 // OFPT_STATS_REQUEST
	OFPTStatsReply            = 19 // OFPT_STATS_REPLY
	OFPTBarrierRequest        = 20 // OFPT_BARRIER_REQUEST
	OFPTBarrierReply          = 21 // OFPT_BARRIER_REPLY
	OFPTQueueGetConfigRequest = 22 // OFPT_QUEUE_GET_CONFIG_REQUEST
	OFPTQueueGetConfigReply   = 23 // OFPT_QUEUE_GET_CONFIG_REPLY
	OFPTRoleRequest           = 24 // OFPT_ROLE_REQUEST
	OFPTRoleReply             = 25 // OFPT_ROLE_REPLY
	OFPTGetAsyncRequest       = 26 // OFPT_GET_ASYNC_REQUEST
	OFPTGetAsyncReply         = 27 // OFPT_GET_ASYNC_REPLY
	OFPTSetAsync              = 28 // OFPT_SET_ASYNC
	OFPTMeterMod              = 29 // OFPT_METER_MOD
)

type Type uint8

func (self Type) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPTHello:
		return []byte("\"OFPTHello\""), nil
	case OFPTError:
		return []byte("\"OFPTError\""), nil
	case OFPTEchoRequest:
		return []byte("\"OFPTEchoRequest\""), nil
	case OFPTEchoReply:
		return []byte("\"OFPTEchoReply\""), nil
	case OFPTExperimenter:
		return []byte("\"OFPTExperimenter\""), nil
	case OFPTFeaturesRequest:
		return []byte("\"OFPTFeaturesRequest\""), nil
	case OFPTFeaturesReply:
		return []byte("\"OFPTFeaturesReply\""), nil
	case OFPTGetConfigRequest:
		return []byte("\"OFPTGetConfigRequest\""), nil
	case OFPTGetConfigReply:
		return []byte("\"OFPTGetConfigReply\""), nil
	case OFPTSetConfig:
		return []byte("\"OFPTSetConfig\""), nil
	case OFPTPacketIn:
		return []byte("\"OFPTPacketIn\""), nil
	case OFPTFlowRemoved:
		return []byte("\"OFPTFlowRemoved\""), nil
	case OFPTPortStatus:
		return []byte("\"OFPTPortStatus\""), nil
	case OFPTPacketOut:
		return []byte("\"OFPTPacketOut\""), nil
	case OFPTFlowMod:
		return []byte("\"OFPTFlowMod\""), nil
	case OFPTGroupMod:
		return []byte("\"OFPTGroupMod\""), nil
	case OFPTPortMod:
		return []byte("\"OFPTPortMod\""), nil
	case OFPTTableMod:
		return []byte("\"OFPTTableMod\""), nil
	case OFPTStatsRequest:
		return []byte("\"OFPTStatsRequest\""), nil
	case OFPTStatsReply:
		return []byte("\"OFPTStatsReply\""), nil
	case OFPTBarrierRequest:
		return []byte("\"OFPTBarrierRequest\""), nil
	case OFPTBarrierReply:
		return []byte("\"OFPTBarrierReply\""), nil
	case OFPTQueueGetConfigRequest:
		return []byte("\"OFPTQueueGetConfigRequest\""), nil
	case OFPTQueueGetConfigReply:
		return []byte("\"OFPTQueueGetConfigReply\""), nil
	case OFPTRoleRequest:
		return []byte("\"OFPTRoleRequest\""), nil
	case OFPTRoleReply:
		return []byte("\"OFPTRoleReply\""), nil
	case OFPTGetAsyncRequest:
		return []byte("\"OFPTGetAsyncRequest\""), nil
	case OFPTGetAsyncReply:
		return []byte("\"OFPTGetAsyncReply\""), nil
	case OFPTSetAsync:
		return []byte("\"OFPTSetAsync\""), nil
	case OFPTMeterMod:
		return []byte("\"OFPTMeterMod\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for Type", self)
	}
}

const (
	// Identifiers from group ofp_vlan_id
	OFPVIDNone    = 0    // OFPVID_NONE
	OFPVIDPresent = 4096 // OFPVID_PRESENT
)

type VlanId uint16

func (self VlanId) MarshalJSON() ([]byte, error) {
	switch self {
	case OFPVIDNone:
		return []byte("\"OFPVIDNone\""), nil
	case OFPVIDPresent:
		return []byte("\"OFPVIDPresent\""), nil
	default:
		return nil, fmt.Errorf("Invalid value '%d' for VlanId", self)
	}
}
